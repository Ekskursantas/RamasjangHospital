var EntryPoint =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Initializer_1 = __webpack_require__(2);
	var Logger_1 = __webpack_require__(3);
	var AssetHelper_1 = __webpack_require__(11);
	var callback;
	var Main = (function () {
	    function Main() {
	        console.log("Main constructor!!!");
	        Logger_1.Logger.IS_DEV = true;
	    }
	    Main.prototype.start = function (assets, api, element, cb) {
	        console.log("start() - api.version: " + api.version);
	        Main.ASSETS = assets;
	        Main.RAMASJANG_API = api;
	        Main.DIV_ELEMENT = element;
	        callback = cb;
	        this.myAssetHelper = new AssetHelper_1.AssetHelper();
	        this.myAssetHelper.mapSounds();
	        this.myAssetHelper.parseSpriteSheets(assets, this.initGame);
	    };
	    Main.prototype.initGame = function () {
	        console.log("initGame()");
	        this.initializer = new Initializer_1.Initializer();
	        this.initializer.startGame("testGame", callback);
	    };
	    return Main;
	}());
	exports.Main = Main;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var GameHospital_1 = __webpack_require__(4);
	var _callback;
	var Initializer = (function () {
	    function Initializer() {
	    }
	    Initializer.prototype.setCallbacks = function (initDoneCallback, exitCallback, showLoaderCallBack, hideLoaderCallBack, debugCallBack) {
	        Logger_1.Logger.log(this, "setCallbacks");
	        Initializer.initDoneCallbackFunction = initDoneCallback;
	        Initializer.exitCallbackFunction = exitCallback;
	        Initializer.showLoaderCallbackFunction = showLoaderCallBack;
	        Initializer.hideLoaderCallbackFunction = hideLoaderCallBack;
	        Initializer.debugCallbackFunction = debugCallBack;
	    };
	    Initializer.prototype.startGame = function (subGameToStart, callback) {
	        Logger_1.Logger.log(this, "startGame  subGameToStart == " + subGameToStart);
	        this._subGameToStart = subGameToStart;
	        _callback = callback;
	        this.onInitDone();
	    };
	    Initializer.prototype.backButtonCallbackProxy = function () {
	        if (Initializer.backButtonCallback != null) {
	            Initializer.backButtonCallback();
	        }
	    };
	    Initializer.prototype.getUseWideStage = function () {
	        return true;
	    };
	    Initializer.prototype.onInitDone = function () {
	        Logger_1.Logger.log(this, "onInitDone");
	        var game = new GameHospital_1.GameHospital(false, _callback);
	        if (Initializer.initDoneCallbackFunction != null) {
	            Initializer.initDoneCallbackFunction(game, this.backButtonCallbackProxy);
	        }
	    };
	    return Initializer;
	}());
	exports.Initializer = Initializer;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger = (function () {
	    function Logger() {
	    }
	    Logger.log = function (instance, logItem) {
	        if (instance === void 0) { instance = null; }
	        if (logItem === void 0) { logItem = null; }
	        var args = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            args[_i - 2] = arguments[_i];
	        }
	        Logger._instance = instance;
	        if (Logger.IS_DEV && Logger.DO_LOGGING) {
	            var category = [];
	            Logger._log(logItem, category, true);
	            if (args.length > 0) {
	                var strCat = category.length > 0 ? category[0] : "";
	                Logger._log(args, [strCat + "..."], true);
	            }
	        }
	    };
	    Logger._log = function (message, category, tagEveryLine) {
	        if (category === void 0) { category = null; }
	        if (tagEveryLine === void 0) { tagEveryLine = false; }
	        if (message == null) {
	            message = "null";
	        }
	        if (message.toString() == "[object Object]") {
	        }
	        else {
	            Logger.sendString(message, category, tagEveryLine);
	        }
	    };
	    Logger.sendString = function (message, category, tagEveryLine) {
	        if (tagEveryLine === void 0) { tagEveryLine = false; }
	        if (Logger.IS_DEV) {
	            if (String(message).indexOf("onSaveProgress") > -1 || String(message).indexOf("onWriteTimer") > -1) {
	            }
	            else {
	                if (tagEveryLine) {
	                    message = Logger.tagLines(message, category);
	                }
	                if (message != null && message) {
	                    console.log(Logger._instance, message);
	                }
	            }
	        }
	    };
	    Logger.tagLines = function (message, category) {
	        var messageArray = String(message).split("\n");
	        var prefix = "[ " + category + " ] ";
	        message = prefix + messageArray.join("\n" + prefix);
	        return message;
	    };
	    return Logger;
	}());
	Logger.IS_DEV = false;
	Logger.DO_LOGGING = true;
	exports.Logger = Logger;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var Initializer_1 = __webpack_require__(2);
	var MainView_1 = __webpack_require__(5);
	var HospitalEvent_1 = __webpack_require__(9);
	var pixi_js_1 = __webpack_require__(8);
	var DataSaver_1 = __webpack_require__(79);
	var Config_1 = __webpack_require__(6);
	var _callback;
	var GameHospital = (function (_super) {
	    __extends(GameHospital, _super);
	    function GameHospital(debug, callback, assetPrefix) {
	        if (debug === void 0) { debug = false; }
	        if (assetPrefix === void 0) { assetPrefix = "media/hospital/assets/"; }
	        var _this = _super.call(this) || this;
	        _this.onkillGame = function () {
	            Logger_1.Logger.log(_this, "GameHospital.onkillGame");
	            _this.mainView.off(HospitalEvent_1.HospitalEvent.KILL_GAME, _this.onkillGame);
	            if (_this.mainView != null) {
	                _this.removeChild(_this.mainView);
	            }
	            _this.endGame();
	        };
	        Logger_1.Logger.log(_this, " Hospital(assetPrefix == " + _this.assetPrefix);
	        _callback = callback;
	        _this.assetPrefix = assetPrefix;
	        _this.init();
	        return _this;
	    }
	    GameHospital.prototype.init = function (event) {
	        if (event === void 0) { event = null; }
	        Logger_1.Logger.log(this, " Hospital init");
	        this.validateData();
	        _callback();
	        this.startApp();
	        if (Initializer_1.Initializer.showLoaderCallbackFunction != null) {
	            Initializer_1.Initializer.showLoaderCallbackFunction();
	        }
	    };
	    GameHospital.prototype.validateData = function () {
	        Config_1.Config.dataSaver = new DataSaver_1.DataSaver();
	    };
	    GameHospital.prototype.startApp = function () {
	        Logger_1.Logger.log(this, "GameHospital.startApp()");
	        if (Initializer_1.Initializer.initDoneCallbackFunction != null) {
	            Initializer_1.Initializer.initDoneCallbackFunction();
	        }
	        this.mainView = new MainView_1.MainView();
	        this.mainView.on(HospitalEvent_1.HospitalEvent.KILL_GAME, this.onkillGame);
	        this.addChild((this.mainView));
	        this.mainView.init();
	        if (Initializer_1.Initializer.hideLoaderCallbackFunction != null) {
	            Initializer_1.Initializer.hideLoaderCallbackFunction();
	        }
	    };
	    GameHospital.prototype.endGame = function () {
	        Logger_1.Logger.log(this, "GameHospital endGame if Initializer.exitCallbackFunction) " + Initializer_1.Initializer.exitCallbackFunction);
	        if (Initializer_1.Initializer.exitCallbackFunction != null) {
	            Initializer_1.Initializer.exitCallbackFunction();
	        }
	    };
	    GameHospital.prototype.getInitializer = function () {
	        if (!this.initializer) {
	            this.initializer = new Initializer_1.Initializer();
	        }
	        Logger_1.Logger.log(this, "GameHospital getInitializer : return this.initializer == " + this.initializer);
	        return this.initializer;
	    };
	    return GameHospital;
	}(pixi_js_1.Sprite));
	exports.GameHospital = GameHospital;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Config_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(3);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalEvent_1 = __webpack_require__(9);
	var AudioPlayer_1 = __webpack_require__(10);
	var Initializer_1 = __webpack_require__(2);
	var Main_1 = __webpack_require__(1);
	var WaitingRoomView_1 = __webpack_require__(15);
	var Level_1 = __webpack_require__(22);
	var PinchingGameView_1 = __webpack_require__(53);
	var PuzzleGameView_1 = __webpack_require__(58);
	var SoothingGameView_1 = __webpack_require__(61);
	var FollowPathGameView_1 = __webpack_require__(64);
	var ShootBacteriaGameView_1 = __webpack_require__(69);
	var WipingGameView_1 = __webpack_require__(72);
	var FrontPageView_1 = __webpack_require__(75);
	var OperatingRoomView_1 = __webpack_require__(76);
	var Scanner_1 = __webpack_require__(31);
	var pixi_js_1 = __webpack_require__(8);
	var MainView = (function (_super) {
	    __extends(MainView, _super);
	    function MainView() {
	        var _this = _super.call(this) || this;
	        _this.old_w = AssetLoader_1.AssetLoader.STAGE_WIDTH;
	        _this.old_h = AssetLoader_1.AssetLoader.STAGE_HEIGHT;
	        _this.new_w = 1;
	        _this.new_h = 1;
	        _this.update = function () {
	            if (_this.stage && _this.stage.children.length > 0) {
	                _this._renderer.render(_this.stage);
	            }
	            requestAnimationFrame(_this.update);
	        };
	        _this.onSoundsLoadedComplete = function () {
	            Logger_1.Logger.log(_this, "onSoundsLoadedComplete");
	            _this.setupHospital();
	        };
	        _this.onFrontpageExited = function (event) {
	            if (_this.currentMusic != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound("intro");
	            }
	            _this.currentMusic = "waiting_room_loop";
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(_this.currentMusic, 999, Config_1.Config.MUSIC_VOLUME_LEVEL);
	            Config_1.Config.gameState = Config_1.Config.IDLE;
	            _this.showView(WaitingRoomView_1.WaitingRoomView);
	        };
	        _this.onShootBacteriaGameCompleted = function (e) {
	            Logger_1.Logger.log(_this, "MainView.onShootBacteriaGameCompleted(e)");
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound("lung_breath_sfx_loop_v02");
	        };
	        _this.onPatientSelected = function (e) {
	            Config_1.Config.gameState = Config_1.Config.EXAMINING;
	            _this.showView(OperatingRoomView_1.OperatingRoomView);
	        };
	        _this.onDiseaseHotspotPressed = function (e) {
	            Logger_1.Logger.log(_this, "MainView onDiseaseHotspotPressed ");
	            if (Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) {
	                if (Config_1.Config.gameState == Config_1.Config.EXAMINING) {
	                    _this.showView(PinchingGameView_1.PinchingGameView);
	                }
	                else if (Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                    _this.showView(FollowPathGameView_1.FollowPathGameView);
	                }
	            }
	            else if (Config_1.Config.currentPatient.disease == Level_1.Level.BURN) {
	                if (Config_1.Config.gameState == Config_1.Config.EXAMINING) {
	                    _this.showView(WipingGameView_1.WipingGameView);
	                }
	                else if (Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                    _this.showView(SoothingGameView_1.SoothingGameView);
	                }
	            }
	            else {
	                _this.showView(_this.diseaseGameMap[Config_1.Config.currentPatient.disease]);
	            }
	        };
	        _this.onPatientCured = function (e) {
	            Logger_1.Logger.log(_this, "MainView.onPatientCured(e)");
	            Config_1.Config.patientsCured++;
	            Logger_1.Logger.log(_this, "Config.patientsCured: " + Config_1.Config.patientsCured);
	            Config_1.Config.setCurrentPatientCured();
	            Config_1.Config.updateCuredPatients();
	            var patientsCuredStringify = String(Config_1.Config.patientsCured);
	            console.log("patientsCuredStringify " + patientsCuredStringify);
	            console.log("Config.patientsCured " + Config_1.Config.patientsCured);
	            var curedDiseasesStringify = Config_1.Config.curedDiseases.join();
	            Logger_1.Logger.log(_this, "Save data");
	            Logger_1.Logger.log(_this, "Config.patientsCured=== " + Config_1.Config.patientsCured);
	            Logger_1.Logger.log(_this, "Config.curedDiseases=== " + Config_1.Config.curedDiseases);
	            Logger_1.Logger.log(_this, "patientsCuredStringify=== " + patientsCuredStringify);
	            Logger_1.Logger.log(_this, "curedDiseasesStringify=== " + curedDiseasesStringify);
	            Config_1.Config.dataSaver.save(patientsCuredStringify);
	            Config_1.Config.dataSaver.saveDiseases(curedDiseasesStringify);
	        };
	        _this.onMiniGameCompleted = function (e) {
	            Logger_1.Logger.log(_this, "MainView.onMiniGameCompleted(e)");
	            Logger_1.Logger.log(_this, "Config.currentPatient.disease: " + Config_1.Config.currentPatient.disease);
	            Logger_1.Logger.log(_this, "Config.gameState: " + Config_1.Config.gameState);
	            if ((Config_1.Config.currentPatient.disease == Level_1.Level.POISONING || Config_1.Config.currentPatient.disease == Level_1.Level.BURN) && Config_1.Config.gameState == Config_1.Config.EXAMINING) {
	                Config_1.Config.gameState = Config_1.Config.BETWEEN_TREATMENTS;
	            }
	            else {
	                Config_1.Config.gameState = Config_1.Config.POST_TREATMENT;
	            }
	            if ((Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) && Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                _this.showView(FollowPathGameView_1.FollowPathGameView);
	            }
	            else if ((Config_1.Config.currentPatient.disease == Level_1.Level.BURN) && Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                _this.showView(SoothingGameView_1.SoothingGameView);
	            }
	            else {
	                _this.showView(OperatingRoomView_1.OperatingRoomView);
	            }
	        };
	        _this.onBackFromMiniGame = function (e) {
	            _this.showView(WaitingRoomView_1.WaitingRoomView);
	        };
	        _this.onBackFromOperatingRoom = function (e) {
	            Logger_1.Logger.log(_this, "MainView onBackFromOperatingRoom");
	            _this.showView(WaitingRoomView_1.WaitingRoomView);
	        };
	        _this.handleResize = function (event) {
	            if (event === void 0) { event = null; }
	            _this.new_w = window.innerWidth;
	            _this.new_h = window.innerHeight;
	            _this.r_old = _this.old_w / _this.old_h;
	            _this.r_new = _this.new_w / _this.new_h;
	            var width;
	            var height;
	            if (_this.r_old > _this.r_new) {
	                width = _this.new_w;
	                console.log("BEFORE: " + width);
	                height = width / _this.r_old;
	                AssetLoader_1.AssetLoader.getInstance().ratioX = width;
	                width = width * _this.new_h / height;
	                console.log("AFTER: " + width);
	                AssetLoader_1.AssetLoader.getInstance().ratioX = width - AssetLoader_1.AssetLoader.getInstance().ratioX;
	                _this.hospitalCSS.innerHTML += ".center-this {position: absolute; left: -" + Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2) + "px; -webkit - transform: translate(-50 %, 0);}";
	                height = _this.new_h;
	            }
	            else {
	                height = _this.new_h;
	                console.log("BEFORE: " + height);
	                width = height * _this.r_old;
	                AssetLoader_1.AssetLoader.getInstance().ratioY = height;
	                height = height * _this.new_w / width;
	                console.log("AFTER: " + height);
	                AssetLoader_1.AssetLoader.getInstance().ratioY = height - AssetLoader_1.AssetLoader.getInstance().ratioY;
	                _this.hospitalCSS.innerHTML += ".center-this {position: absolute; top: -" + Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioY / 2) + "px; -webkit - transform: translate(-50 %, 0);}";
	                width = _this.new_w;
	            }
	            _this._renderer.view.style.width = width + "px";
	            _this._renderer.view.style.height = height + "px";
	            _this.new_w = width;
	            _this.new_h = height;
	        };
	        _this.destroyApp = function () {
	            Logger_1.Logger.log(_this, "MainView destroyApp");
	            Logger_1.Logger.log(_this, "MainView destroyApp  this.currentView ==== " + _this.currentView);
	            TweenMax.killAll();
	            Logger_1.Logger.log(_this, "MainView destroyApp destroy Sound");
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().destroy();
	            Logger_1.Logger.log(_this, "MainView destroyApp AFTER destroy Sound");
	            if (_this.bg != null) {
	                _this.removeChild(_this.bg);
	                _this.bg = null;
	            }
	            if (_this.currentView != null) {
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.PATIENT_CURED, _this.onPatientCured);
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.SHOOT_BACTERIA_GAME_COMPLETED, _this.onShootBacteriaGameCompleted);
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.PATIENT_SELECTED, _this.onPatientSelected);
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED, _this.onDiseaseHotspotPressed);
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED, _this.onMiniGameCompleted);
	                _this.currentView.off(HospitalEvent_1.HospitalEvent.FRONTPAGE_EXITED, _this.onFrontpageExited);
	                if (_this.currentView.name != "WaitingRoomView") {
	                    if (_this.currentView.name != "FrontPageView") {
	                        _this.currentView.btnBack.off(HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM, _this.onBackFromOperatingRoom);
	                        if (_this.currentView.btnToWaitingRoom != null) {
	                            _this.currentView.btnToWaitingRoom.off(HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM, _this.onBackFromOperatingRoom);
	                        }
	                        _this.currentView.btnBack.off(HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME, _this.onBackFromMiniGame);
	                    }
	                }
	                _this.currentView = null;
	            }
	            Logger_1.Logger.log(_this, "MainView destroyApp AFTER this.currentView ==== " + _this.currentView);
	            Logger_1.Logger.log(_this, "MainView AFTER this.stage.removeChildren");
	            Logger_1.Logger.log(_this, "MainView destroyApp call emit");
	            _this.emit(HospitalEvent_1.HospitalEvent.KILL_GAME);
	            try {
	                AssetLoader_1.AssetLoader.getInstance().destroy();
	            }
	            catch (Error) {
	                Logger_1.Logger.log(_this, "ERROR MainView AssetLoader.getInstance().destroy()");
	            }
	            Logger_1.Logger.log(_this, "MainView destroyApp AFTER AssetLoader.getInstance().destroy");
	        };
	        return _this;
	    }
	    MainView.prototype.init = function () {
	        console.log("MainView init - AssetLoaderRumspil.STAGE_WIDTH: " + AssetLoader_1.AssetLoader.STAGE_WIDTH);
	        AudioPlayer_1.AudioPlayer.getInstance().volume = 1;
	        if (Initializer_1.Initializer.showLoaderCallbackFunction != null) {
	            Initializer_1.Initializer.showLoaderCallbackFunction();
	        }
	        AssetLoader_1.AssetLoader.getInstance().init();
	        Config_1.Config.safeFrame = new pixi_js_1.Rectangle(Math.floor((AssetLoader_1.AssetLoader.STAGE_WIDTH - 1024) * 0.5), 0, 1024, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        if (Modernizr.localstorage) {
	            this._localStorageAvailable = true;
	            Logger_1.Logger.log(this, "MainView init  : Modernizr says : window.localStorage is available!");
	        }
	        else {
	            Logger_1.Logger.log(this, "MainView Modernizr says : NO GOOD no native support for local storage");
	        }
	        this.hospitalCanvas = document.getElementById('canvas_hospital');
	        this.hospitalCSS = document.getElementsByTagName('style')[1];
	        this.stage = new PIXI.Container();
	        this._renderer = PIXI.autoDetectRenderer(AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT, { view: this.hospitalCanvas, transparent: true });
	        this._renderer.view.style['transform'] = 'translatez(0)';
	        this.stage = new PIXI.Container();
	        this.stage.interactive = true;
	        this.stage.hitArea = new pixi_js_1.Rectangle(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        $(window).on('resize', this.handleResize);
	        this.handleResize();
	        requestAnimationFrame(this.update);
	        this.onSoundsLoadedComplete();
	    };
	    MainView.prototype.setupHospital = function () {
	        Logger_1.Logger.log(this, "MainView setupHospital");
	        Logger_1.Logger.log(this, "Main.RAMASJANG_API.version: " + Main_1.Main.RAMASJANG_API.version);
	        Config_1.Config.levels = [];
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.SKELETAL], [Level_1.Level.FRACTURE_RADIUS, Level_1.Level.BURN, Level_1.Level.INSECT_BITE], [], [], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_1], [Level_1.Level.BANDAGE_1], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.MUSCULAR], [Level_1.Level.SPRAIN], [Level_1.Level.CLOTHES_LOWER_1], [], [Level_1.Level.BAND_AID_1], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [Level_1.Level.FRACTURE_HAND], [Level_1.Level.CLOTHES_UPPER_2], [Level_1.Level.BANDAGE_2], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.DIGESTIVE], [Level_1.Level.POISONING], [Level_1.Level.CLOTHES_LOWER_2], [], [Level_1.Level.BAND_AID_2], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_3], [], [], [Level_1.Level.LEMONADE_1]));
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.RESPIRATORY_AND_UNINARY], [Level_1.Level.PNEUMONIA], [Level_1.Level.CLOTHES_LOWER_3], [Level_1.Level.BANDAGE_3], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_4], [], [Level_1.Level.BAND_AID_3], []));
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.CARDIOVASCULAR], [], [Level_1.Level.CLOTHES_LOWER_4], [Level_1.Level.BANDAGE_4], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_5], [], [], [Level_1.Level.LEMONADE_2]));
	        Config_1.Config.levels.push(new Level_1.Level([Scanner_1.Scanner.NERVOUS], [], [Level_1.Level.CLOTHES_LOWER_5], [], [Level_1.Level.BAND_AID_4], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_6], [Level_1.Level.BANDAGE_5], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_6], [], [Level_1.Level.BAND_AID_5], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_7], [Level_1.Level.BANDAGE_6], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_7], [], [], [Level_1.Level.LEMONADE_3]));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_8], [], [Level_1.Level.BAND_AID_6], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_8], [Level_1.Level.BANDAGE_7], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_9], [], [Level_1.Level.BAND_AID_7], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_9], [Level_1.Level.BANDAGE_8], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_10], [], [], [Level_1.Level.LEMONADE_4]));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_10], [Level_1.Level.BANDAGE_9], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_11], [], [Level_1.Level.BAND_AID_8], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_11], [Level_1.Level.BANDAGE_10], [], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_UPPER_12], [], [], [Level_1.Level.LEMONADE_5]));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [Level_1.Level.CLOTHES_LOWER_12], [], [Level_1.Level.BAND_AID_9], []));
	        Config_1.Config.levels.push(new Level_1.Level([], [], [], [], [], []));
	        this.diseaseGameMap = {};
	        this.diseaseGameMap[Level_1.Level.INSECT_BITE] = PinchingGameView_1.PinchingGameView;
	        this.diseaseGameMap[Level_1.Level.FRACTURE_HAND] = PuzzleGameView_1.PuzzleGameView;
	        this.diseaseGameMap[Level_1.Level.FRACTURE_RADIUS] = PuzzleGameView_1.PuzzleGameView;
	        this.diseaseGameMap[Level_1.Level.SPRAIN] = SoothingGameView_1.SoothingGameView;
	        this.diseaseGameMap[Level_1.Level.POISONING] = FollowPathGameView_1.FollowPathGameView;
	        this.diseaseGameMap[Level_1.Level.PNEUMONIA] = ShootBacteriaGameView_1.ShootBacteriaGameView;
	        this.diseaseGameMap[Level_1.Level.BURN] = WipingGameView_1.WipingGameView;
	        Config_1.Config.gameState = Config_1.Config.INTRO;
	        this.currentMusic = "intro";
	        this.soundMusic = AudioPlayer_1.AudioPlayer.getInstance().playSound("intro", 999, 0.2);
	        this.showView(FrontPageView_1.FrontPageView);
	    };
	    MainView.prototype.destroyPreviousView = function () {
	        Logger_1.Logger.log(this, "MainView destroyPreviousView");
	        if (this.currentView != null) {
	            if (this.currentView.name != null) {
	                Logger_1.Logger.log(this, "MainView destroyPreviousView  this.currentView.name == " + this.currentView.name);
	            }
	            console.log("REMOVING: " + this.currentView.name);
	            this.currentView.destroy();
	            this.currentView = null;
	        }
	        Logger_1.Logger.log(this, "MainView destroyPreviousView AFTER this.currentView == " + this.currentView);
	    };
	    MainView.prototype.showView = function (view) {
	        Logger_1.Logger.log(this, "MainView showView");
	        Logger_1.Logger.log(this, "MainView showView view == " + view.name);
	        if (this.currentView != null && this.currentView.name != null) {
	            Logger_1.Logger.log(this, "MainView showView this.currentView == " + this.currentView.name);
	        }
	        this.destroyPreviousView();
	        this.currentView = new view();
	        this.currentView.init();
	        this.stage.addChild(this.currentView);
	        this.currentView.show();
	        this.currentView.on(HospitalEvent_1.HospitalEvent.PATIENT_CURED, this.onPatientCured);
	        this.currentView.on(HospitalEvent_1.HospitalEvent.SHOOT_BACTERIA_GAME_COMPLETED, this.onShootBacteriaGameCompleted);
	        this.currentView.on(HospitalEvent_1.HospitalEvent.PATIENT_SELECTED, this.onPatientSelected);
	        this.currentView.on(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED, this.onDiseaseHotspotPressed);
	        this.currentView.on(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED, this.onMiniGameCompleted);
	        this.currentView.on(HospitalEvent_1.HospitalEvent.FRONTPAGE_EXITED, this.onFrontpageExited);
	        if (this.currentView.name != "WaitingRoomView") {
	            if (this.currentView.name != "FrontPageView") {
	                this.currentView.btnBack.on(HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM, this.onBackFromOperatingRoom);
	                if (this.currentView.btnToWaitingRoom != null) {
	                    this.currentView.btnToWaitingRoom.on(HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM, this.onBackFromOperatingRoom);
	                }
	                this.currentView.btnBack.on(HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME, this.onBackFromMiniGame);
	            }
	        }
	    };
	    return MainView;
	}(pixi_js_1.Sprite));
	exports.MainView = MainView;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	;
	var Config = (function () {
	    function Config() {
	    }
	    Config.setCurrentPatientCured = function () {
	        Logger_1.Logger.log(this, "Config.setCurrentPatientCured()");
	        Logger_1.Logger.log(this, "Config currentPatient.disease: " + Config.currentPatient.disease);
	        if (Config.currentPatient == Config.patientWaitingInSlot_1) {
	            Config.patientWaitingInSlot_1 = null;
	        }
	        if (Config.currentPatient == Config.patientWaitingInSlot_2) {
	            Config.patientWaitingInSlot_2 = null;
	        }
	        if (Config.currentPatient == Config.patientWaitingInSlot_3) {
	            Config.patientWaitingInSlot_3 = null;
	        }
	        Logger_1.Logger.log(this, "Config.setCurrentPatientCured() patientWaitingInSlot_1: " + Config.patientWaitingInSlot_1);
	        Logger_1.Logger.log(this, "Config.setCurrentPatientCured() patientWaitingInSlot_2: " + Config.patientWaitingInSlot_2);
	        Logger_1.Logger.log(this, "Config.setCurrentPatientCured() patientWaitingInSlot_3: " + Config.patientWaitingInSlot_3);
	    };
	    Config.getUnlockedDiseases = function () {
	        Logger_1.Logger.log(this, "Config getUnlockedDiseases  Config.patientsCured == " + Config.patientsCured);
	        var unlockedDiseases = [];
	        for (var i = 0; i <= Config.patientsCured; i++) {
	            Logger_1.Logger.log(this, "Config getUnlockedDiseases  i == " + i);
	            Logger_1.Logger.log(this, "Config getUnlockedDiseases  levels.length == " + Config.levels.length);
	            if (i >= Config.levels.length)
	                continue;
	            var level = Config.levels[i];
	            unlockedDiseases = unlockedDiseases.concat(level.unlockedDiseases);
	        }
	        Logger_1.Logger.log(this, "Config getUnlockedDiseases   unlockedDiseases.length == " + unlockedDiseases.length);
	        return unlockedDiseases;
	    };
	    Config.getUnlockedClothes = function () {
	        var unlockedClothes = [];
	        for (var i = 0; i <= Config.patientsCured; i++) {
	            if (i >= Config.levels.length)
	                continue;
	            var level = Config.levels[i];
	            unlockedClothes = unlockedClothes.concat(level.unlockedClothes);
	        }
	        Logger_1.Logger.log(this, "Config getUnlockedClothes unlockedClothes.length == " + unlockedClothes.length);
	        return unlockedClothes;
	    };
	    Config.getUnlockedBandages = function () {
	        var unlockedBandages = [];
	        for (var i = 0; i <= Config.patientsCured; i++) {
	            if (i >= Config.levels.length) {
	                continue;
	            }
	            var level = Config.levels[i];
	            unlockedBandages = unlockedBandages.concat(level.unlockedBandage);
	        }
	        Logger_1.Logger.log(this, "Config getUnlockedBandages unlockedBandages.length == " + unlockedBandages.length);
	        return unlockedBandages;
	    };
	    Config.getUnlockedLemonades = function () {
	        var unlockedLemonades = [];
	        for (var i = 0; i <= Config.patientsCured; i++) {
	            if (i >= Config.levels.length) {
	                continue;
	            }
	            var level = Config.levels[i];
	            unlockedLemonades = unlockedLemonades.concat(level.unlockedLemonade);
	        }
	        Logger_1.Logger.log(this, "Config getUnlockedLemonades unlockedLemonades.length == " + unlockedLemonades.length);
	        return unlockedLemonades;
	    };
	    Config.getUnlockedbandAids = function () {
	        var unlockedBandAids = [];
	        for (var i = 0; i <= Config.patientsCured; i++) {
	            if (i >= Config.levels.length) {
	                continue;
	            }
	            var level = Config.levels[i];
	            unlockedBandAids = unlockedBandAids.concat(level.unlockedBandAid);
	        }
	        Logger_1.Logger.log(this, "Config getUnlockedbandAids unlockedBandAids.length == " + unlockedBandAids.length);
	        return unlockedBandAids;
	    };
	    Config.updateCuredPatients = function () {
	        Logger_1.Logger.log(this, "Config updateCuredPatients Config.curedDiseases.length == " + Config.curedDiseases.length);
	        for (var i = 0; i < Config.curedDiseases.length; i++) {
	            if (Config.curedDiseases[i] == Config.currentPatient.disease) {
	                return;
	            }
	        }
	        Config.curedDiseases.push(Config.currentPatient.disease);
	        Logger_1.Logger.log(this, "Config updateCuredPatients AFTER push : Config.curedDiseases.length == " + Config.curedDiseases.length + " : Config.currentPatient.disease == " + Config.currentPatient.disease);
	    };
	    return Config;
	}());
	Config.SPEAK_VOLUME_LEVEL = 1;
	Config.EFFECTS_VOLUME_LEVEL = .7;
	Config.MUSIC_VOLUME_LEVEL = .2;
	Config.INTRO = "intro";
	Config.IDLE = "idle";
	Config.EXAMINING = "examining";
	Config.POST_TREATMENT = "postTreatment";
	Config.BETWEEN_TREATMENTS = "betweenTreatments";
	Config.patientsCured = 0;
	Config.patientSlot_1_y = 215;
	Config.patientSlot_2_y = 205;
	Config.patientSlot_3_y = 220;
	Config.curedDiseases = [];
	exports.Config = Config;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var AssetLoader = (function (_super) {
	    __extends(AssetLoader, _super);
	    function AssetLoader() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AssetLoader.getInstance = function () {
	        if (AssetLoader._instance == null) {
	            AssetLoader._instance = new AssetLoader();
	        }
	        return AssetLoader._instance;
	    };
	    Object.defineProperty(AssetLoader, "instantiated", {
	        get: function () {
	            return Boolean(AssetLoader._instance);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AssetLoader.destroySingleton = function () {
	        if (AssetLoader.instantiated) {
	            AssetLoader._instance.destroy();
	        }
	    };
	    AssetLoader.prototype.init = function () {
	        this.ratioX = 0;
	        this.ratioY = 0;
	        this.assetCanvas = new pixi_js_1.Graphics();
	        this.assetCanvas.interactive = true;
	        this.assetCanvas.beginFill(0xFFFFFF);
	        this.assetCanvas.alpha = 0.05;
	        this.assetCanvas.drawRect(0, 0, AssetLoader.STAGE_WIDTH, AssetLoader.STAGE_HEIGHT);
	    };
	    return AssetLoader;
	}(pixi_js_1.Sprite));
	AssetLoader.QUEUE_COMPLETE = "complete";
	AssetLoader.QUEUE_FILE_LOAD = "fileload";
	AssetLoader.QUEUE_PROGRESS = "progress";
	AssetLoader.QUEUE_ERROR = "error";
	AssetLoader.ASSET_LOADED = "asset_loaded";
	AssetLoader.STAGE_WIDTH = 1364;
	AssetLoader.STAGE_HEIGHT = 768;
	AssetLoader.leftXOffsetVirtual = 0;
	AssetLoader.rightXOffsetVirtual = 1364;
	AssetLoader._instance = null;
	exports.AssetLoader = AssetLoader;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	module.exports = PIXI;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalEvent = (function (_super) {
	    __extends(HospitalEvent, _super);
	    function HospitalEvent(type) {
	        return _super.call(this, type) || this;
	    }
	    return HospitalEvent;
	}(Event));
	HospitalEvent.KILL_GAME = "killGame";
	HospitalEvent.QUIT_APP = "quitApp";
	HospitalEvent.MINIGAME_COMPLETED = "minigameCompleted";
	HospitalEvent.SHOOT_BACTERIA_GAME_COMPLETED = "shootBacteriaGameCompleted";
	HospitalEvent.CONTAMINANT_REMOVED = "contaminantRemoved";
	HospitalEvent.PATIENT_DROPPED = "patientDropped";
	HospitalEvent.PATIENT_SELECTED = "patientSelected";
	HospitalEvent.PATIENT_CURED = "patientCured";
	HospitalEvent.DISEASE_HOTSPOT_PRESSED = "diseaseHotSpotPressed";
	HospitalEvent.BACK_FROM_OPERATING_ROOM = "backFromOperatingRoom";
	HospitalEvent.BACK_FROM_MINIGAME = "backFromMiniGame";
	HospitalEvent.FRONTPAGE_EXITED = "frontpageExited";
	HospitalEvent.BANDAGE_PLACED = "bandagePlaced";
	exports.HospitalEvent = HospitalEvent;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var Main_1 = __webpack_require__(1);
	var AssetHelper_1 = __webpack_require__(11);
	var Helper_1 = __webpack_require__(14);
	var AudioPlayer = (function () {
	    function AudioPlayer() {
	        var _this = this;
	        this.changeMusicVolume = function (newVolume) {
	            var sound;
	            for (var _i = 0, _a = _this._music; _i < _a.length; _i++) {
	                var music = _a[_i];
	                sound = music;
	                sound.volume(newVolume);
	            }
	        };
	        if (AudioPlayer._instance) {
	            throw new Error("Error: Instantiation failed: Use AudioPlayer.getInstance() instead of new.");
	        }
	    }
	    AudioPlayer.getInstance = function () {
	        if (AudioPlayer._instance == null) {
	            AudioPlayer._instance = new AudioPlayer();
	            AudioPlayer._instance.init();
	        }
	        return AudioPlayer._instance;
	    };
	    Object.defineProperty(AudioPlayer, "instantiated", {
	        get: function () {
	            return Boolean(AudioPlayer._instance);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AudioPlayer.prototype.init = function () {
	        this._soundNames = [];
	        this._musicNames = [];
	        this._sounds = [];
	        this._music = [];
	    };
	    AudioPlayer.prototype.playMusic = function (soundName, loops, volume, fadeTime, starttime) {
	        if (loops === void 0) { loops = 0; }
	        if (volume === void 0) { volume = this.volume; }
	        if (fadeTime === void 0) { fadeTime = 0; }
	        if (starttime === void 0) { starttime = 0; }
	        var sound;
	        var soundPath = AssetHelper_1.AssetHelper.SOUNDS[soundName];
	        sound = new Howl({
	            src: this.clearAndSetMimeTypes(Main_1.Main.ASSETS[soundPath], "mp3"),
	            volume: volume,
	            loop: loops && loops > 0,
	        });
	        sound.play();
	        this._musicNames.push(soundName);
	        this._music.push(sound);
	        return sound;
	    };
	    AudioPlayer.prototype.playSound = function (soundName, loops, volume, fadeTime, starttime) {
	        if (loops === void 0) { loops = 0; }
	        if (volume === void 0) { volume = this.volume; }
	        if (fadeTime === void 0) { fadeTime = 0; }
	        if (starttime === void 0) { starttime = 0; }
	        var sound;
	        var soundPath = AssetHelper_1.AssetHelper.SOUNDS[soundName];
	        sound = new Howl({
	            src: this.clearAndSetMimeTypes(Main_1.Main.ASSETS[soundPath], "mp3"),
	            volume: volume,
	            loop: loops && loops > 0,
	        });
	        sound.play();
	        this._soundNames.push(soundName);
	        this._sounds.push(sound);
	        return sound;
	    };
	    AudioPlayer.prototype.NumberWrapper = function (value) {
	        return value;
	    };
	    AudioPlayer.prototype.playRandomSound = function (sounds) {
	        var sound;
	        var soundIndex = Helper_1.Helper.randomRange(0, sounds.length - 1, true);
	        sound = this.playSound(sounds[soundIndex]);
	        return sound;
	    };
	    AudioPlayer.prototype.fadeAllTo = function (volume, time) {
	        Logger_1.Logger.log(this, "fadeAllTo");
	    };
	    AudioPlayer.prototype.tweenVolume = function (soundId, toVolume, fadeTime) {
	        if (toVolume === void 0) { toVolume = 0; }
	        if (fadeTime === void 0) { fadeTime = 1000; }
	        var sound = this.getSoundByName(soundId);
	        sound.fade(sound.volume(), toVolume, fadeTime);
	    };
	    AudioPlayer.prototype.crossFade = function (fadeOutId, fadeInId, tweenDuration, fadeInVolume, fadeInRepetitions) {
	        if (tweenDuration === void 0) { tweenDuration = 2000; }
	        if (fadeInVolume === void 0) { fadeInVolume = 1; }
	        if (fadeInRepetitions === void 0) { fadeInRepetitions = 1; }
	        Logger_1.Logger.log(this, "AudioPlayer.crossFade()");
	        this.tweenVolume(fadeOutId, 0, tweenDuration);
	        this.playSound(fadeInId, 999, 0);
	        this.tweenVolume(fadeInId, fadeInVolume, tweenDuration);
	    };
	    AudioPlayer.prototype.stopSound = function (soundName) {
	        var sound = this.getSoundByName(soundName);
	        if (sound != null) {
	            sound.stop();
	        }
	    };
	    AudioPlayer.prototype.stopAllSounds = function (stopMusic) {
	        if (stopMusic === void 0) { stopMusic = false; }
	        var sound;
	        for (var _i = 0, _a = this._sounds; _i < _a.length; _i++) {
	            var soundToStop = _a[_i];
	            sound = soundToStop;
	            sound.stop();
	        }
	        if (stopMusic) {
	            var music;
	            for (var _b = 0, _c = this._music; _b < _c.length; _b++) {
	                var musicToStop = _c[_b];
	                music = musicToStop;
	                music.stop();
	            }
	        }
	    };
	    AudioPlayer.prototype.getSoundByName = function (name) {
	        var sound = this._sounds[this._soundNames.lastIndexOf(name)];
	        return sound;
	    };
	    AudioPlayer.prototype.removeSoundByName = function (name) {
	        var index = this._soundNames.lastIndexOf(name);
	        if (index > -1) {
	            this._soundNames.splice(index, 1);
	            this._sounds.splice(index, 1);
	        }
	    };
	    AudioPlayer.prototype.removeMusicByName = function (name) {
	        var index = this._musicNames.lastIndexOf(name);
	        if (index > -1) {
	            this._musicNames.splice(index, 1);
	            this._music.splice(index, 1);
	        }
	    };
	    Object.defineProperty(AudioPlayer.prototype, "volume", {
	        get: function () {
	            return this._volume;
	        },
	        set: function (pVolume) {
	            this._volume = pVolume;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AudioPlayer.prototype.onSoundComplete = function (e, type) {
	        if (type) {
	            this.removeMusicByName(e);
	        }
	        else {
	            this.removeSoundByName(e);
	        }
	    };
	    AudioPlayer.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "AudioPlayer destroy");
	        try {
	            this.stopAllSounds();
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "ERROR AudioPlayer stopAllSounds");
	        }
	        try {
	            createjs.Sound.removeAllSounds();
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "ERROR AudioPlayer createjs.Sound.removeAllSounds();");
	        }
	        AudioPlayer._instance = null;
	    };
	    AudioPlayer.prototype.clearAndSetMimeTypes = function (obj, extension) {
	        var replacedText = "data:;base64,";
	        var convertedText;
	        switch (extension) {
	            case "ogg":
	                convertedText = obj.replace(replacedText, "data:audio/ogg;base64,");
	                break;
	            case "m4a":
	                convertedText = obj.replace(replacedText, "data:audio/m4a;base64,");
	                break;
	            default:
	                convertedText = obj.replace(replacedText, "data:audio/mp3;base64,");
	                break;
	        }
	        return convertedText;
	    };
	    return AudioPlayer;
	}());
	AudioPlayer.EVENT_SOUND_STARTED = "EVENT_SOUND_STARTED";
	AudioPlayer.EVENT_SOUND_FINISHED = "EVENT_SOUND_FINISHED";
	AudioPlayer.SOUND_COMPLETE = "end";
	AudioPlayer.SOUND_ERROR = "error";
	AudioPlayer.AUDIO_COMPLETE = "end";
	AudioPlayer.SOUND_GENERIC_BUTTON_PRESS = "GenericButtonPress";
	AudioPlayer.SOUND_SINGLE_PAGE_TURN = "SinglePageTurnSound";
	AudioPlayer.SOUND_MULTI_PAGE_TURN = "MultiPageTurnSound";
	AudioPlayer.SOUND_VO_HOME = "VOHomeSound";
	AudioPlayer.SOUND_VO_READ_AGAIN = "VOReadAgainSound";
	AudioPlayer.SOUND_VO_PREVIOUS_PAGE = "VOPreviousPage";
	AudioPlayer.SOUND_VO_NEXT_PAGE = "VONextPage";
	AudioPlayer.SOUND_POPUP_ANIMATION_AUDIO = "popup_animation_audio";
	AudioPlayer.SOUND_INTRO_MUSIC = "introMusic";
	AudioPlayer.NAV_BAR_BUTTON_SOUND = "NavBarButtonSound";
	AudioPlayer.STORY_BUTTON_READ_AND_PLAY = "button_readAndPlay";
	AudioPlayer.STORY_BUTTON_READ_IT_MYSELF = "button_readItMyself";
	AudioPlayer.STORY_BUTTON_READ_TO_ME = "button_readToMe";
	AudioPlayer.STORY_BUTTON_SING_TO_ME = "button_singToMe";
	AudioPlayer.STORY_BUTTON_SING_WITH_ME = "button_singWithMe";
	AudioPlayer.END_SCREEN_THE = "end_screen_the";
	AudioPlayer.END_SCREEN_END = "end_screen_end";
	AudioPlayer.END_SCREEN_THE_END = "end_screen_the_end";
	exports.AudioPlayer = AudioPlayer;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ProgressBar_1 = __webpack_require__(12);
	var Main_1 = __webpack_require__(1);
	var Logger_1 = __webpack_require__(3);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalGameView_1 = __webpack_require__(13);
	var AssetHelper = (function (_super) {
	    __extends(AssetHelper, _super);
	    function AssetHelper() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AssetHelper.prototype.parseSpriteSheets = function (_assets, callback) {
	        this.progressBar = new ProgressBar_1.ProgressBar(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5, ProgressBar_1.ProgressBar.PROGRESS_BAR_HEIGHT);
	        this.addChild(this.progressBar);
	        Logger_1.Logger.log(this, "loadAssets this.progressBar == " + this.progressBar);
	        console.log("AssetLoader.loadSpriteSheets() - assets: " + _assets);
	        this.assets = _assets;
	        this.callback = callback;
	        this.spriteSheetParsedCounter = 0;
	        this.parseSpriteSheet("media/hospital/assets/textures/1x/ramasjangHospitalet_spriteAtlas_1");
	        this.parseSpriteSheet("media/hospital/assets/textures/1x/ramasjangHospitalet_spriteAtlas_2");
	        this.parseSpriteSheet("media/hospital/assets/textures/1x/ramasjangHospitalet_spriteAtlas_3");
	        this.parseSpriteSheet("media/hospital/assets/textures/1x/ramasjangHospitalet_spriteAtlas_4");
	        this.parseSpriteSheet("media/hospital/assets/textures/1x/ramasjangHospitalet_spriteAtlas_5");
	        var sprite1 = PIXI.Texture.fromImage(Main_1.Main.ASSETS["media/hospital/assets/textures/1x/forgiftning_tarm.png"]);
	        var sprite2 = PIXI.Texture.fromImage(Main_1.Main.ASSETS["media/hospital/assets/textures/1x/lungebetaendelse_lunger.png"]);
	        var sprite3 = PIXI.Texture.fromImage(Main_1.Main.ASSETS["media/hospital/assets/textures/1x/BackArrow.png"]);
	        PIXI.Texture.addTextureToCache(sprite1, "forgiftning_tarm");
	        PIXI.Texture.addTextureToCache(sprite1, "lungebetaendelse_lunger");
	        PIXI.Texture.addTextureToCache(sprite1, "BackArrow");
	    };
	    AssetHelper.prototype.parseSpriteSheet = function (spriteSheetName) {
	        var _this = this;
	        console.log("AssetLoader.parseSpriteSheet() - spriteSheetName: " + spriteSheetName);
	        try {
	            var atlasData = JSON.parse(this.assets[spriteSheetName + ".json"]);
	        }
	        catch (e) {
	            console.log(e);
	        }
	        var image = new Image();
	        image.onload = function () {
	            console.log("Image loaded");
	            var baseTexture = new PIXI.BaseTexture(image);
	            for (var nextFrame in atlasData.frames) {
	                var spriteTexture1 = new PIXI.Texture(baseTexture, new PIXI.Rectangle(atlasData.frames[nextFrame].frame.x, atlasData.frames[nextFrame].frame.y, atlasData.frames[nextFrame].frame.w, atlasData.frames[nextFrame].frame.h), new PIXI.Rectangle(atlasData.frames[nextFrame].spriteSourceSize.x, atlasData.frames[nextFrame].spriteSourceSize.y, atlasData.frames[nextFrame].spriteSourceSize.w, atlasData.frames[nextFrame].spriteSourceSize.h), new PIXI.Rectangle(0, 0, atlasData.frames[nextFrame].sourceSize.w, atlasData.frames[nextFrame].sourceSize.h));
	                PIXI.Texture.addTextureToCache(spriteTexture1, nextFrame);
	            }
	            _this.spriteSheetParsedCounter++;
	            if (_this.spriteSheetParsedCounter > 4) {
	                _this.callback();
	            }
	        };
	        image.src = this.assets[spriteSheetName + ".png"];
	    };
	    AssetHelper.prototype.mapSounds = function () {
	        AssetHelper.SOUNDS = {};
	        this.mapSound({ path: "media/hospital/assets/audio/music/intro_music/intro_02.mp3", id: "intro" });
	        this.mapSound({ path: "media/hospital/assets/audio/music/waiting_room_music/fastguitar_loop_04.mp3", id: "waiting_room_loop" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/lung_breath/lung_breath_sfx_loop_v02.mp3", id: "lung_breath_sfx_loop" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/done_v08.mp3", id: "done" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/done_patient_v01.mp3", id: "done_patient" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/negative_v05.mp3", id: "negative" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/positive_v03.mp3", id: "positive" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/klapsalve_03.mp3", id: "klapsalve" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/die_bacteria/lung_die_v01.mp3", id: "lung_die" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/hit_bacteria/lung_hit_v01.mp3", id: "lung_hit" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/pinicillin/lung_pincillin_v01.mp3", id: "lung_pincillin" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/split_bacteria/lung_split_v01.mp3", id: "lung_split" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/lung_cough/lung_cough_v01.mp3", id: "lung_cough_v01" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/lung_cough/lung_cough_v02.mp3", id: "lung_cough_v02" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/lung_sfx/lung_cough/lung_cough_v03.mp3", id: "lung_cough_v03" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/1_bruise_sfx/pincet_v04.mp3", id: "pincet_v04" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/knogle_v04.mp3", id: "knogle" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/salve_loop_v01.mp3", id: "salve_loop" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/gips_v02.mp3", id: "gips" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/four_scanner_noise_sounds/scanner_loop_v13.mp3", id: "scanner_loop" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/four_scanner_noise_sounds/scanner_noise_v05.mp3", id: "scanner_noise" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/poison_v02.mp3", id: "poison" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/pop_v02.mp3", id: "pop" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/drink_water_v03.mp3", id: "drink_water" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/toj_swipe_swoosh.mp3", id: "toj_swipe_swoosh" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/train_flute_01.mp3", id: "train_flute" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/picture_v01.mp3", id: "picture" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/clik_on_v01.mp3", id: "clik_on" });
	        this.mapSound({ path: "media/hospital/assets/audio/sfx/general_sfx/clik_off_v01.mp3", id: "clik_off" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/velkomst/mille_hej_og_velkommen_til_ramasjang_hospitalet_tryk_pa_start.mp3", id: "mille_hej_og_velkommen" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_det_rumler_i_min_mave_mon_det_er_noget_jeg_har_spist.mp3", id: "barn_det_rumler_i_min_mave_mon_det_er_noget_jeg_har_spist" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_jeg_er_blevet_stukket_af_en_bi_kan_du_hjaelpe_mig.mp3", id: "barn_jeg_er_blevet_stukket_af_en_bi_kan_du_hjaelpe_mig" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_jeg_har_braendt_mig_pa_en_gryde.mp3", id: "barn_jeg_har_braendt_mig_pa_en_gryde_skal_vi_komme_is_pa" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_jeg_har_slaet_min_hand.mp3", id: "barn_jeg_har_slaet_min_hand" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_jeg_hoster_rigtig_meget_mon_jeg_er_forkolet.mp3", id: "barn_jeg_hoster_rigtig_meget_mon_jeg_er_forkolet" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_min_arm_er_forstuvet_kan_du_reparere_den.mp3", id: "barn_min_arm_er_forstuvet_kan_du_reparere_den" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_min_arm_er_vist_braekket_fordi_jeg_vaeltede_pa_min_cykel.mp3", id: "barn_min_arm_er_vist_braekket_fordi_jeg_vaeltede_pa_min_cykel" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_jubii.mp3", id: "barn_jubii" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/tryk_paa_patient/barn_arh_nej_hvornar_er_det_min_tur.mp3", id: "barn_arh_nej_hvornar_er_det_min_tur" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/nyt_toej/barn_jubii_01.mp3", id: "barn_nyt_toj_1" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/nyt_toej/barn_wow_02.mp3", id: "barn_nyt_toj_2" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/barn/nyt_toej/barn_wow_04.mp3", id: "barn_nyt_toj_3" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/00_hjaelpe_speak_ventevaerelset/mille_der_er_nogle_born_der_er_blevet_syge.mp3", id: "mille_der_er_nogle_born_der_er_blevet_syge" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/00_hjaelpe_speak_ventevaerelset/mille_kan_du_hjaelpe_en_af_bornene_ind_gennem_den_bla_dor.mp3", id: "mille_kan_du_hjaelpe_en_af_bornene_ind_gennem_den_bla_dor" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/00_hjaelpe_speak_ventevaerelset/mille_er_du_klar_til_at_hjaelpe_en_til.mp3", id: "mille_er_du_klar_til_at_hjaelpe_en_til" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/paaklaedning/mille_hvad_mon_der_er_i_kufferten.mp3", id: "mille_kufferten_1" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/paaklaedning/mille_sikke_en_fin_kuffert_er_den_last.mp3", id: "mille_kufferten_2" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/paaklaedning/mille_orh_sikke_noget_flot_toj.mp3", id: "mille_orh_sikke_noget_flot_toj" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/ventevaelse/mille/paaklaedning/mille_prov_at_give_bonene_noget_nyt_toj_pa.mp3", id: "mille_prov_at_give_bonene_noget_nyt_toj_pa" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_av_for_en_hundestejle.mp3", id: "mille_av_for_en_hundestejle" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_det_er_altsa_mega_uheldigt.mp3", id: "mille_det_er_altsa_mega_uheldigt" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_host_host_vi_kan_alle_blive_syge.mp3", id: "mille_host_host_vi_kan_alle_blive_syge" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_na_da_her_er_en_der_har_brandt_sig.mp3", id: "mille_na_da_her_er_en_der_har_brandt_sig" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_nu_skal_du_bahandle_en_brakket_hand.mp3", id: "mille_nu_skal_du_bahandle_en_brakket_hand" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_prov_lige_at_leg_ninja.mp3", id: "mille_prov_lige_at_leg_ninja" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/forklaring_paa_sygdom/mille_puha_nogen_der_har_slaet_en_fis.mp3", id: "mille_puha_nogen_der_har_slaet_en_fis" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_kan_du_se_maskinen_der_blinker.mp3", id: "mille_kan_du_se_maskinen_der_blinker" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_prov_om_du_kan_hive_bistikkene_ud_med_pincetten.mp3", id: "mille_prov_om_du_kan_hive_bistikkene_ud_med_pincetten" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_pincetten_skal_have_fat_om_bistikket.mp3", id: "mille_pincetten_skal_have_fat_om_bistikket" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_godt_klaret_kan_du_fjerne_en_mere.mp3", id: "mille_godt_klaret_kan_du_fjerne_en_mere" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_perfekt_alle_bistikkene_er_vaek.mp3", id: "mille_perfekt_alle_bistikkene_er_vaek" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_uhh_hvot_sar_bare_klor_helt_vildt_meget_skynd_dig_at_smore_creme_pa.mp3", id: "mille_uhh_hvot_sar_bare_klor_helt_vildt_meget_skynd_dig_at_smore_creme_pa" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_perfekt_alle_bakterierne_er_vaek.mp3", id: "mille_perfekt_alle_bakterierne_er_vaek" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_pincetten_skal_have_fat_om_bakterien.mp3", id: "mille_pincetten_skal_have_fat_om_bakterien" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_prov_at_traekke_bakterierne_ud_med_pincetten.mp3", id: "mille_prov_at_traekke_bakterierne_ud_med_pincetten" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_flyt_glasset_hen_til_munden.mp3", id: "mille_flyt_glasset_hen_til_munden" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_brug_det_sorte_stykke_kul_til_at_samle_alle_de_gronne_bakterier.mp3", id: "mille_brug_det_sorte_stykke_kul_til_at_samle_alle_de_gronne_bakterier" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_hey_kan_du_ikke_lige_hjaelpe_med_at_samle_den_knogle_der_er_braekket.mp3", id: "mille_hey_kan_du_ikke_lige_hjaelpe_med_at_samle_den_knogle_der_er_braekket" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_knoglen_i_armen_er_braekket_prov_om_du_kan_samle_den_igen.mp3", id: "mille_knoglen_i_armen_er_braekket_prov_om_du_kan_samle_den_igen" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_knoglerne_er_helt_rodet_rundt.mp3", id: "mille_knoglerne_er_helt_rodet_rundt" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_tag_kluden_og_vask_rent_for_snavs.mp3", id: "mille_tag_kluden_og_vask_rent_for_snavs" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_hov_der_er_vist_lidt_snavs_tilbage.mp3", id: "mille_hov_der_er_vist_lidt_snavs_tilbage" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_tag_den_nederste_brik_prov_om_du_kan.mp3", id: "mille_tag_den_nederste_brik_prov_om_du_kan" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_tryk_pa_skalen.mp3", id: "mille_tryk_pa_skalen" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_sadan_det_var_du_rigtig_god_til.mp3", id: "mille_sadan_det_var_du_rigtig_god_til" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_super_flot.mp3", id: "mille_super_flot" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_wow_du_er_god.mp3", id: "mille_wow_du_er_god" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_mega_sejt.mp3", id: "mille_mega_sejt" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/hjaelp/mille_yey_det_er_flot.mp3", id: "mille_yey_det_er_flot" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_arh_hvor_er_du_bare_dygtig.mp3", id: "done_1" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_fantastisk_ej_hvor_er_du_bare_vildt_sej.mp3", id: "done_2" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_godt_klaret.mp3", id: "done_3" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_rigtig_flot.mp3", id: "done_4" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/mille_skynd_dig_ud_i_ventevaerelset_der_er_helt_sikkert_flere_born.mp3", id: "mille_skynd_dig_ud_i_ventevaerelset_der_er_helt_sikkert_flere_born" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_aargh_et_skelet.mp3", id: "mille_aargh_et_skelet" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_sikke_et_muskel_bundt.mp3", id: "mille_sikke_et_muskel_bundt" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_vildt_er_det_tarmene.mp3", id: "mille_vildt_er_det_tarmene" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_wow_der_er_hjernen.mp3", id: "mille_wow_der_er_hjernen" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/scanner/mille_der_er_tis_inde_i_de_to_lange_ror.mp3", id: "mille_der_er_tis_inde_i_de_to_lange_ror" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/scanner/mille_noj_der_er_blodbaner_blodet_lober_frem.mp3", id: "mille_noj_der_er_blodbaner_blodet_lober_frem" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/new/scanner/mille_den_kan_du_ikke_se_endnu_gor_flere_born_raske.mp3", id: "mille_hov_den_er_last" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_sadan_du_er_super.mp3", id: "mille_sadan_du_er_super" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/mille/ekstra/mille_wow_godt_klaret.mp3", id: "mille_wow_godt_klaret" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_eyy_fik_du_nye_forbindinger_sadan_en_vil_jeg_ogsa_gerne_have_pa.mp3", id: "barn_unlock_bandage_1" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_sikke_en_flot_forbinding.mp3", id: "barn_unlock_bandage_2" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_sikke_noget_flot_gips_ma_jeg_prove.mp3", id: "barn_unlock_bandage_3" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_hov_var_det_saftevand_du_fik_ma_jeg_smage.mp3", id: "barn_unlock_saftevand" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_jubii_et_flot_plaster_ma_jeg_fa_det_pa.mp3", id: "barn_unlock_band_aid_1" });
	        this.mapSound({ path: "media/hospital/assets/audio/speak/behandlingsrum/barn/new/barn_jubii_fine_plastre_gir_du_mig_et_pa.mp3", id: "barn_unlock_band_aid_2" });
	        console.log(AssetHelper.SOUNDS);
	    };
	    AssetHelper.prototype.mapSound = function (soundObject) {
	        AssetHelper.SOUNDS[soundObject.id] = soundObject.path;
	    };
	    return AssetHelper;
	}(HospitalGameView_1.HospitalGameView));
	exports.AssetHelper = AssetHelper;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var AssetLoader_1 = __webpack_require__(7);
	var ProgressBar = (function (_super) {
	    __extends(ProgressBar, _super);
	    function ProgressBar(width, height) {
	        var _this = _super.call(this) || this;
	        _this.init(width, height);
	        return _this;
	    }
	    ProgressBar.prototype.init = function (width, height) {
	        if (width === void 0) { width = AssetLoader_1.AssetLoader.STAGE_WIDTH * .5; }
	        if (height === void 0) { height = ProgressBar.PROGRESS_BAR_HEIGHT; }
	        Logger_1.Logger.log(this, "ProgressBar.init(width, height)  width == " + width + " : height == " + height);
	        var scale = 1;
	        this.mBarBg = new pixi_js_1.Graphics();
	        this.mBarBg.beginFill(0x333333);
	        this.addChild(this.mBarBg);
	        this.mBarBg.drawRect(0, 0, width, height);
	        this.mBarBg.x = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.mBarBg.width * .5);
	        this.mBarBg.y = Math.floor(AssetLoader_1.AssetLoader.STAGE_HEIGHT * .5 - this.mBarBg.height * .5);
	        this.mBar = new pixi_js_1.Graphics();
	        this.mBar.beginFill(0xaaaaaa);
	        this.addChild(this.mBar);
	        this.mBar.drawRect(0, 0, width, height);
	        this.mBar.x = this.mBarBg.x;
	        this.mBar.y = this.mBarBg.y;
	        this.mBar.scale.x = 0;
	        Logger_1.Logger.log(this, "ProgressBar init this.mBar == " + this.mBar.x + " : " + this.mBar.y + " : " + this.mBar.width + " : " + this.mBar.height);
	    };
	    Object.defineProperty(ProgressBar.prototype, "ratio", {
	        get: function () {
	            return this.progressAmount;
	        },
	        set: function (value) {
	            this.progressAmount = value;
	            if (this.mBar != null) {
	                this.mBar.scale.x = Math.max(0.0, Math.min(1.0, value));
	                this.mBar.x = this.mBarBg.x;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProgressBar.prototype.destroy = function () {
	        if (this.mBar != null) {
	            this.removeChild(this.mBar);
	        }
	        if (this.mBarBg != null) {
	            this.removeChild(this.mBarBg);
	        }
	    };
	    return ProgressBar;
	}(pixi_js_1.Sprite));
	ProgressBar.PROGRESS_BAR_HEIGHT = 20;
	exports.ProgressBar = ProgressBar;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var Config_1 = __webpack_require__(6);
	var HospitalGameView = (function (_super) {
	    __extends(HospitalGameView, _super);
	    function HospitalGameView() {
	        return _super.call(this) || this;
	    }
	    Object.defineProperty(HospitalGameView.prototype, "name", {
	        get: function () {
	            return this._name;
	        },
	        set: function (_name) {
	            this._name = _name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HospitalGameView.prototype.show = function () {
	        this.visible = true;
	    };
	    HospitalGameView.prototype.hide = function () {
	        this.visible = false;
	    };
	    HospitalGameView.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "HospitalGameView destroy  this.children.length == " + this.children.length);
	        clearTimeout(Config_1.Config.currentTimeout);
	        this.removeChildren();
	    };
	    HospitalGameView.prototype.init = function () { };
	    return HospitalGameView;
	}(pixi_js_1.Sprite));
	HospitalGameView.RECT_COVER_ALPHA = 0.01;
	exports.HospitalGameView = HospitalGameView;


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Helper = (function () {
	    function Helper() {
	    }
	    Helper.lineDistance = function (point1, point2) {
	        var xs = 0;
	        var ys = 0;
	        xs = point2.x - point1.x;
	        xs = xs * xs;
	        ys = point2.y - point1.y;
	        ys = ys * ys;
	        return Math.sqrt(xs + ys);
	    };
	    Helper.randomRange = function (__min, __max, __rounded) {
	        if (__rounded === void 0) { __rounded = false; }
	        var n = __min + (Math.random() * (__max - __min));
	        return __rounded ? Math.round(n) : n;
	    };
	    return Helper;
	}());
	exports.Helper = Helper;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var PortaitOfMille_1 = __webpack_require__(16);
	var ConfettiMaker_1 = __webpack_require__(18);
	var TrophyDisplay_1 = __webpack_require__(20);
	var UnlockedScreen_1 = __webpack_require__(23);
	var ItemsSelector_1 = __webpack_require__(24);
	var Patient_1 = __webpack_require__(47);
	var PatientSlot_1 = __webpack_require__(50);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var Door_1 = __webpack_require__(51);
	var Config_1 = __webpack_require__(6);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalEvent_1 = __webpack_require__(9);
	var ButtonEvent_1 = __webpack_require__(17);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var ClothesItem_1 = __webpack_require__(30);
	var AudioPlayer_1 = __webpack_require__(10);
	var WaitingRoomView = (function (_super) {
	    __extends(WaitingRoomView, _super);
	    function WaitingRoomView() {
	        var _this = _super.call(this) || this;
	        _this.startHelpSpeak = function () {
	            if (Config_1.Config.gameState == Config_1.Config.IDLE) {
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_der_er_nogle_born_der_er_blevet_syge";
	                _this.sndHelpSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndHelpSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioHelpSpeakComplete);
	            }
	        };
	        _this.audioHelpSpeakComplete = function (event) {
	            _this.sndHelpSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioHelpSpeakComplete);
	        };
	        _this.onHelpAnimationCompleted = function () {
	            if (_this.door != null) {
	                _this.door.showClosed();
	            }
	            if (_this.killTouchesLayer != null) {
	                _this.killTouchesLayer.visible = false;
	                _this.killTouchesLayer.off(ButtonEvent_1.ButtonEvent.CLICKED, _this.killPressed);
	            }
	            if (_this.clothesSelector != null) {
	                _this.clothesSelector.highlight();
	            }
	        };
	        _this.helpSpeakTimerComplete = function (event) {
	            if (Config_1.Config.gameState == Config_1.Config.IDLE) {
	                if (_this.helpSpeakCounter == 2) {
	                    _this.showHelpAnimation();
	                }
	            }
	            else if (Config_1.Config.gameState == Config_1.Config.POST_TREATMENT) {
	            }
	            _this.helpSpeakCounter++;
	        };
	        _this.killPressed = function (event) {
	            Logger_1.Logger.log(_this, "WaitingRoomView killPressed");
	        };
	        _this.trainTouchListener = function (event) {
	            if (_this.soundTrain != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound("train_flute");
	            }
	            _this.soundTrain = AudioPlayer_1.AudioPlayer.getInstance().playSound("train_flute", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	            _this.soundTrain.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.soundTrainComplete);
	        };
	        _this.soundTrainComplete = function (event) {
	            _this.soundTrain.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.soundTrainComplete);
	            _this.soundTrain = null;
	        };
	        _this.audioBagSpeakComplete = function (event) {
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_prov_at_give_bonene_noget_nyt_toj_pa";
	                this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }, 1000);
	        };
	        _this.startKonfetti = function () {
	            _this.konfettiMaker = new ConfettiMaker_1.ConfettiMaker();
	            _this.addChild(_this.konfettiMaker);
	            _this.stopKonfetti();
	        };
	        _this.onPatientDropped = function (event) {
	            var args = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                args[_i - 1] = arguments[_i];
	            }
	            Config_1.Config.currentPatient = args[0];
	            _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_SELECTED);
	        };
	        return _this;
	    }
	    WaitingRoomView.prototype.init = function () {
	        this.name = "WaitingRoomView";
	        this.helpSpeakCounter = 2;
	        this.helpSpeakTimer = setTimeout(this.helpSpeakTimerComplete, 5000);
	        Config_1.Config.currentTimeout = setTimeout(this.startHelpSpeak, 1000);
	        this.onAddedToStage();
	    };
	    WaitingRoomView.prototype.onAddedToStage = function () {
	        this.drawScene();
	        if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	    };
	    WaitingRoomView.prototype.showHelpAnimation = function () {
	        var _this = this;
	        Logger_1.Logger.log(this, "WaitingRoomView showHelpAnimation");
	        if (this.helpingHand != null) {
	            this.helpingHand.x = this.patientSlot_2.x + 100;
	            this.helpingHand.y = this.patientSlot_2.y + 200;
	        }
	        if (this.helpingHand != null) {
	            this.helpingOutline.x = this.patientSlot_2.x;
	            this.helpingOutline.y = this.patientSlot_2.y;
	        }
	        TweenLite.to(this.helpingHand, 2, { x: "+=280", delay: 1, onComplete: function () {
	                if (_this.helpingHand != null) {
	                    _this.removeChild(_this.helpingHand);
	                }
	                if (_this.helpingHand != null) {
	                    _this.removeChild(_this.helpingOutline);
	                }
	                if (_this.door != null) {
	                    _this.door.showOpened();
	                }
	                Config_1.Config.currentTimeout = setTimeout(_this.onHelpAnimationCompleted, 2000);
	            } });
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            TweenLite.to(_this.helpingOutline, 2, { x: "+=280" });
	        }, 1000);
	    };
	    WaitingRoomView.prototype.checkIfAnyClothesWasAdded = function () {
	        var toReturn;
	        if (this.patient_1 && this.patient_1.clothesAdded) {
	            toReturn = true;
	        }
	        if (this.patient_2 && this.patient_2.clothesAdded) {
	            toReturn = true;
	        }
	        if (this.patient_3 && this.patient_3.clothesAdded) {
	            toReturn = true;
	        }
	        return toReturn;
	    };
	    WaitingRoomView.prototype.drawScene = function () {
	        var _this = this;
	        Config_1.Config.patientSlot_1_x = Config_1.Config.safeFrame.x;
	        Config_1.Config.patientSlot_2_x = Config_1.Config.safeFrame.x + 200;
	        Config_1.Config.patientSlot_3_x = Config_1.Config.safeFrame.x + Config_1.Config.safeFrame.width - 280;
	        this.background = pixi_js_1.Sprite.fromFrame("waitingRoom_background");
	        this.addChild(this.background);
	        this.door = new Door_1.Door();
	        this.addChild(this.door);
	        this.door.x = 684;
	        this.door.y = 95;
	        this.portraitOfMille = new PortaitOfMille_1.PortaitOfMille();
	        this.addChild(this.portraitOfMille);
	        this.portraitOfMille.x = 450;
	        this.portraitOfMille.y = 50;
	        this.patientSlot_1 = new PatientSlot_1.PatientSlot();
	        this.patientSlot_1.x = Config_1.Config.patientSlot_1_x;
	        this.patientSlot_1.y = Config_1.Config.patientSlot_1_y;
	        this.addChild(this.patientSlot_1);
	        this.patientSlot_2 = new PatientSlot_1.PatientSlot();
	        this.patientSlot_2.x = Config_1.Config.patientSlot_2_x;
	        this.patientSlot_2.y = Config_1.Config.patientSlot_2_y;
	        this.addChild(this.patientSlot_2);
	        this.patientSlot_3 = new PatientSlot_1.PatientSlot();
	        this.patientSlot_3.x = Config_1.Config.patientSlot_3_x;
	        this.patientSlot_3.y = Config_1.Config.patientSlot_3_y;
	        this.addChild(this.patientSlot_3);
	        this.patientTarget = new pixi_js_1.Sprite();
	        this.addChild(this.patientTarget);
	        if (Config_1.Config.patientWaitingInSlot_1) {
	            this.patient_1 = Patient_1.Patient.clone(Config_1.Config.patientWaitingInSlot_1);
	            this.patient_1.setClothes(this.patient_1.currentBottomClothesTexture, ClothesItem_1.ClothesItem.BOTTOM);
	            this.patient_1.setClothes(this.patient_1.currentTopClothesTexture, ClothesItem_1.ClothesItem.TOP);
	            this.patient_1.state = Patient_1.Patient.WAITING;
	            this.patient_1.on(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	            this.patientTarget.addChild(this.patient_1);
	            this.patient_1.target = this.door;
	            Config_1.Config.patientWaitingInSlot_1 = this.patient_1;
	            this.patient_1.scalePatient(Patient_1.Patient.SIZE_SMALL);
	            this.addPatient(this.patient_1, new pixi_js_1.Point(this.patientSlot_1.x, this.patientSlot_1.y));
	            this.patient_1.startIdleEyeMOvement();
	        }
	        else {
	            this.spawnNewPatient(this.patientSlot_1);
	        }
	        if (Config_1.Config.patientWaitingInSlot_2) {
	            this.patient_2 = Patient_1.Patient.clone(Config_1.Config.patientWaitingInSlot_2);
	            this.patient_2.setClothes(this.patient_2.currentBottomClothesTexture, ClothesItem_1.ClothesItem.BOTTOM);
	            this.patient_2.setClothes(this.patient_2.currentTopClothesTexture, ClothesItem_1.ClothesItem.TOP);
	            this.patient_2.state = Patient_1.Patient.WAITING;
	            this.patient_2.on(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	            this.patientTarget.addChild(this.patient_2);
	            this.patient_2.target = this.door;
	            Config_1.Config.patientWaitingInSlot_2 = this.patient_2;
	            this.patient_2.scalePatient(Patient_1.Patient.SIZE_SMALL);
	            this.addPatient(this.patient_2, new pixi_js_1.Point(this.patientSlot_2.x, this.patientSlot_2.y));
	            this.patient_2.startIdleEyeMOvement();
	        }
	        else {
	            this.spawnNewPatient(this.patientSlot_2);
	        }
	        if (Config_1.Config.patientWaitingInSlot_3) {
	            this.patient_3 = Patient_1.Patient.clone(Config_1.Config.patientWaitingInSlot_3);
	            this.patient_3.setClothes(this.patient_3.currentBottomClothesTexture, ClothesItem_1.ClothesItem.BOTTOM);
	            this.patient_3.setClothes(this.patient_3.currentTopClothesTexture, ClothesItem_1.ClothesItem.TOP);
	            this.patient_3.state = Patient_1.Patient.WAITING;
	            this.patient_3.on(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	            this.patientTarget.addChild(this.patient_3);
	            this.patient_3.target = this.door;
	            Config_1.Config.patientWaitingInSlot_3 = this.patient_3;
	            this.patient_3.scalePatient(Patient_1.Patient.SIZE_SMALL);
	            this.addPatient(this.patient_3, new pixi_js_1.Point(this.patientSlot_3.x, this.patientSlot_3.y));
	            this.patient_3.startIdleEyeMOvement();
	        }
	        else {
	            this.spawnNewPatient(this.patientSlot_3);
	        }
	        this.foreground = pixi_js_1.Sprite.fromFrame("waitingRoom_forground");
	        this.addChild(this.foreground);
	        this.foreground.scale.x = this.foreground.scale.y = 2;
	        this.foreground.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT - this.foreground.height;
	        var frames = [];
	        for (var i = 0; i < 20; i++) {
	            var val = i < 10 ? '0' + i : i;
	            var frame = 'waitingRoom_train_ani_00' + val;
	            var texture = pixi_js_1.Texture.fromFrame(frame);
	            frames.push(texture);
	        }
	        this.toyTrain = new pixi_js_1.extras.AnimatedSprite(frames);
	        this.toyTrain.interactive = true;
	        this.addChild(this.toyTrain);
	        this.toyTrain.scale.x = this.toyTrain.scale.y = 2;
	        this.toyTrain.x = 155;
	        this.toyTrain.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT - this.toyTrain.height;
	        this.toyTrain.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.trainTouchListener);
	        this.toyTrain.animationSpeed = 0.2;
	        this.toyTrain.play();
	        this.helpingHand = pixi_js_1.Sprite.fromFrame("operationRoom_scannerHotspot");
	        this.helpingOutline = pixi_js_1.Sprite.fromFrame("kid_outline");
	        this.addChild(this.helpingHand);
	        this.helpingHand.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT;
	        this.addChild(this.helpingOutline);
	        this.helpingOutline.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT;
	        if (Config_1.Config.gameState == Config_1.Config.POST_TREATMENT && this.checkIfCurrentLevelHasUnlocks()) {
	            this.showUnlockedScreen();
	        }
	        else if (Config_1.Config.getUnlockedClothes().length > 0) {
	            this.clothesSelector = new ItemsSelector_1.ItemsSelector(ItemsSelector_1.ItemsSelector.CLOTHES);
	            this.clothesSelector.x = 0 - Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2));
	            this.clothesSelector.y = 0 - Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioY / 2));
	            this.addChild(this.clothesSelector);
	            this.clothesSelector.on(ItemsSelector_1.ItemsSelector.OPENED, function (event) {
	                _this.trophyDisplay.visible = false;
	                _this.trophyDisplay.close();
	            });
	            this.clothesSelector.on(ItemsSelector_1.ItemsSelector.HAS_CLOSED, function (event) {
	                _this.trophyDisplay.visible = true;
	            });
	        }
	        this.trophyDisplay = new TrophyDisplay_1.TrophyDisplay();
	        this.addChild(this.trophyDisplay);
	        this.trophyDisplay.x = 100 + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2));
	        ;
	        this.trophyDisplay.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT - 200 + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioY / 2));
	        ;
	        this.trophyDisplay.on(TrophyDisplay_1.TrophyDisplay.OPENED, function (event) {
	            if (_this.clothesSelector) {
	                _this.clothesSelector.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	            }
	        });
	        if (Config_1.Config.gameState == Config_1.Config.IDLE) {
	            this.killTouchesLayer = new pixi_js_1.Graphics();
	            this.killTouchesLayer.interactive = true;
	            this.killTouchesLayer.beginFill(0x000000);
	            this.killTouchesLayer.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	            this.killTouchesLayer.alpha = 0.01;
	            this.addChild(this.killTouchesLayer);
	            this.killTouchesLayer.on(ButtonEvent_1.ButtonEvent.CLICKED, this.killPressed);
	        }
	    };
	    WaitingRoomView.prototype.checkIfCurrentLevelHasUnlocks = function () {
	        var index = Config_1.Config.patientsCured < Config_1.Config.levels.length ? Config_1.Config.patientsCured : Config_1.Config.levels.length - 1;
	        if (Config_1.Config.levels[index].unlockedTools.length > 0) {
	            return true;
	        }
	        if (Config_1.Config.levels[index].unlockedClothes.length > 0) {
	            return true;
	        }
	        if (Config_1.Config.levels[index].unlockedBandage.length > 0) {
	            return true;
	        }
	        if (Config_1.Config.levels[index].unlockedBandAid.length > 0) {
	            return true;
	        }
	        if (Config_1.Config.levels[index].unlockedLemonade.length > 0) {
	            return true;
	        }
	        return false;
	    };
	    WaitingRoomView.prototype.showUnlockedScreen = function () {
	        var _this = this;
	        this.clothesSelector = new ItemsSelector_1.ItemsSelector(ItemsSelector_1.ItemsSelector.CLOTHES);
	        this.clothesSelector.x = 0;
	        this.clothesSelector.y = 0;
	        this.addChild(this.clothesSelector);
	        this.clothesSelector.on(ItemsSelector_1.ItemsSelector.OPENED, function (event) {
	            _this.trophyDisplay.visible = false;
	            _this.trophyDisplay.close();
	        });
	        this.clothesSelector.on(ItemsSelector_1.ItemsSelector.HAS_CLOSED, function (event) {
	            _this.trophyDisplay.visible = true;
	        });
	        this.unlockedScreen = new UnlockedScreen_1.UnlockedScreen(this.clothesSelector.bagClosedPos, ItemsSelector_1.ItemsSelector.CLOTHES);
	        this.addChild(this.unlockedScreen);
	        this.unlockedScreen.on(UnlockedScreen_1.UnlockedScreen.WRAPPED_GIFT_PRESSED, function (event) {
	            _this.startKonfetti();
	            _this.clothesSelector.setState(ItemsSelector_1.ItemsSelector.OPEN_BAG_ONLY);
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                _this.clothesSelector.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	                _this.clothesSelector.highlight();
	                _this.unlockedScreen.visible = false;
	                if (_this.clothesSelector && !_this.clothesSelector.hasBeenClicked && Config_1.Config.patientsCured % 4 == 1) {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_orh_sikke_noget_flot_toj";
	                }
	            }, 2000);
	            _this.clothesSelector.visible = true;
	        });
	    };
	    WaitingRoomView.prototype.stopKonfetti = function () {
	        var _this = this;
	        TweenLite.to(this.konfettiMaker, 1, { alpha: 0, delay: 4, onComplete: function () {
	                _this.removeChild(_this.konfettiMaker);
	            } });
	    };
	    WaitingRoomView.prototype.spawnNewPatient = function (slot) {
	        switch (slot) {
	            case this.patientSlot_1:
	                this.patient_1 = this.createAndAddPatient(new pixi_js_1.Point(this.patientSlot_1.x, this.patientSlot_1.y));
	                Config_1.Config.patientWaitingInSlot_1 = this.patient_1;
	                break;
	            case this.patientSlot_2:
	                this.patient_2 = this.createAndAddPatient(new pixi_js_1.Point(this.patientSlot_2.x, this.patientSlot_2.y));
	                Config_1.Config.patientWaitingInSlot_2 = this.patient_2;
	                break;
	            case this.patientSlot_3:
	                this.patient_3 = this.createAndAddPatient(new pixi_js_1.Point(this.patientSlot_3.x, this.patientSlot_3.y));
	                Config_1.Config.patientWaitingInSlot_3 = this.patient_3;
	                break;
	            default:
	                break;
	        }
	    };
	    WaitingRoomView.prototype.addPatient = function (patient, slot) {
	        patient.setPivotXY(.5);
	        patient.startingPoint.x = slot.x + patient.width * .25;
	        patient.startingPoint.y = slot.y + patient.height * .25;
	        patient.x = patient.startingPoint.x;
	        patient.y = patient.startingPoint.y;
	        patient.state = Patient_1.Patient.WAITING;
	    };
	    WaitingRoomView.prototype.createAndAddPatient = function (slot) {
	        var patient = new Patient_1.Patient(this.findNewRandomType(), slot);
	        this.patientTarget.addChild(patient);
	        this.addPatient(patient, slot);
	        patient.on(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	        patient.target = this.door;
	        patient.disease = this.findRandomDisease();
	        patient.scalePatient(Patient_1.Patient.SIZE_SMALL);
	        patient.startIdleEyeMOvement();
	        return patient;
	    };
	    WaitingRoomView.prototype.findRandomDisease = function () {
	        var resultDisease = "";
	        var unlockedDiseases = Config_1.Config.getUnlockedDiseases();
	        if (unlockedDiseases.length < 3) {
	            resultDisease = "";
	        }
	        else {
	            while (resultDisease == "") {
	                var tryDisease = unlockedDiseases[Math.floor(Math.random() * unlockedDiseases.length)];
	                if (Config_1.Config.patientWaitingInSlot_1 && Config_1.Config.patientWaitingInSlot_1.disease == tryDisease)
	                    continue;
	                if (Config_1.Config.patientWaitingInSlot_2 && Config_1.Config.patientWaitingInSlot_2.disease == tryDisease)
	                    continue;
	                if (Config_1.Config.patientWaitingInSlot_3 && Config_1.Config.patientWaitingInSlot_3.disease == tryDisease)
	                    continue;
	                resultDisease = tryDisease;
	            }
	        }
	        return resultDisease;
	    };
	    WaitingRoomView.prototype.findNewRandomType = function () {
	        var resultNumber = 0;
	        while (resultNumber == 0) {
	            var tryNumber = Math.ceil(Math.random() * Patient_1.Patient.NUM_OF_TYPES);
	            if (Config_1.Config.patientWaitingInSlot_1 && Config_1.Config.patientWaitingInSlot_1.type == tryNumber)
	                continue;
	            if (Config_1.Config.patientWaitingInSlot_2 && Config_1.Config.patientWaitingInSlot_2.type == tryNumber)
	                continue;
	            if (Config_1.Config.patientWaitingInSlot_3 && Config_1.Config.patientWaitingInSlot_3.type == tryNumber)
	                continue;
	            resultNumber = tryNumber;
	        }
	        return resultNumber;
	    };
	    WaitingRoomView.prototype.destroy = function () {
	        clearTimeout(this.helpSpeakTimer);
	        if (this.soundTrain != null) {
	            this.soundTrain.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, this.soundTrainComplete);
	        }
	        if (this.patient_1 != null) {
	            this.patient_1.off(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	        }
	        if (this.patient_2 != null) {
	            this.patient_2.off(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	        }
	        if (this.patient_3 != null) {
	            this.patient_3.off(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, this.onPatientDropped);
	        }
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.door != null) {
	            this.removeChild(this.door);
	            this.door.destroy();
	            this.door = null;
	        }
	        if (this.portraitOfMille != null) {
	            this.removeChild(this.portraitOfMille);
	            this.portraitOfMille.destroy();
	            this.portraitOfMille = null;
	        }
	        if (this.patientSlot_1 != null) {
	            this.removeChild(this.patientSlot_1);
	            this.patientSlot_1.destroy();
	            this.patientSlot_1 = null;
	        }
	        if (this.patientSlot_2 != null) {
	            this.removeChild(this.patientSlot_2);
	            this.patientSlot_2.destroy();
	            this.patientSlot_2 = null;
	        }
	        if (this.patientSlot_3 != null) {
	            this.removeChild(this.patientSlot_3);
	            this.patientSlot_3.destroy();
	            this.patientSlot_3 = null;
	        }
	        if (this.patientTarget != null) {
	            this.removeChild(this.patientTarget);
	            this.patientTarget = null;
	        }
	        if (this.foreground != null) {
	            this.removeChild(this.foreground);
	            this.foreground = null;
	        }
	        if (this.helpingHand != null) {
	            this.removeChild(this.helpingHand);
	            this.helpingHand = null;
	        }
	        if (this.helpingOutline != null) {
	            this.removeChild(this.helpingOutline);
	            this.helpingOutline = null;
	        }
	        if (this.killTouchesLayer != null) {
	            this.removeChild(this.killTouchesLayer);
	            this.killTouchesLayer.off(ButtonEvent_1.ButtonEvent.CLICKED, this.killPressed);
	            this.killTouchesLayer = null;
	        }
	        if (this.konfettiMaker != null) {
	            this.removeChild(this.konfettiMaker);
	            this.konfettiMaker.destroy();
	            this.konfettiMaker = null;
	        }
	        if (this.toyTrain != null) {
	            this.toyTrain.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.trainTouchListener);
	            this.removeChild(this.toyTrain);
	            this.toyTrain = null;
	        }
	        if (this.clothesSelector != null) {
	            this.clothesSelector.off(ItemsSelector_1.ItemsSelector.OPENED);
	            this.clothesSelector.off(ItemsSelector_1.ItemsSelector.HAS_CLOSED);
	            this.removeChild(this.clothesSelector);
	            this.clothesSelector.destroy();
	            this.clothesSelector = null;
	        }
	        if (this.konfettiMaker != null) {
	            this.removeChild(this.konfettiMaker);
	            this.konfettiMaker.destroy();
	            this.konfettiMaker = null;
	        }
	        if (this.trophyDisplay != null) {
	            this.removeChild(this.trophyDisplay);
	            this.trophyDisplay.off(TrophyDisplay_1.TrophyDisplay.OPENED);
	            this.trophyDisplay.destroy();
	            this.trophyDisplay = null;
	        }
	        if (this.unlockedScreen != null) {
	            this.unlockedScreen.off(UnlockedScreen_1.UnlockedScreen.WRAPPED_GIFT_PRESSED);
	            this.removeChild(this.unlockedScreen);
	            this.unlockedScreen.destroy();
	            this.unlockedScreen = null;
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return WaitingRoomView;
	}(HospitalGameView_1.HospitalGameView));
	exports.WaitingRoomView = WaitingRoomView;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var ButtonEvent_1 = __webpack_require__(17);
	var Config_1 = __webpack_require__(6);
	var AudioPlayer_1 = __webpack_require__(10);
	var PortaitOfMille = (function (_super) {
	    __extends(PortaitOfMille, _super);
	    function PortaitOfMille() {
	        var _this = _super.call(this) || this;
	        _this.touchListener = function (event) {
	            _this.movePortrait();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("picture", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	        };
	        _this.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.touchListener);
	        _this.onAddedToStage();
	        return _this;
	    }
	    PortaitOfMille.prototype.onAddedToStage = function () {
	        this.interactive = true;
	        this.createPortraitArt();
	    };
	    PortaitOfMille.prototype.movePortrait = function () {
	        TweenLite.killTweensOf(this);
	        var tl = new TimelineLite();
	        tl.to(this, 0.5, { rotation: 0.2, ease: Sine.easeInOut });
	        tl.to(this, 0.9, { rotation: -0.12, ease: Sine.easeInOut });
	        tl.to(this, 0.7, { rotation: 0.08, ease: Sine.easeInOut });
	        tl.to(this, 0.6, { rotation: -0.03, ease: Sine.easeInOut });
	        tl.to(this, 0.5, { rotation: 0, ease: Sine.easeInOut });
	        tl.play();
	    };
	    PortaitOfMille.prototype.createPortraitArt = function () {
	        this.portrait = pixi_js_1.Sprite.fromFrame("waitingRoom_motorMille");
	        this.addChild(this.portrait);
	        this.portrait.x = -139;
	        this.portrait.y = -2;
	    };
	    PortaitOfMille.prototype.destroy = function () {
	        this.off(ButtonEvent_1.ButtonEvent.CLICKED, this.touchListener);
	        TweenLite.killTweensOf(this);
	        if (this.portrait != null) {
	            this.removeChild(this.portrait);
	            this.portrait = null;
	        }
	    };
	    return PortaitOfMille;
	}(pixi_js_1.Sprite));
	exports.PortaitOfMille = PortaitOfMille;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var ButtonEvent = (function (_super) {
	    __extends(ButtonEvent, _super);
	    function ButtonEvent(type, button, bubbles, data) {
	        if (bubbles === void 0) { bubbles = false; }
	        if (data === void 0) { data = null; }
	        var _this = _super.call(this, type) || this;
	        _this.button = button;
	        Logger_1.Logger.log(_this, "ButtonEvent   this.button === " + _this.button);
	        return _this;
	    }
	    return ButtonEvent;
	}(Event));
	ButtonEvent.CLICKED = "pointerdown";
	ButtonEvent.TOUCH = "touch";
	exports.ButtonEvent = ButtonEvent;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ConfettiBit_1 = __webpack_require__(19);
	var AssetLoader_1 = __webpack_require__(7);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var ConfettiMaker = (function (_super) {
	    __extends(ConfettiMaker, _super);
	    function ConfettiMaker() {
	        var _this = _super.call(this) || this;
	        _this.animateConfetti = function (deltaTime) {
	            if (!_this.firstFrameElapsed) {
	                _this.firstFrameElapsed = true;
	                return;
	            }
	            var bitsToAnimateLength = _this.bitsToAnimate.length;
	            for (var i = 0; i < bitsToAnimateLength; i++) {
	                var bitToAnimate = _this.bitsToAnimate[i];
	                bitToAnimate.y += bitToAnimate.speed * _this.elapsed;
	                if (bitToAnimate.y > AssetLoader_1.AssetLoader.STAGE_HEIGHT) {
	                    bitToAnimate.y = -10;
	                }
	            }
	        };
	        _this.onEnterFrame = function (deltaTime) {
	            _this.checkElapsed();
	        };
	        _this.timeCurrent = 0;
	        _this.onAddedToStage();
	        return _this;
	    }
	    ConfettiMaker.prototype.onAddedToStage = function () {
	        this.createKonfetti();
	        pixi_js_1.ticker.shared.add(this.onEnterFrame, this);
	        pixi_js_1.ticker.shared.add(this.animateConfetti, this);
	    };
	    ConfettiMaker.prototype.createKonfetti = function () {
	        this.bitsToAnimate = [];
	        for (var i = 0; i < 100; i++) {
	            var textureName = void 0;
	            if (i < 10) {
	                textureName = "konfetti_g";
	            }
	            else if (i < 20) {
	                textureName = "konfetti_h";
	            }
	            else if (i < 30) {
	                textureName = "konfetti_i";
	            }
	            else if (i < 40) {
	                textureName = "konfetti_j";
	            }
	            else if (i < 50) {
	                textureName = "konfetti_k";
	            }
	            else if (i < 60) {
	                textureName = "konfetti_l";
	            }
	            else if (i < 70) {
	                textureName = "konfetti_m";
	            }
	            else if (i < 80) {
	                textureName = "konfetti_n";
	            }
	            else if (i < 100) {
	                textureName = "konfetti_o";
	            }
	            var confettiBitImage = pixi_js_1.Sprite.fromFrame(textureName);
	            var confettiBit = new ConfettiBit_1.ConfettiBit();
	            confettiBit.addChild(confettiBitImage);
	            confettiBit.speed = 2 + Math.random() * 2;
	            this.addChild(confettiBit);
	            confettiBit.x = Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_WIDTH);
	            confettiBit.y = -10 - Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	            this.bitsToAnimate.push(confettiBit);
	        }
	        for (var j = 0; j < 60; j++) {
	            if (j < 10) {
	                var textureClip = "konfetti_a_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 5; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	            else if (j < 20) {
	                var textureClip = "konfetti_b_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 5; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	            else if (j < 30) {
	                var textureClip = "konfetti_c_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 5; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	            else if (j < 40) {
	                var textureClip = "konfetti_d_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 6; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	            else if (j < 50) {
	                var textureClip = "konfetti_e_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 5; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	            else if (j < 60) {
	                var textureClip = "konfetti_f_ani_00";
	                var clipsToAnimate = [];
	                for (var i = 1; i < 5; i++) {
	                    var val = i < 10 ? '0' + i : i;
	                    clipsToAnimate.push(pixi_js_1.Texture.fromFrame(textureClip + val));
	                }
	                this.addConfettiClip(clipsToAnimate);
	            }
	        }
	    };
	    ConfettiMaker.prototype.addConfettiClip = function (clip) {
	        var confettiClip = new pixi_js_1.extras.AnimatedSprite(clip);
	        confettiClip.animationSpeed = .1;
	        var confettiBitClip = new ConfettiBit_1.ConfettiBit();
	        confettiBitClip.addChild(confettiClip);
	        confettiBitClip.speed = 2 + Math.random() * 2;
	        this.addChild(confettiBitClip);
	        confettiClip.play();
	        confettiBitClip.x = Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_WIDTH);
	        confettiBitClip.y = -10 - Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.bitsToAnimate.push(confettiBitClip);
	    };
	    ConfettiMaker.prototype.checkElapsed = function () {
	        this.timePrevious = this.timeCurrent;
	        this.timeCurrent = new Date().getTime();
	        this.elapsed = (this.timeCurrent - this.timePrevious) * 0.1;
	    };
	    ConfettiMaker.prototype.destroy = function () {
	        if (pixi_js_1.ticker != null) {
	            pixi_js_1.ticker.shared.remove(this.onEnterFrame, this);
	            pixi_js_1.ticker.shared.remove(this.animateConfetti, this);
	        }
	        Logger_1.Logger.log(this, "ConfettiMaker destroy  this.children.length == " + this.children.length);
	        this.removeChildren(0, this.children.length - 1);
	        Logger_1.Logger.log(this, "ConfettiMaker destroy  AFTER this.children.length == " + this.children.length);
	    };
	    return ConfettiMaker;
	}(pixi_js_1.Sprite));
	exports.ConfettiMaker = ConfettiMaker;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var ConfettiBit = (function (_super) {
	    __extends(ConfettiBit, _super);
	    function ConfettiBit() {
	        var _this = _super.call(this) || this;
	        _this.touchable = false;
	        return _this;
	    }
	    Object.defineProperty(ConfettiBit.prototype, "speed", {
	        get: function () {
	            return this._speed;
	        },
	        set: function (value) {
	            this._speed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ConfettiBit;
	}(pixi_js_1.Sprite));
	exports.ConfettiBit = ConfettiBit;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Button_1 = __webpack_require__(21);
	var Config_1 = __webpack_require__(6);
	var Level_1 = __webpack_require__(22);
	var ButtonEvent_1 = __webpack_require__(17);
	var pixi_js_1 = __webpack_require__(8);
	var AudioPlayer_1 = __webpack_require__(10);
	var TrophyDisplay = (function (_super) {
	    __extends(TrophyDisplay, _super);
	    function TrophyDisplay() {
	        var _this = _super.call(this) || this;
	        _this.SPACING_HORIZONTAL = 60;
	        _this.SPACING_VERTICAL = 60;
	        _this.btnOpenCloseTriggered = function (event) {
	            _this.onState = !_this.onState;
	            _this.trophyContainer.visible = _this.onState;
	            if (_this.onState) {
	                _this.emit(TrophyDisplay.OPENED);
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("toj_swipe_swoosh", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	            }
	            else {
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("toj_swipe_swoosh", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	            }
	        };
	        _this.onAddedToStage();
	        return _this;
	    }
	    TrophyDisplay.prototype.onAddedToStage = function () {
	        this.interactive = true;
	        this.createTrophyDisplayArt();
	        this.update();
	        this.initOpenCloseButton();
	        this.onState = false;
	        this.trophyContainer.visible = this.onState;
	    };
	    TrophyDisplay.prototype.close = function () {
	        this.onState = false;
	        this.trophyContainer.visible = this.onState;
	    };
	    TrophyDisplay.prototype.initOpenCloseButton = function () {
	        this.btnOpenClose.on(ButtonEvent_1.ButtonEvent.CLICKED, this.btnOpenCloseTriggered);
	    };
	    TrophyDisplay.prototype.createTrophyDisplayArt = function () {
	        this.btnOpenClose = new Button_1.Button();
	        this.btnOpenClose.addTexture(pixi_js_1.Texture.fromFrame("medalje"));
	        this.addChild(this.btnOpenClose);
	        this.btnOpenClose.pivot.x = this.btnOpenClose.width * .5;
	        this.btnOpenClose.pivot.y = this.btnOpenClose.height * .5;
	        this.trophyContainer = new pixi_js_1.Sprite();
	        var backgroundImage = pixi_js_1.Sprite.fromFrame("bg");
	        backgroundImage.scale.x = backgroundImage.scale.y = 2;
	        this.trophyContainer.addChild(backgroundImage);
	        this.addChild(this.trophyContainer);
	        this.trophyContainer.x = 76;
	        this.trophyContainer.y = -95;
	    };
	    TrophyDisplay.prototype.update = function () {
	        if (this.diseaseCured(Level_1.Level.BURN) || this.diseaseCured(Level_1.Level.INSECT_BITE)) {
	            this.trophySkinDiseases = pixi_js_1.Sprite.fromFrame("medalje_hud");
	        }
	        else {
	            this.trophySkinDiseases = pixi_js_1.Sprite.fromFrame("medalje_hud_locked");
	            this.trophySkinDiseases.alpha = 0.4;
	        }
	        this.trophyContainer.addChild(this.trophySkinDiseases);
	        this.trophySkinDiseases.x = this.SPACING_HORIZONTAL;
	        this.trophySkinDiseases.y = this.SPACING_VERTICAL;
	        if (this.diseaseCured(Level_1.Level.FRACTURE_HAND) || this.diseaseCured(Level_1.Level.FRACTURE_RADIUS)) {
	            this.trophyBonesDiseases = pixi_js_1.Sprite.fromFrame("medalje_skelet");
	        }
	        else {
	            this.trophyBonesDiseases = pixi_js_1.Sprite.fromFrame("medalje_skelet_locked");
	            this.trophyBonesDiseases.alpha = 0.4;
	        }
	        this.trophyContainer.addChild(this.trophyBonesDiseases);
	        this.trophyBonesDiseases.x = this.SPACING_HORIZONTAL * 2 + this.trophySkinDiseases.width * 1;
	        this.trophyBonesDiseases.y = this.SPACING_VERTICAL;
	        if (this.diseaseCured(Level_1.Level.PNEUMONIA)) {
	            this.trophyLungsDiseases = pixi_js_1.Sprite.fromFrame("medalje_lunger");
	        }
	        else {
	            this.trophyLungsDiseases = pixi_js_1.Sprite.fromFrame("medalje_lunger_locked");
	            this.trophyLungsDiseases.alpha = 0.4;
	        }
	        this.trophyContainer.addChild(this.trophyLungsDiseases);
	        this.trophyLungsDiseases.x = this.SPACING_HORIZONTAL * 3 + this.trophySkinDiseases.width * 2;
	        this.trophyLungsDiseases.y = this.SPACING_VERTICAL;
	        if (this.diseaseCured(Level_1.Level.POISONING)) {
	            this.trophyIntestinesDiseases = pixi_js_1.Sprite.fromFrame("medalje_tarm");
	        }
	        else {
	            this.trophyIntestinesDiseases = pixi_js_1.Sprite.fromFrame("medalje_tarm_locked");
	            this.trophyIntestinesDiseases.alpha = 0.4;
	        }
	        this.trophyContainer.addChild(this.trophyIntestinesDiseases);
	        this.trophyIntestinesDiseases.x = this.SPACING_HORIZONTAL * 4 + this.trophySkinDiseases.width * 3;
	        this.trophyIntestinesDiseases.y = this.SPACING_VERTICAL;
	        if (this.diseaseCured(Level_1.Level.SPRAIN)) {
	            this.trophyMusclesDiseases = pixi_js_1.Sprite.fromFrame("medalje_muskler");
	        }
	        else {
	            this.trophyMusclesDiseases = pixi_js_1.Sprite.fromFrame("medalje_muskler_locked");
	            this.trophyMusclesDiseases.alpha = 0.4;
	        }
	        this.trophyContainer.addChild(this.trophyMusclesDiseases);
	        this.trophyMusclesDiseases.x = this.SPACING_HORIZONTAL * 5 + this.trophySkinDiseases.width * 4;
	        this.trophyMusclesDiseases.y = this.SPACING_VERTICAL;
	    };
	    TrophyDisplay.prototype.diseaseCured = function (disease) {
	        var toReturn;
	        for (var i = 0; i < Config_1.Config.curedDiseases.length; i++) {
	            if (Config_1.Config.curedDiseases[i] == disease) {
	                toReturn = true;
	            }
	        }
	        return toReturn;
	    };
	    TrophyDisplay.prototype.destroy = function () {
	        if (this.btnOpenClose != null) {
	            this.btnOpenClose.off(ButtonEvent_1.ButtonEvent.CLICKED, this.btnOpenCloseTriggered);
	            this.removeChild(this.btnOpenClose);
	            this.btnOpenClose = null;
	        }
	        if (this.trophyContainer != null) {
	            this.removeChild(this.trophyContainer);
	            this.trophyContainer.removeChildren();
	            this.trophyContainer = null;
	        }
	    };
	    return TrophyDisplay;
	}(pixi_js_1.Sprite));
	TrophyDisplay.OPENED = "appdrhospital.view.waitingroom.objects.TrophyDisplay.OPENED";
	exports.TrophyDisplay = TrophyDisplay;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var Button = (function (_super) {
	    __extends(Button, _super);
	    function Button() {
	        var _this = _super.call(this) || this;
	        _this.touchable = true;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.anchor.set(0.5);
	        _this
	            .on('pointerdown', _this.onButtonDown)
	            .on('pointerup', _this.onButtonUp)
	            .on('pointerupoutside', _this.onButtonUp)
	            .on('pointerover', _this.onButtonOver)
	            .on('pointerout', _this.onButtonOut);
	        return _this;
	    }
	    Button.prototype.onButtonDown = function () {
	        Logger_1.Logger.log(this, "Button onButtonDown");
	        if (this.touchable) {
	            this.isDown = true;
	            this.texture = this.textureButtonDown != null ? this.textureButtonDown : this.texture;
	            this.scale.x = this.scale.y = Button.SCALE_DOWN;
	        }
	    };
	    Button.prototype.onButtonUp = function () {
	        if (this.touchable) {
	            if (this.isOver) {
	                this.texture = this.textureButtonOver != null ? this.textureButtonOver : this.texture;
	            }
	            else {
	                this.texture = this.textureButton;
	            }
	            if (this.isDown) {
	            }
	            this.isDown = false;
	            this.alpha = 1;
	            this.scale.x = this.scale.y = 1;
	        }
	    };
	    Button.prototype.onButtonOver = function () {
	        if (this.touchable) {
	            this.isOver = true;
	            this.texture = this.textureButtonOver != null ? this.textureButtonOver : this.texture;
	        }
	    };
	    Button.prototype.onButtonOut = function () {
	        if (this.touchable) {
	            this.isOver = false;
	            this.isDown = false;
	            this.alpha = 1;
	            this.texture = this.textureButton;
	        }
	    };
	    Button.prototype.addTexture = function (texture) {
	        this.textureButton = texture;
	        this.texture = this.textureButton;
	    };
	    Button.prototype.addTextureButtonDown = function (texture) {
	        this.textureButtonDown = texture;
	    };
	    Button.prototype.addTextureButtonOver = function (texture) {
	        this.textureButtonOver = texture;
	    };
	    Button.prototype.getTextureBounds = function () {
	        return new pixi_js_1.Rectangle(this.x, this.y, this.width, this.height);
	    };
	    Button.prototype.dispose = function () {
	        Logger_1.Logger.log(this, "Button dispose() this == " + this);
	    };
	    Button.prototype.destroy = function () {
	        this.off('pointerdown', this.onButtonDown);
	        this.off('pointerup', this.onButtonUp);
	        this.off('pointerupoutside', this.onButtonUp);
	        this.off('pointerover', this.onButtonOver);
	        this.off('pointerout', this.onButtonOut);
	    };
	    return Button;
	}(pixi_js_1.Sprite));
	Button.SCALE_DOWN = .9;
	exports.Button = Button;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Level = (function () {
	    function Level(unlockedTools, unlockedDiseases, unlockedClothes, unlockedBandage, unlockedBandAid, unlockedLemonade) {
	        this.unlockedTools = unlockedTools;
	        this.unlockedDiseases = unlockedDiseases;
	        this.unlockedClothes = unlockedClothes;
	        this.unlockedBandage = unlockedBandage;
	        this.unlockedBandAid = unlockedBandAid;
	        this.unlockedLemonade = unlockedLemonade;
	    }
	    return Level;
	}());
	Level.FRACTURE_RADIUS = "fractureRadius";
	Level.FRACTURE_HAND = "fractureHand";
	Level.INSECT_BITE = "insectBite";
	Level.SPRAIN = "sprain";
	Level.POISONING = "poisoning";
	Level.PNEUMONIA = "pneumonia";
	Level.BURN = "burn";
	Level.BANDAGE_1 = "forbinding_gui_01";
	Level.BANDAGE_2 = "forbinding_gui_02";
	Level.BANDAGE_3 = "forbinding_gui_03";
	Level.BANDAGE_4 = "forbinding_gui_04";
	Level.BANDAGE_5 = "forbinding_gui_05";
	Level.BANDAGE_6 = "forbinding_gui_06";
	Level.BANDAGE_7 = "forbinding_gui_07";
	Level.BANDAGE_8 = "forbinding_gui_08";
	Level.BANDAGE_9 = "forbinding_gui_09";
	Level.BANDAGE_10 = "forbinding_gui_10";
	Level.BAND_AID_1 = "plaster_01";
	Level.BAND_AID_2 = "plaster_02";
	Level.BAND_AID_3 = "plaster_03";
	Level.BAND_AID_4 = "plaster_04";
	Level.BAND_AID_5 = "plaster_05";
	Level.BAND_AID_6 = "plaster_06";
	Level.BAND_AID_7 = "plaster_07";
	Level.BAND_AID_8 = "plaster_08";
	Level.BAND_AID_9 = "plaster_09";
	Level.LEMONADE_1 = "saftevand_01";
	Level.LEMONADE_2 = "saftevand_02";
	Level.LEMONADE_3 = "saftevand_03";
	Level.LEMONADE_4 = "saftevand_04";
	Level.LEMONADE_5 = "saftevand_05";
	Level.CLOTHES_LOWER_1 = "clothesLower_01";
	Level.CLOTHES_LOWER_2 = "clothesLower_02";
	Level.CLOTHES_LOWER_3 = "clothesLower_03";
	Level.CLOTHES_LOWER_4 = "clothesLower_04";
	Level.CLOTHES_LOWER_5 = "clothesLower_05";
	Level.CLOTHES_LOWER_6 = "clothesLower_06";
	Level.CLOTHES_LOWER_7 = "clothesLower_07";
	Level.CLOTHES_LOWER_8 = "clothesLower_08";
	Level.CLOTHES_LOWER_9 = "clothesLower_09";
	Level.CLOTHES_LOWER_10 = "clothesLower_10";
	Level.CLOTHES_LOWER_11 = "clothesLower_11";
	Level.CLOTHES_LOWER_12 = "clothesLower_12";
	Level.CLOTHES_UPPER_1 = "clothesUpper_01";
	Level.CLOTHES_UPPER_2 = "clothesUpper_02";
	Level.CLOTHES_UPPER_3 = "clothesUpper_03";
	Level.CLOTHES_UPPER_4 = "clothesUpper_04";
	Level.CLOTHES_UPPER_5 = "clothesUpper_05";
	Level.CLOTHES_UPPER_6 = "clothesUpper_06";
	Level.CLOTHES_UPPER_7 = "clothesUpper_07";
	Level.CLOTHES_UPPER_8 = "clothesUpper_08";
	Level.CLOTHES_UPPER_9 = "clothesUpper_09";
	Level.CLOTHES_UPPER_10 = "clothesUpper_10";
	Level.CLOTHES_UPPER_11 = "clothesUpper_11";
	Level.CLOTHES_UPPER_12 = "clothesUpper_12";
	exports.Level = Level;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Button_1 = __webpack_require__(21);
	var ButtonEvent_1 = __webpack_require__(17);
	var ItemsSelector_1 = __webpack_require__(24);
	var Config_1 = __webpack_require__(6);
	var Scanner_1 = __webpack_require__(31);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var AudioPlayer_1 = __webpack_require__(10);
	var Graphics = PIXI.Graphics;
	var HospitalGameView_1 = __webpack_require__(13);
	var UnlockedScreen = (function (_super) {
	    __extends(UnlockedScreen, _super);
	    function UnlockedScreen(giftDestination, contentType) {
	        var _this = _super.call(this) || this;
	        _this.wrappedGiftPressed = function (event) {
	            _this.endHighlight();
	            _this.wrappedGift.visible = false;
	            _this.showUnlockedItem();
	            _this.emit(UnlockedScreen.WRAPPED_GIFT_PRESSED);
	        };
	        _this.giftDestination = giftDestination;
	        Logger_1.Logger.log(_this, "UnlockedScreen giftDestination == " + giftDestination.x + " : " + giftDestination.y);
	        _this.contentType = contentType;
	        _this.onAddedToStage();
	        return _this;
	    }
	    UnlockedScreen.prototype.onAddedToStage = function () {
	        this.createScreenArt();
	        this.showWrappedGift();
	        this.highlight();
	    };
	    UnlockedScreen.prototype.highlight = function () {
	        TweenMax.to(this.wrappedGift, 0.5, { width: "+=40", height: "+=40", x: "+=20", y: "+=20", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    UnlockedScreen.prototype.endHighlight = function () {
	        TweenMax.killTweensOf(this.wrappedGift);
	        this.wrappedGift.scale.x = this.wrappedGift.scale.y = 1;
	        this.positionWrappedGift();
	    };
	    UnlockedScreen.prototype.showWrappedGift = function () {
	        this.wrappedGift.visible = true;
	        this.wrappedGift.on(ButtonEvent_1.ButtonEvent.CLICKED, this.wrappedGiftPressed);
	    };
	    UnlockedScreen.prototype.showUnlockedItem = function () {
	        var unlockedItem;
	        var index = Config_1.Config.patientsCured < Config_1.Config.levels.length ? Config_1.Config.patientsCured : Config_1.Config.levels.length - 1;
	        if (this.contentType == ItemsSelector_1.ItemsSelector.CLOTHES) {
	            if (Config_1.Config.levels[index].unlockedClothes.length > 0) {
	                unlockedItem = Config_1.Config.levels[index].unlockedClothes[0];
	            }
	        }
	        else if (this.contentType == ItemsSelector_1.ItemsSelector.TREATS) {
	            if (Config_1.Config.levels[index].unlockedBandage.length > 0) {
	                unlockedItem = Config_1.Config.levels[index].unlockedBandage[0];
	            }
	            if (Config_1.Config.levels[index].unlockedBandAid.length > 0) {
	                unlockedItem = Config_1.Config.levels[index].unlockedBandAid[0];
	            }
	            if (Config_1.Config.levels[index].unlockedLemonade.length > 0) {
	                unlockedItem = Config_1.Config.levels[index].unlockedLemonade[0];
	            }
	        }
	        if (unlockedItem) {
	            this.unlockedItemSprite = pixi_js_1.Sprite.fromFrame(unlockedItem);
	            var rectCover = new Graphics();
	            rectCover.beginFill(0xFFFFFF);
	            rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	            this.unlockedItemSprite.addChild(rectCover);
	            rectCover.drawRect(this.unlockedItemSprite.x, this.unlockedItemSprite.y, this.unlockedItemSprite.width, this.unlockedItemSprite.height);
	            this.addChild(this.unlockedItemSprite);
	            this.unlockedItemSprite.pivot.x = this.unlockedItemSprite.width * .5;
	            this.unlockedItemSprite.pivot.y = this.unlockedItemSprite.height * .5;
	            this.unlockedItemSprite.x = this.wrappedGift.x - this.unlockedItemSprite.width * .5;
	            this.unlockedItemSprite.y = this.wrappedGift.y - this.unlockedItemSprite.height * .5;
	            TweenLite.to(this.unlockedItemSprite, 1, { x: this.giftDestination.x, y: this.giftDestination.y, delay: 1 });
	            TweenLite.to(this.unlockedItemSprite.scale, 0.75, { x: 0.5, y: 0.5, delay: 1 });
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("klapsalve", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	        }
	    };
	    UnlockedScreen.prototype.createScreenArt = function () {
	        this.wrappedGift = new Button_1.Button();
	        this.wrappedGift.addTexture(pixi_js_1.Texture.fromFrame("unlock_pakke"));
	        this.wrappedGift.pivot.x = this.wrappedGift.width * .5;
	        this.wrappedGift.pivot.y = this.wrappedGift.height * .5;
	        this.addChild(this.wrappedGift);
	        this.wrappedGift.visible = false;
	        this.positionWrappedGift();
	    };
	    UnlockedScreen.prototype.positionWrappedGift = function () {
	        if (this.contentType == ItemsSelector_1.ItemsSelector.CLOTHES) {
	            this.wrappedGift.x = 800 + this.wrappedGift.width * .5;
	            this.wrappedGift.y = 600;
	        }
	        else if (this.contentType == ItemsSelector_1.ItemsSelector.TREATS) {
	            this.wrappedGift.x = 1000 + this.wrappedGift.width * .5;
	            this.wrappedGift.y = 330 + this.wrappedGift.height * .25;
	        }
	    };
	    UnlockedScreen.prototype.update = function () {
	        var index = Config_1.Config.patientsCured < Config_1.Config.levels.length ? Config_1.Config.patientsCured : Config_1.Config.levels.length - 1;
	        var bandageTexture = Config_1.Config.levels[index].unlockedBandage[0];
	        if (bandageTexture) {
	            this.bandageImage = pixi_js_1.Sprite.fromFrame(bandageTexture);
	            this.addChild(this.bandageImage);
	            this.bandageImage.pivot.x = this.bandageImage.width * .5;
	            this.bandageImage.pivot.y = this.bandageImage.height * .5;
	            this.bandageImage.x = 66 + this.bandageImage.width * .5;
	            this.bandageImage.y = 90 + this.bandageImage.height * .5;
	        }
	        var clothesTexture = Config_1.Config.levels[index].unlockedClothes[0];
	        if (clothesTexture) {
	            this.clothesImage = pixi_js_1.Sprite.fromFrame(clothesTexture);
	            this.addChild(this.clothesImage);
	            this.clothesImage.pivot.x = this.clothesImage.width * .5;
	            this.clothesImage.pivot.y = this.clothesImage.height * .5;
	            this.clothesImage.x = 340 + this.clothesImage.width * .5;
	            this.clothesImage.y = 40 + this.clothesImage.height * .5;
	        }
	        var clothesTexture2 = Config_1.Config.levels[index].unlockedClothes[1];
	        if (clothesTexture2) {
	            this.clothesImage2 = pixi_js_1.Sprite.fromFrame(clothesTexture2);
	            this.addChild(this.clothesImage2);
	            this.clothesImage2.pivot.x = this.clothesImage2.width * .5;
	            this.clothesImage2.pivot.y = this.clothesImage2.height * .5;
	            this.clothesImage2.x = 340 + this.clothesImage2.width * .5;
	            this.clothesImage2.y = 350 + this.clothesImage2.height * .5;
	        }
	        this.scanner = new Scanner_1.Scanner();
	        this.addChild(this.scanner);
	        this.scanner.x = 36;
	        this.scanner.y = 370;
	        this.scanner.setUnlockedMode();
	        var unlockedTool = Config_1.Config.levels[index].unlockedTools[0];
	        if (unlockedTool) {
	            this.scanner.highlightButton(unlockedTool, true);
	        }
	        this.scanner.scale.x = this.scanner.scale.y = 0.5;
	    };
	    UnlockedScreen.prototype.destroy = function () {
	        if (this.wrappedGift != null) {
	            this.removeChild(this.wrappedGift);
	            this.wrappedGift = null;
	        }
	        if (this.unlockedItemSprite != null) {
	            this.removeChild(this.unlockedItemSprite);
	            this.unlockedItemSprite = null;
	        }
	        if (this.bandageImage != null) {
	            this.removeChild(this.bandageImage);
	            this.bandageImage = null;
	        }
	        if (this.clothesImage != null) {
	            this.removeChild(this.clothesImage);
	            this.clothesImage = null;
	        }
	        if (this.clothesImage2 != null) {
	            this.removeChild(this.clothesImage2);
	            this.clothesImage2 = null;
	        }
	        if (this.scanner != null) {
	            this.removeChild(this.scanner);
	            this.scanner.destroy();
	            this.scanner = null;
	        }
	    };
	    return UnlockedScreen;
	}(pixi_js_1.Sprite));
	UnlockedScreen.WRAPPED_GIFT_PRESSED = "appdrhospital.view.objects.UnlockedScreen.WRAPPED_GIFT_PRESSED";
	exports.UnlockedScreen = UnlockedScreen;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var InflatableButton_1 = __webpack_require__(25);
	var Button_1 = __webpack_require__(21);
	var Config_1 = __webpack_require__(6);
	var TreatItem_1 = __webpack_require__(26);
	var ClothesItem_1 = __webpack_require__(30);
	var ButtonEvent_1 = __webpack_require__(17);
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var AudioPlayer_1 = __webpack_require__(10);
	var AssetLoader_1 = __webpack_require__(7);
	var Rectangle = PIXI.Rectangle;
	var ItemsSelector = (function (_super) {
	    __extends(ItemsSelector, _super);
	    function ItemsSelector(contentType, draggableObjectTarget) {
	        if (draggableObjectTarget === void 0) { draggableObjectTarget = null; }
	        var _this = _super.call(this) || this;
	        _this.navigationButtonListener = function (event) {
	            var nextIndex;
	            nextIndex = (_this.items.indexOf(_this.focusedItem_1) + 4) % _this.items.length;
	            _this.focusItems(nextIndex);
	        };
	        _this.bagPressed = function (event) {
	            Logger_1.Logger.log(_this, "Bag Was Pressed");
	            console.log("Bag was Pressed");
	            _this.hasBeenClicked = true;
	            _this.endHighlight();
	            if (_this.state == ItemsSelector.CLOSED) {
	                _this.setState(ItemsSelector.OPEN);
	                _this.emit(ItemsSelector.OPEN);
	            }
	            else if (_this.state == ItemsSelector.OPEN) {
	                _this.setState(ItemsSelector.CLOSED);
	                _this.emit(ItemsSelector.CLOSED);
	            }
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("toj_swipe_swoosh", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	        };
	        _this.contentType = contentType;
	        _this.draggableObjectTarget = draggableObjectTarget;
	        _this.clothesSpeakCounter = 0;
	        _this.placedBandageItem = null;
	        _this.placedLemonadeItem = null;
	        _this.placedBandAidItem_1 = null;
	        _this.placedBandAidItem_2 = null;
	        _this.placedBandAidItem_3 = null;
	        _this._offSetPosX = AssetLoader_1.AssetLoader.STAGE_WIDTH * .5;
	        _this._offSetPosY = 630;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Object.defineProperty(ItemsSelector.prototype, "offSetPosY", {
	        get: function () {
	            return this._offSetPosY;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ItemsSelector.prototype, "offSetPosX", {
	        get: function () {
	            return this._offSetPosX;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ItemsSelector.prototype.onAddedToStage = function () {
	        if (this.contentType == ItemsSelector.TREATS) {
	            this.createTreatTargets();
	        }
	        this.createSelectorArt();
	        if (this.contentType == ItemsSelector.CLOTHES) {
	            this.createClothesItems();
	            ClothesItem_1.ClothesItem.clothesSpeakCounter = 0;
	        }
	        if (this.contentType == ItemsSelector.TREATS) {
	            this.createTreatItems();
	        }
	        this.createBagButtons();
	        this.initNavigationButtons();
	        this.focusItems(0);
	        this.setState(ItemsSelector.CLOSED);
	    };
	    ItemsSelector.prototype.highlight = function () {
	        TweenMax.to(this.bagClosed, 0.5, { width: "+=40", height: "+=40", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    Object.defineProperty(ItemsSelector.prototype, "bagClosedPos", {
	        get: function () {
	            Logger_1.Logger.log(this, "ItemSelector bagClosedPos this.bagClosed.height == " + this.bagClosed.height);
	            return new Rectangle(this.x + this.bagClosed.x, this.y + this.bagClosed.y, this.bagClosed.width, this.bagClosed.height);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ItemsSelector.prototype.endHighlight = function () {
	        this.bagClosed.scale.x = this.bagClosed.scale.y = 1;
	        TweenMax.killTweensOf(this.bagClosed);
	    };
	    ItemsSelector.prototype.setState = function (state) {
	        Logger_1.Logger.log(this, "ItemSelector setState  state == " + state);
	        Logger_1.Logger.log(this, "ItemSelector this.focusedItem_1 == " + this.focusedItem_1);
	        Logger_1.Logger.log(this, "ItemSelector this.focusedItem_2 == " + this.focusedItem_2);
	        Logger_1.Logger.log(this, "ItemSelector this.focusedItem_3 == " + this.focusedItem_3);
	        Logger_1.Logger.log(this, "ItemSelector this.focusedItem_4 == " + this.focusedItem_4);
	        this.state = state;
	        this.background.visible = false;
	        this.btnPrevious.visible = false;
	        this.bagClosed.visible = false;
	        this.bagOpen.visible = false;
	        if (this.focusedItem_1 != null) {
	            this.focusedItem_1.visible = false;
	        }
	        if (this.focusedItem_2 != null) {
	            this.focusedItem_2.visible = false;
	        }
	        if (this.focusedItem_3 != null) {
	            this.focusedItem_3.visible = false;
	        }
	        if (this.focusedItem_4 != null) {
	            this.focusedItem_4.visible = false;
	        }
	        switch (state) {
	            case ItemsSelector.CLOSED:
	                this.bagClosed.visible = true;
	                break;
	            case ItemsSelector.OPEN:
	                this.bagOpen.visible = true;
	                this.background.visible = true;
	                if (this.items.length > 4) {
	                    this.btnPrevious.visible = true;
	                }
	                if (this.focusedItem_1) {
	                    this.focusedItem_1.visible = true;
	                }
	                if (this.focusedItem_2) {
	                    this.focusedItem_2.visible = true;
	                }
	                if (this.focusedItem_3) {
	                    this.focusedItem_3.visible = true;
	                }
	                if (this.focusedItem_4) {
	                    this.focusedItem_4.visible = true;
	                }
	                break;
	            case ItemsSelector.OPEN_BAG_ONLY:
	                this.bagOpen.visible = true;
	                break;
	            default:
	                break;
	        }
	    };
	    ItemsSelector.prototype.placeTreatItem = function (treatItem, bandAidTarget) {
	        var _this = this;
	        if (bandAidTarget === void 0) { bandAidTarget = ""; }
	        Logger_1.Logger.log(this, "ItemSelector placeTreatItem  treatItem == " + treatItem + " : treatItem.type == " + treatItem.type + " : bandAidTarget == " + bandAidTarget);
	        switch (treatItem.type) {
	            case TreatItem_1.TreatItem.BANDAGE:
	                Logger_1.Logger.log(this, "ItemSelector placeTreatItem TreatItem.BANDAGE this.placedBandageItem == " + this.placedBandageItem);
	                if (this.placedBandageItem != null) {
	                    this.draggableObjectBandageTarget.removeChild(this.placedBandageItem);
	                    this.placedBandageItem = null;
	                }
	                this.placedBandageItem = treatItem;
	                this.draggableObjectBandageTarget.addChild(this.placedBandageItem);
	                Logger_1.Logger.log(this, "ItemSelector placeTreatItem TreatItem.BANDAGE this.placedBandageItem == " + this.placedBandageItem);
	                break;
	            case TreatItem_1.TreatItem.BAND_AID:
	                if (bandAidTarget == TreatItem_1.TreatItem.BAND_AID_TARGET_1) {
	                    if (this.placedBandAidItem_1 != null) {
	                        this.draggableObjectBandAidTarget_1.removeChild(this.placedBandAidItem_1);
	                        this.placedBandAidItem_1 = null;
	                    }
	                    this.placedBandAidItem_1 = treatItem;
	                    this.draggableObjectBandAidTarget_1.addChild(this.placedBandAidItem_1);
	                    break;
	                }
	                else if (bandAidTarget == TreatItem_1.TreatItem.BAND_AID_TARGET_2) {
	                    if (this.placedBandAidItem_2 != null) {
	                        this.draggableObjectBandAidTarget_2.removeChild(this.placedBandAidItem_2);
	                        this.placedBandAidItem_2 = null;
	                    }
	                    this.placedBandAidItem_2 = treatItem;
	                    this.draggableObjectBandAidTarget_2.addChild(this.placedBandAidItem_2);
	                    break;
	                }
	                else if (bandAidTarget == TreatItem_1.TreatItem.BAND_AID_TARGET_3) {
	                    if (this.placedBandAidItem_3 != null) {
	                        this.draggableObjectBandAidTarget_3.removeChild(this.placedBandAidItem_3);
	                        this.placedBandAidItem_3 = null;
	                    }
	                    this.placedBandAidItem_3 = treatItem;
	                    this.draggableObjectBandAidTarget_3.addChild(this.placedBandAidItem_3);
	                    break;
	                }
	                break;
	            case TreatItem_1.TreatItem.LEMONADE:
	                if (this.placedLemonadeItem != null) {
	                    this.draggableObjectGlassTarget.removeChild(this.placedLemonadeItem);
	                    this.placedLemonadeItem = null;
	                }
	                this.placedLemonadeItem = treatItem;
	                this.draggableObjectGlassTarget.addChild(this.placedLemonadeItem);
	                TweenLite.to(this.placedLemonadeItem, 1, { alpha: 0, delay: 1, onComplete: function () {
	                        _this.draggableObjectGlassTarget.visible = false;
	                    } });
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("drink_water", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                break;
	            default:
	                break;
	        }
	    };
	    ItemsSelector.prototype.updateTreatItemTargets = function (treatItem, active, delay) {
	        if (delay === void 0) { delay = false; }
	        switch (treatItem.type) {
	            case TreatItem_1.TreatItem.BANDAGE:
	                this.draggableObjectBandageTarget.visible = active || this.placedBandageItem != null;
	                break;
	            case TreatItem_1.TreatItem.BAND_AID:
	                this.draggableObjectBandAidTarget_1.visible = active || this.placedBandAidItem_1 != null;
	                this.draggableObjectBandAidTarget_2.visible = active || this.placedBandAidItem_2 != null;
	                this.draggableObjectBandAidTarget_3.visible = active || this.placedBandAidItem_3 != null;
	                if (active) {
	                    this.draggableObjectBandAidTarget_1.scale.x = this.draggableObjectBandAidTarget_1.scale.y = 1;
	                    this.draggableObjectBandAidTarget_2.scale.x = this.draggableObjectBandAidTarget_2.scale.y = 1;
	                    this.draggableObjectBandAidTarget_3.scale.x = this.draggableObjectBandAidTarget_3.scale.y = 1;
	                }
	                else {
	                }
	                break;
	            case TreatItem_1.TreatItem.LEMONADE:
	                if (delay) {
	                    this.draggableObjectGlassTarget.visible = true;
	                }
	                else {
	                    this.draggableObjectGlassTarget.visible = active;
	                }
	                break;
	            default:
	                break;
	        }
	    };
	    ItemsSelector.prototype.initNavigationButtons = function () {
	        this.btnPrevious.on(ButtonEvent_1.ButtonEvent.CLICKED, this.navigationButtonListener);
	        this.btnPrevious.padding = 50;
	    };
	    ItemsSelector.prototype.focusItems = function (firstItemIndex) {
	        if (this.items.length < 5) {
	            this.btnPrevious.visible = false;
	        }
	        if (this.focusedItem_1 != null) {
	            this.removeChild(this.focusedItem_1);
	            this.focusedItem_1 = null;
	        }
	        if (this.focusedItem_2 != null) {
	            this.removeChild(this.focusedItem_2);
	            this.focusedItem_2 = null;
	        }
	        if (this.focusedItem_3 != null) {
	            this.removeChild(this.focusedItem_3);
	            this.focusedItem_3 = null;
	        }
	        if (this.focusedItem_4 != null) {
	            this.removeChild(this.focusedItem_4);
	            this.focusedItem_4 = null;
	        }
	        this.focusedItem_1 = this.items[firstItemIndex];
	        if (this.focusedItem_1 != null) {
	            this.addChild(this.focusedItem_1);
	            this.focusedItem_1.x = this.offSetPosX - 270;
	            if (this.contentType == ItemsSelector.TREATS && this.focusedItem_1.type == TreatItem_1.TreatItem.LEMONADE) {
	                this.focusedItem_1.y = this.offSetPosY - 50;
	            }
	            else {
	                this.focusedItem_1.y = this.offSetPosY + 0;
	            }
	            this.focusedItem_1.initialPosition = new pixi_js_1.Point(this.focusedItem_1.x, this.focusedItem_1.y);
	        }
	        if (this.items.length > firstItemIndex + 1) {
	            this.focusedItem_2 = this.items[firstItemIndex + 1];
	        }
	        else {
	            this.focusedItem_2 = this.items[(firstItemIndex + 1) % this.items.length];
	        }
	        if (this.focusedItem_2 != null) {
	            this.addChild(this.focusedItem_2);
	            this.focusedItem_2.x = this.offSetPosX - 90;
	            if (this.contentType == ItemsSelector.TREATS && this.focusedItem_2.type == TreatItem_1.TreatItem.LEMONADE) {
	                this.focusedItem_2.y = this.offSetPosY - 50;
	            }
	            else {
	                this.focusedItem_2.y = this.offSetPosY + 0;
	            }
	            this.focusedItem_2.initialPosition = new pixi_js_1.Point(this.focusedItem_2.x, this.focusedItem_2.y);
	        }
	        if (this.items.length > firstItemIndex + 2) {
	            this.focusedItem_3 = this.items[firstItemIndex + 2];
	        }
	        else {
	            this.focusedItem_3 = this.items[(firstItemIndex + 2) % this.items.length];
	        }
	        if (this.focusedItem_3 != null) {
	            this.addChild(this.focusedItem_3);
	            this.focusedItem_3.x = this.offSetPosX + 90;
	            if (this.contentType == ItemsSelector.TREATS && this.focusedItem_3.type == TreatItem_1.TreatItem.LEMONADE) {
	                this.focusedItem_3.y = this.offSetPosY - 50;
	            }
	            else {
	                this.focusedItem_3.y = this.offSetPosY + 0;
	            }
	            this.focusedItem_3.initialPosition = new pixi_js_1.Point(this.focusedItem_3.x, this.focusedItem_3.y);
	        }
	        if (this.items.length > firstItemIndex + 3) {
	            this.focusedItem_4 = this.items[firstItemIndex + 3];
	        }
	        else {
	            this.focusedItem_4 = this.items[(firstItemIndex + 3) % this.items.length];
	        }
	        if (this.focusedItem_4 != null) {
	            this.addChild(this.focusedItem_4);
	            this.focusedItem_4.x = this.offSetPosX + 270;
	            if (this.contentType == ItemsSelector.TREATS && this.focusedItem_4.type == TreatItem_1.TreatItem.LEMONADE) {
	                this.focusedItem_4.y = this.offSetPosY - 50;
	            }
	            else {
	                this.focusedItem_4.y = this.offSetPosY + 0;
	            }
	            this.focusedItem_4.initialPosition = new pixi_js_1.Point(this.focusedItem_4.x, this.focusedItem_4.y);
	        }
	    };
	    ItemsSelector.prototype.createClothesItems = function () {
	        this.items = [];
	        var unlockedClothes = Config_1.Config.getUnlockedClothes();
	        for (var k = 0; k < unlockedClothes.length; k++) {
	            var nextClothesTextureBottom = unlockedClothes[k];
	            if (nextClothesTextureBottom.substr(0, 12) == "clothesLower") {
	                var clothesItemBottom = new ClothesItem_1.ClothesItem(nextClothesTextureBottom, ClothesItem_1.ClothesItem.BOTTOM);
	                this.items.push(clothesItemBottom);
	            }
	        }
	        for (var l = 0; l < unlockedClothes.length; l++) {
	            var nextClothesTextureTop = unlockedClothes[l];
	            if (nextClothesTextureTop.substr(0, 12) == "clothesUpper") {
	                var clothesItemTop = new ClothesItem_1.ClothesItem(nextClothesTextureTop, ClothesItem_1.ClothesItem.TOP);
	                this.items.push(clothesItemTop);
	            }
	        }
	    };
	    ItemsSelector.prototype.createTreatItems = function () {
	        this.items = [];
	        var unlockedBandages = Config_1.Config.getUnlockedBandages();
	        for (var i = 0; i < unlockedBandages.length; i++) {
	            var nextBandageTexture = unlockedBandages[i];
	            var nextBandage = new TreatItem_1.TreatItem(this, nextBandageTexture, TreatItem_1.TreatItem.BANDAGE, this.draggableObjectBandageTarget);
	            this.items.push(nextBandage);
	        }
	        var unlockedLemonades = Config_1.Config.getUnlockedLemonades();
	        for (var j = 0; j < unlockedLemonades.length; j++) {
	            var nextLemonadeTexture = unlockedLemonades[j];
	            var nextLemonade = new TreatItem_1.TreatItem(this, nextLemonadeTexture, TreatItem_1.TreatItem.LEMONADE, this.draggableObjectGlassTarget);
	            this.items.push(nextLemonade);
	        }
	        var unlockedBandAids = Config_1.Config.getUnlockedbandAids();
	        for (var k = 0; k < unlockedBandAids.length; k++) {
	            var nextBandAidTexture = unlockedBandAids[k];
	            var nextBandAid = new TreatItem_1.TreatItem(this, nextBandAidTexture, TreatItem_1.TreatItem.BAND_AID, this.draggableObjectBandAidTarget_1, this.draggableObjectBandAidTarget_2, this.draggableObjectBandAidTarget_3);
	            this.items.push(nextBandAid);
	        }
	    };
	    ItemsSelector.prototype.createTreatTargets = function () {
	        var draggableObjectBandageTargetImage = pixi_js_1.Sprite.fromFrame("forbinding_gips_01");
	        draggableObjectBandageTargetImage.alpha = ItemsSelector.DRAGGABLE_ON_ALPHA;
	        this.draggableObjectBandageTarget = new pixi_js_1.Sprite();
	        this.draggableObjectBandageTarget.addChild(draggableObjectBandageTargetImage);
	        draggableObjectBandageTargetImage.pivot.x = draggableObjectBandageTargetImage.width * .5;
	        draggableObjectBandageTargetImage.pivot.y = draggableObjectBandageTargetImage.height * .5;
	        this.addChild(this.draggableObjectBandageTarget);
	        this.draggableObjectBandageTarget.x = 480 - this.x;
	        this.draggableObjectBandageTarget.y = 523 - this.y;
	        this.draggableObjectBandageTarget.visible = false;
	        var draggableObjectGlassTargetImage = pixi_js_1.Sprite.fromFrame("saftevand_02");
	        draggableObjectGlassTargetImage.alpha = ItemsSelector.DRAGGABLE_ON_ALPHA;
	        this.draggableObjectGlassTarget = new pixi_js_1.Sprite();
	        this.draggableObjectGlassTarget.addChild(draggableObjectGlassTargetImage);
	        draggableObjectGlassTargetImage.pivot.x = draggableObjectGlassTargetImage.width * .5;
	        draggableObjectGlassTargetImage.pivot.y = draggableObjectGlassTargetImage.height * .5;
	        this.addChild(this.draggableObjectGlassTarget);
	        this.draggableObjectGlassTarget.x = 625 - this.x;
	        this.draggableObjectGlassTarget.y = 360 - this.y;
	        this.draggableObjectGlassTarget.visible = false;
	        var draggableObjectBandAidTargetImage = pixi_js_1.Sprite.fromFrame("plaster_01");
	        draggableObjectBandAidTargetImage.alpha = ItemsSelector.DRAGGABLE_ON_ALPHA;
	        this.draggableObjectBandAidTarget_1 = new pixi_js_1.Sprite();
	        this.draggableObjectBandAidTarget_1.addChild(draggableObjectBandAidTargetImage);
	        draggableObjectBandAidTargetImage.pivot.x = draggableObjectBandAidTargetImage.width * .5;
	        draggableObjectBandAidTargetImage.pivot.y = draggableObjectBandAidTargetImage.height * .5;
	        this.addChild(this.draggableObjectBandAidTarget_1);
	        this.draggableObjectBandAidTarget_1.x = 690 - this.x;
	        this.draggableObjectBandAidTarget_1.y = 504 - this.y;
	        this.draggableObjectBandAidTarget_1.visible = false;
	        var draggableObjectBandAidTargetImage_2 = pixi_js_1.Sprite.fromFrame("plaster_01");
	        draggableObjectBandAidTargetImage_2.alpha = ItemsSelector.DRAGGABLE_ON_ALPHA;
	        this.draggableObjectBandAidTarget_2 = new pixi_js_1.Sprite();
	        this.draggableObjectBandAidTarget_2.addChild(draggableObjectBandAidTargetImage_2);
	        draggableObjectBandAidTargetImage_2.pivot.x = draggableObjectBandAidTargetImage_2.width * .5;
	        draggableObjectBandAidTargetImage_2.pivot.y = draggableObjectBandAidTargetImage_2.height * .5;
	        this.addChild(this.draggableObjectBandAidTarget_2);
	        this.draggableObjectBandAidTarget_2.x = 550 - this.x;
	        this.draggableObjectBandAidTarget_2.y = 300 - this.y;
	        this.draggableObjectBandAidTarget_2.visible = false;
	        var draggableObjectBandAidTargetImage_3 = pixi_js_1.Sprite.fromFrame("plaster_01");
	        draggableObjectBandAidTargetImage_3.alpha = ItemsSelector.DRAGGABLE_ON_ALPHA;
	        this.draggableObjectBandAidTarget_3 = new pixi_js_1.Sprite();
	        this.draggableObjectBandAidTarget_3.addChild(draggableObjectBandAidTargetImage_3);
	        draggableObjectBandAidTargetImage_3.pivot.x = draggableObjectBandAidTargetImage_3.width * .5;
	        draggableObjectBandAidTargetImage_3.pivot.y = draggableObjectBandAidTargetImage_3.height * .5;
	        this.addChild(this.draggableObjectBandAidTarget_3);
	        this.draggableObjectBandAidTarget_3.x = 565 - this.x;
	        this.draggableObjectBandAidTarget_3.y = 700 - this.y;
	        this.draggableObjectBandAidTarget_3.visible = false;
	    };
	    ItemsSelector.prototype.createSelectorArt = function () {
	        this.background = pixi_js_1.Sprite.fromFrame("unlock_bg");
	        this.addChild(this.background);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.background.pivot.x = this.background.width * .5;
	        this.background.pivot.y = this.background.height * .5;
	        this.background.x = this._offSetPosX + this.background.width * .5 - 10;
	        this.background.y = this._offSetPosY + this.background.height * .5;
	        this.btnPrevious = new InflatableButton_1.InflatableButton();
	        this.btnPrevious.addTexture(pixi_js_1.Texture.fromFrame("unlock_leftArrow"));
	        this.addChild(this.btnPrevious);
	        this.btnPrevious.x = this._offSetPosX - this.background.width * .5;
	        this.btnPrevious.y = this._offSetPosY;
	    };
	    ItemsSelector.prototype.createBagButtons = function () {
	        var offSetPosY = 0;
	        if (this.contentType == ItemsSelector.CLOTHES) {
	            this.bagOpen = new Button_1.Button();
	            this.bagOpen.addTexture(pixi_js_1.Texture.fromFrame("kuffert_aaben"));
	            this.bagClosed = new Button_1.Button();
	            this.bagClosed.addTexture(pixi_js_1.Texture.fromFrame("kuffert_lukket"));
	        }
	        else if (this.contentType == ItemsSelector.TREATS) {
	            this.bagOpen = new Button_1.Button();
	            this.bagOpen.addTexture(pixi_js_1.Texture.fromFrame("laegetaske_aaben"));
	            this.bagClosed = new Button_1.Button();
	            this.bagClosed.addTexture(pixi_js_1.Texture.fromFrame("laegetaske_lukket"));
	            offSetPosY = this.bagClosed.height * .25;
	        }
	        this.addChild(this.bagOpen);
	        this.bagOpen.x = this._offSetPosX + this.background.width * .5;
	        this.bagOpen.y = this._offSetPosY + offSetPosY;
	        this.addChild(this.bagClosed);
	        this.bagClosed.x = this.bagOpen.x;
	        this.bagClosed.y = this.bagOpen.y;
	        this.bagOpen.on(ButtonEvent_1.ButtonEvent.CLICKED, this.bagPressed);
	        this.bagClosed.on(ButtonEvent_1.ButtonEvent.CLICKED, this.bagPressed);
	    };
	    ItemsSelector.prototype.destroy = function () {
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.bagOpen != null) {
	            this.removeChild(this.bagOpen);
	            this.bagOpen.off(ButtonEvent_1.ButtonEvent.CLICKED, this.bagPressed);
	            this.bagOpen = null;
	        }
	        if (this.bagClosed != null) {
	            this.removeChild(this.bagClosed);
	            this.bagClosed.off(ButtonEvent_1.ButtonEvent.CLICKED, this.bagPressed);
	            this.bagClosed = null;
	        }
	        if (this.btnPrevious != null) {
	            this.removeChild(this.btnPrevious);
	            this.btnPrevious.off(ButtonEvent_1.ButtonEvent.CLICKED, this.navigationButtonListener);
	            this.btnPrevious = null;
	        }
	        if (this.focusedItem_1 != null) {
	            this.removeChild(this.focusedItem_1);
	            this.focusedItem_1 = null;
	        }
	        if (this.focusedItem_2 != null) {
	            this.removeChild(this.focusedItem_2);
	            this.focusedItem_2 = null;
	        }
	        if (this.focusedItem_3 != null) {
	            this.removeChild(this.focusedItem_3);
	            this.focusedItem_3 = null;
	        }
	        if (this.focusedItem_4 != null) {
	            this.removeChild(this.focusedItem_4);
	            this.focusedItem_4 = null;
	        }
	        if (this.draggableObjectTarget != null) {
	            this.draggableObjectTarget = null;
	        }
	        if (this.draggableObjectBandageTarget != null) {
	            this.removeChild(this.draggableObjectBandageTarget);
	            this.draggableObjectBandageTarget = null;
	        }
	        if (this.draggableObjectGlassTarget != null) {
	            this.removeChild(this.draggableObjectGlassTarget);
	            this.draggableObjectGlassTarget.removeChildren();
	            this.draggableObjectGlassTarget = null;
	        }
	        if (this.draggableObjectBandAidTarget_1 != null) {
	            this.removeChild(this.draggableObjectBandAidTarget_1);
	            this.draggableObjectBandAidTarget_1.removeChildren();
	            this.draggableObjectBandAidTarget_1 = null;
	        }
	        if (this.draggableObjectBandAidTarget_2 != null) {
	            this.removeChild(this.draggableObjectBandAidTarget_2);
	            this.draggableObjectBandAidTarget_2.removeChildren();
	            this.draggableObjectBandAidTarget_2 = null;
	        }
	        if (this.draggableObjectBandAidTarget_3 != null) {
	            this.removeChild(this.draggableObjectBandAidTarget_3);
	            this.draggableObjectBandAidTarget_3.removeChildren();
	            this.draggableObjectBandAidTarget_3 = null;
	        }
	    };
	    return ItemsSelector;
	}(pixi_js_1.Sprite));
	ItemsSelector.DRAGGABLE_ON_ALPHA = 0.5;
	ItemsSelector.CLOTHES = "appdrhospital.view.objects.ItemsSelector.clothes";
	ItemsSelector.TREATS = "appdrhospital.view.objects.ItemsSelector.treats";
	ItemsSelector.CLOSED = "appdrhospital.view.objects.ItemsSelector.CLOSED";
	ItemsSelector.OPEN = "appdrhospital.view.objects.ItemsSelector.OPEN";
	ItemsSelector.OPEN_BAG_ONLY = "appdrhospital.view.objects.ItemsSelector.OPEN_BAG_ONLY";
	ItemsSelector.OPENED = "appdrhospital.view.objects.ItemsSelector.OPENED";
	ItemsSelector.HAS_CLOSED = "appdrhospital.view.objects.ItemsSelector.HAS_CLOSED";
	exports.ItemsSelector = ItemsSelector;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Button_1 = __webpack_require__(21);
	var InflatableButton = (function (_super) {
	    __extends(InflatableButton, _super);
	    function InflatableButton() {
	        return _super.call(this) || this;
	    }
	    Object.defineProperty(InflatableButton.prototype, "padding", {
	        get: function () {
	            return this._padding;
	        },
	        set: function (value) {
	            this._padding = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    InflatableButton.prototype.hitTest = function (localPoint, forTouch) {
	        if (forTouch === void 0) { forTouch = false; }
	        if (forTouch && (!this.visible || !this.touchable)) {
	            return null;
	        }
	        return null;
	    };
	    return InflatableButton;
	}(Button_1.Button));
	exports.InflatableButton = InflatableButton;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var DraggableItem_1 = __webpack_require__(27);
	var Config_1 = __webpack_require__(6);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var ItemsSelector_1 = __webpack_require__(24);
	var HospitalEvent_1 = __webpack_require__(9);
	var pixi_js_1 = __webpack_require__(8);
	var SpriteHelper_1 = __webpack_require__(29);
	var Logger_1 = __webpack_require__(3);
	var AssetLoader_1 = __webpack_require__(7);
	var AudioPlayer_1 = __webpack_require__(10);
	var HospitalGameView_1 = __webpack_require__(13);
	var TreatItem = (function (_super) {
	    __extends(TreatItem, _super);
	    function TreatItem(itemsSelector, treatTexture, type, draggableObjectTarget_1, draggableObjectTarget_2, draggableObjectTarget_3, interactive) {
	        if (type === void 0) { type = TreatItem.BANDAGE; }
	        if (draggableObjectTarget_1 === void 0) { draggableObjectTarget_1 = null; }
	        if (draggableObjectTarget_2 === void 0) { draggableObjectTarget_2 = null; }
	        if (draggableObjectTarget_3 === void 0) { draggableObjectTarget_3 = null; }
	        if (interactive === void 0) { interactive = true; }
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            Logger_1.Logger.log(_this, "TreatItem touchDown  event.type == " + event.type);
	            _this.mouseDown = true;
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            _this.removeChild(_this.treatImage);
	            _this.addChild(_this.specificTreatImage);
	            var parentItem = _this.parent;
	            parentItem.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	            parentItem.updateTreatItemTargets(_this, true);
	            if (_this.draggableObjectTarget_1 != null) {
	                Logger_1.Logger.log(_this, "TreatItem touchDown  this.draggableObjectTarget_1 == " + _this.draggableObjectTarget_1 + " : SpriteHelper.hitTest(this.getBounds(), this.draggableObjectTarget_1.getBounds()) == " + SpriteHelper_1.SpriteHelper.hitTest(_this.rectCover.getBounds(), _this.draggableObjectTarget_1.getBounds()));
	            }
	            _this.visible = true;
	            Logger_1.Logger.log(_this, "TreatItem touchDown  this.x == " + _this.x + " : this.y == " + _this.y);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var parentItem = _this.parent;
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = mousePositionCanvas.x - parentItem.x;
	                _this.y = mousePositionCanvas.y - parentItem.y;
	                _this.checkCollisionWithTarget();
	            }
	        };
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "TreatItem touchDone  event.type == " + event.type);
	            _this.mouseDown = false;
	            var hit1 = (_this.draggableObjectTarget_1 != null && SpriteHelper_1.SpriteHelper.hitTest(_this.rectCover.getBounds(), _this.draggableObjectTarget_1.getBounds()));
	            var hit2 = (_this.draggableObjectTarget_2 != null && SpriteHelper_1.SpriteHelper.hitTest(_this.rectCover.getBounds(), _this.draggableObjectTarget_2.getBounds()));
	            var hit3 = (_this.draggableObjectTarget_3 != null && SpriteHelper_1.SpriteHelper.hitTest(_this.rectCover.getBounds(), _this.draggableObjectTarget_3.getBounds()));
	            Logger_1.Logger.log(_this, "TreatItem touchDone  hit1 == " + hit1);
	            Logger_1.Logger.log(_this, "TreatItem touchDone  hit2 == " + hit2);
	            Logger_1.Logger.log(_this, "TreatItem touchDone  hit3 == " + hit3);
	            if (hit1) {
	                _this.draggableObjectTarget_1.alpha = 1;
	                if (_this._type == TreatItem.LEMONADE) {
	                    TweenLite.to(_this, 0.5, { x: _this.draggableObjectTarget_1.x, y: _this.draggableObjectTarget_1.y, onComplete: _this.onSnappedToTarget });
	                }
	                else if (_this._type == TreatItem.BAND_AID) {
	                    TweenLite.to(_this, 0.5, { x: _this.draggableObjectTarget_1.x, y: _this.draggableObjectTarget_1.y, onComplete: _this.onSnappedToTarget, onCompleteParams: [TreatItem.BAND_AID_TARGET_1] });
	                    TweenLite.to(_this.draggableObjectTarget_1, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                    TweenLite.to(_this.draggableObjectTarget_2, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                    TweenLite.to(_this.draggableObjectTarget_3, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound("gips", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	                }
	                else {
	                    TweenLite.to(_this, 0.5, { x: _this.draggableObjectTarget_1.x, y: _this.draggableObjectTarget_1.y, onComplete: _this.onSnappedToTarget });
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound("gips", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	                }
	                _this.alpha = 0;
	                TweenLite.to(_this, .3, { alpha: 1 });
	            }
	            else if (hit2) {
	                _this.draggableObjectTarget_2.alpha = 1;
	                TweenLite.to(_this, 0.5, { x: _this.draggableObjectTarget_2.x, y: _this.draggableObjectTarget_2.y, onComplete: _this.onSnappedToTarget, onCompleteParams: [TreatItem.BAND_AID_TARGET_2] });
	                TweenLite.to(_this.draggableObjectTarget_1, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                TweenLite.to(_this.draggableObjectTarget_2, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                TweenLite.to(_this.draggableObjectTarget_3, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("gips", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	                _this.alpha = 0;
	                TweenLite.to(_this, .3, { alpha: 1 });
	            }
	            else if (hit3) {
	                _this.draggableObjectTarget_3.alpha = 1;
	                TweenLite.to(_this, 0.5, { x: _this.draggableObjectTarget_3.x, y: _this.draggableObjectTarget_3.y, onComplete: _this.onSnappedToTarget, onCompleteParams: [TreatItem.BAND_AID_TARGET_3] });
	                TweenLite.to(_this.draggableObjectTarget_1, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                TweenLite.to(_this.draggableObjectTarget_2, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                TweenLite.to(_this.draggableObjectTarget_3, 0.5, { scaleX: 0.3, scaleY: 0.3, delay: 0.5 });
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("gips", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	                _this.alpha = 0;
	                TweenLite.to(_this, .3, { alpha: 1 });
	            }
	            else {
	                TweenLite.to(_this, .3, { x: _this._initialPosition.x, y: _this._initialPosition.y });
	                _this.removeChild(_this.specificTreatImage);
	                _this.addChild(_this.treatImage);
	                var parentItem = _this.parent;
	                parentItem.setState(ItemsSelector_1.ItemsSelector.OPEN);
	                parentItem.updateTreatItemTargets(_this, false);
	                if (_this._type == TreatItem.BAND_AID) {
	                    _this.draggableObjectTarget_1.scale.x = _this.draggableObjectTarget_1.scale.y = 0.3;
	                    _this.draggableObjectTarget_2.scale.x = _this.draggableObjectTarget_2.scale.y = 0.3;
	                    _this.draggableObjectTarget_3.scale.x = _this.draggableObjectTarget_3.scale.y = 0.3;
	                }
	            }
	        };
	        _this.onSnappedToTarget = function (bandAidTarget) {
	            if (bandAidTarget === void 0) { bandAidTarget = ""; }
	            Logger_1.Logger.log(_this, "TreatItem onSnappedToTarget");
	            _this.emit(HospitalEvent_1.HospitalEvent.BANDAGE_PLACED);
	            var clone = new TreatItem(_this.itemsSelector, _this._treatTexture, _this._type, null, null, null, false);
	            clone.touchable = false;
	            clone.showSpecificTreatImage();
	            var itemSelector = _this.parent;
	            itemSelector.placeTreatItem(clone, bandAidTarget);
	            _this.x = _this._initialPosition.x;
	            _this.y = _this._initialPosition.y;
	            _this.scale.x = _this.scale.y = 1;
	            _this.removeChild(_this.specificTreatImage);
	            _this.addChild(_this.treatImage);
	            itemSelector.setState(ItemsSelector_1.ItemsSelector.OPEN);
	            itemSelector.updateTreatItemTargets(_this, false, _this._type == TreatItem.LEMONADE);
	        };
	        _this.itemsSelector = itemsSelector;
	        _this._type = type;
	        _this._treatTexture = treatTexture;
	        _this.draggableObjectTarget_1 = draggableObjectTarget_1;
	        _this.draggableObjectTarget_2 = draggableObjectTarget_2;
	        _this.draggableObjectTarget_3 = draggableObjectTarget_3;
	        _this._initialPosition = new pixi_js_1.Point(_this.itemsSelector.offSetPosX, _this.itemsSelector.offSetPosY);
	        _this.treatImage = pixi_js_1.Sprite.fromFrame(treatTexture);
	        _this.addChild(_this.treatImage);
	        _this.treatImage.pivot.x = _this.treatImage.width * .5;
	        _this.treatImage.pivot.y = _this.treatImage.height * .5;
	        var specificBandageImageTexture;
	        if (_this._type == TreatItem.BANDAGE) {
	            specificBandageImageTexture = "forbinding_gips_" + _this.treatTexture.substr(_this.treatTexture.length - 2, 2);
	        }
	        else {
	            specificBandageImageTexture = _this.treatTexture;
	        }
	        _this.specificTreatImage = pixi_js_1.Sprite.fromFrame(specificBandageImageTexture);
	        _this.specificTreatImage.pivot.x = _this.specificTreatImage.width * .5;
	        _this.specificTreatImage.pivot.y = _this.specificTreatImage.height * .5;
	        if (interactive) {
	            _this.rectCover = new pixi_js_1.Graphics();
	            _this.rectCover.beginFill(0xFF4444);
	            _this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	            _this.addChild(_this.rectCover);
	            _this.rectCover.drawRect(_this.treatImage.x, _this.treatImage.y, _this.treatImage.width, _this.treatImage.height);
	            _this.rectCover.pivot.x = _this.treatImage.width * .5;
	            _this.rectCover.pivot.y = _this.treatImage.height * .5;
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, _this.touchDone);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	        }
	        return _this;
	    }
	    TreatItem.prototype.showSpecificTreatImage = function () {
	        Logger_1.Logger.log(this, "TreatItem showSpecificTreatImage");
	        this.removeChild(this.treatImage);
	        this.addChild(this.specificTreatImage);
	    };
	    TreatItem.prototype.checkCollisionWithTarget = function () {
	        var itemSelector = this.parent;
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget");
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  this.draggableObjectTarget_1 == " + this.draggableObjectTarget_1);
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  itemSelector.x == " + itemSelector.x + " : itemSelector.y == " + itemSelector.y);
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  this.draggableObjectTarget_1.x == " + this.draggableObjectTarget_1.x + " : this.draggableObjectTarget_1.y == " + this.draggableObjectTarget_1.y);
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  this.rectCover.getBounds() == " + this.rectCover.getBounds().x + " : " + this.rectCover.getBounds().y + " : " + this.rectCover.getBounds().width + " : " + this.rectCover.getBounds().height);
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  this.draggableObjectTarget_1.getBounds() == " + this.draggableObjectTarget_1.getBounds().x + " : " + this.draggableObjectTarget_1.getBounds().y + " : " + this.draggableObjectTarget_1.getBounds().width + " : " + this.draggableObjectTarget_1.getBounds().height);
	        Logger_1.Logger.log(this, "TreatItem checkCollisionWithTarget  SpriteHelper.hitTest(this.rectCover.getBounds(), this.draggableObjectTarget_1.getBounds()) == " + SpriteHelper_1.SpriteHelper.hitTest(this.rectCover.getBounds(), this.draggableObjectTarget_1.getBounds()));
	        if (SpriteHelper_1.SpriteHelper.hitTest(this.rectCover.getBounds(), this.draggableObjectTarget_1.getBounds())) {
	            this.draggableObjectTarget_1.alpha = 0.6;
	        }
	        else {
	            this.draggableObjectTarget_1.alpha = 1;
	        }
	        if (this.draggableObjectTarget_2) {
	            if (SpriteHelper_1.SpriteHelper.hitTest(this.rectCover.getBounds(), this.draggableObjectTarget_2.getBounds())) {
	                this.draggableObjectTarget_2.alpha = 0.6;
	            }
	            else {
	                this.draggableObjectTarget_2.alpha = 1;
	            }
	        }
	        if (this.draggableObjectTarget_3) {
	            if (SpriteHelper_1.SpriteHelper.hitTest(this.rectCover.getBounds(), this.draggableObjectTarget_3.getBounds())) {
	                this.draggableObjectTarget_3.alpha = 0.6;
	            }
	            else {
	                this.draggableObjectTarget_3.alpha = 1;
	            }
	        }
	    };
	    Object.defineProperty(TreatItem.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreatItem.prototype, "treatTexture", {
	        get: function () {
	            return this._treatTexture;
	        },
	        set: function (value) {
	            this._treatTexture = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreatItem.prototype.destroy = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    return TreatItem;
	}(DraggableItem_1.DraggableItem));
	TreatItem.BANDAGE = "appdrhospital.view.operatingroom.objects.TreatItem.BANDAGE";
	TreatItem.BAND_AID = "appdrhospital.view.operatingroom.objects.TreatItem.BAND_AID";
	TreatItem.LEMONADE = "appdrhospital.view.operatingroom.objects.TreatItem.LEMONADE";
	TreatItem.BAND_AID_TARGET_1 = "appdrhospital.view.operatingroom.objects.TreatItem.TARGET_1";
	TreatItem.BAND_AID_TARGET_2 = "appdrhospital.view.operatingroom.objects.TreatItem.TARGET_2";
	TreatItem.BAND_AID_TARGET_3 = "appdrhospital.view.operatingroom.objects.TreatItem.TARGET_3";
	TreatItem.DRAGGABLE_OBJECT_TOUCH_OFFSET = 100;
	exports.TreatItem = TreatItem;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var DraggableItem = (function (_super) {
	    __extends(DraggableItem, _super);
	    function DraggableItem() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        return _this;
	    }
	    Object.defineProperty(DraggableItem.prototype, "initialPosition", {
	        get: function () {
	            return this._initialPosition;
	        },
	        set: function (value) {
	            this._initialPosition = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DraggableItem;
	}(pixi_js_1.Sprite));
	exports.DraggableItem = DraggableItem;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var EventEmitter = pixi_js_1.utils.EventEmitter;
	var TouchEvent = (function (_super) {
	    __extends(TouchEvent, _super);
	    function TouchEvent(type, touchedItem, bubbles, data) {
	        if (bubbles === void 0) { bubbles = false; }
	        if (data === void 0) { data = null; }
	        var _this = _super.call(this) || this;
	        _this.getTouch = function (target, phase) {
	            if (phase === void 0) { phase = null; }
	            var toReturn;
	            _this.getTouches(target, phase, TouchEvent.sTouches);
	            Logger_1.Logger.log(_this, "TouchEvent getTouch TouchEvent.sTouches.length == " + TouchEvent.sTouches.length);
	            if (TouchEvent.sTouches.length) {
	                var touch = TouchEvent.sTouches[0];
	                TouchEvent.sTouches.length = 0;
	                toReturn = touch;
	            }
	            return toReturn;
	        };
	        _this.type = type;
	        _this.touchedItem = touchedItem;
	        _this.mBubbles = bubbles;
	        _this.mData = data;
	        Logger_1.Logger.log(_this, "TouchEvent constructor  type == " + type);
	        return _this;
	    }
	    Object.defineProperty(TouchEvent.prototype, "dataObject", {
	        get: function () {
	            return this.mData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TouchEvent.prototype.getTouches = function (target, phase, result) {
	        if (phase === void 0) { phase = null; }
	        if (result === void 0) { result = null; }
	        if (result == null) {
	            result = [];
	        }
	        var allTouches = this.dataObject;
	        var numTouches = allTouches.length;
	        for (var i = 0; i < numTouches; ++i) {
	            var touch = allTouches[i];
	            var correctTarget = touch.isTouching(target);
	            var correctPhase = (phase == null || phase == touch.phase);
	            if (correctTarget && correctPhase)
	                result.push(touch);
	        }
	        return result;
	    };
	    TouchEvent.prototype.stopPropagation = function () {
	    };
	    Object.defineProperty(TouchEvent.prototype, "touches", {
	        get: function () {
	            return this.dataObject.concat();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TouchEvent;
	}(EventEmitter));
	TouchEvent.TOUCH = "pointerdown";
	TouchEvent.TOUCH_END = "pointerup";
	TouchEvent.TOUCH_OUT = "pointerout";
	TouchEvent.TOUCH_MOVE = "pointermove";
	TouchEvent.sTouches = [];
	exports.TouchEvent = TouchEvent;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var SpriteHelper = (function (_super) {
	    __extends(SpriteHelper, _super);
	    function SpriteHelper() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SpriteHelper.hitTest = function (s1, s2) {
	        var hit;
	        if ((s1.x - s1.width * .5) + (s1.width * .5) > (s2.x - s2.width * .5)) {
	            if ((s1.x - s1.width * .5) < (s2.x - s2.width * .5) + (s2.width * .5)) {
	                if ((s1.y - s1.height * .5) + (s1.height * .5) > (s2.y - s2.height * .5)) {
	                    if ((s1.y - s1.height * .5) < (s2.y - s2.height * .5) + (s2.height * .5)) {
	                        hit = true;
	                    }
	                }
	            }
	        }
	        return hit;
	    };
	    SpriteHelper.prototype.checkCollision = function (obj1, obj2) {
	        return false;
	    };
	    return SpriteHelper;
	}(pixi_js_1.Sprite));
	exports.SpriteHelper = SpriteHelper;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var DraggableItem_1 = __webpack_require__(27);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var Logger_1 = __webpack_require__(3);
	var ItemsSelector_1 = __webpack_require__(24);
	var Config_1 = __webpack_require__(6);
	var pixi_js_1 = __webpack_require__(8);
	var AssetLoader_1 = __webpack_require__(7);
	var SpriteHelper_1 = __webpack_require__(29);
	var ClothesItem = (function (_super) {
	    __extends(ClothesItem, _super);
	    function ClothesItem(clothesTexture, type) {
	        var _this = _super.call(this) || this;
	        _this.DRAGGABLE_OBJECT_TOUCH_OFFSET = -100;
	        _this.touchDown = function (event) {
	            Logger_1.Logger.log(_this, "ClothesItem touchDown  event.type == " + event.type);
	            _this.mouseDown = true;
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            var parentItem = _this.parent;
	            parentItem.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	            _this.visible = true;
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var parentItem = _this.parent;
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = mousePositionCanvas.x - parentItem.x;
	                _this.y = mousePositionCanvas.y - parentItem.y;
	                _this.checkCollisionWithPatients();
	            }
	        };
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "ClothesItem touchDone  event.type == " + event.type);
	            _this.mouseDown = false;
	            var patientCollided = _this.getCollidedPatient();
	            if (patientCollided) {
	                patientCollided.setClothes(_this._clothesTexture, _this._type);
	                patientCollided.alpha = 1;
	                _this.x = _this._initialPosition.x;
	                _this.y = _this._initialPosition.y;
	                _this.alpha = 0;
	                TweenLite.to(_this, .3, { alpha: 1 });
	            }
	            else {
	                TweenLite.to(_this, .3, { x: _this._initialPosition.x, y: _this._initialPosition.y });
	            }
	            var parentItem = _this.parent;
	            parentItem.setState(ItemsSelector_1.ItemsSelector.OPEN);
	        };
	        _this.type = type;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.clothesTexture = clothesTexture;
	        _this.clothesImage = pixi_js_1.Sprite.fromFrame(clothesTexture);
	        _this.addChild(_this.clothesImage);
	        _this.clothesImage.scale.x = _this.clothesImage.scale.y = ClothesItem.CLOTHES_IMAGE_SCALE;
	        _this.clothesImage.x = -_this.clothesImage.width / 2;
	        _this.clothesImage.y = -_this.clothesImage.height / 2;
	        _this.on(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	        _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	        _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	        return _this;
	    }
	    ClothesItem.prototype.audioHelpSpeakComplete = function (event) {
	    };
	    ClothesItem.prototype.checkCollisionWithPatients = function () {
	        var hit1;
	        var mouseOverAlpha = 0.6;
	        hit1 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_1);
	        if (Config_1.Config.patientWaitingInSlot_1 && hit1) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_1.currentTopClothes.alpha = mouseOverAlpha;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_1.currentBottomClothes.alpha = mouseOverAlpha;
	        }
	        else if (Config_1.Config.patientWaitingInSlot_1) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_1.currentTopClothes.alpha = 1;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_1.currentBottomClothes.alpha = 1;
	        }
	        var hit2;
	        hit2 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_2);
	        if (Config_1.Config.patientWaitingInSlot_2 && hit2) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_2.currentTopClothes.alpha = mouseOverAlpha;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_2.currentBottomClothes.alpha = mouseOverAlpha;
	        }
	        else if (Config_1.Config.patientWaitingInSlot_2) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_2.currentTopClothes.alpha = 1;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_2.currentBottomClothes.alpha = 1;
	        }
	        var hit3;
	        hit3 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_3);
	        if (Config_1.Config.patientWaitingInSlot_3 && hit3) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_3.currentTopClothes.alpha = mouseOverAlpha;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_3.currentBottomClothes.alpha = mouseOverAlpha;
	        }
	        else if (Config_1.Config.patientWaitingInSlot_3) {
	            if (this.type == ClothesItem.TOP)
	                Config_1.Config.patientWaitingInSlot_3.currentTopClothes.alpha = 1;
	            if (this.type == ClothesItem.BOTTOM)
	                Config_1.Config.patientWaitingInSlot_3.currentBottomClothes.alpha = 1;
	        }
	    };
	    ClothesItem.prototype.getCollidedPatient = function () {
	        var hit1;
	        hit1 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_1);
	        var hit2;
	        hit2 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_2);
	        var hit3;
	        hit3 = SpriteHelper_1.SpriteHelper.hitTest(this.getBounds(), Config_1.Config.patientWaitingInSlot_3);
	        if (Config_1.Config.patientWaitingInSlot_1 && hit1) {
	            return Config_1.Config.patientWaitingInSlot_1;
	        }
	        else if (Config_1.Config.patientWaitingInSlot_2 && hit2) {
	            return Config_1.Config.patientWaitingInSlot_2;
	        }
	        else if (Config_1.Config.patientWaitingInSlot_3 && hit3) {
	            return Config_1.Config.patientWaitingInSlot_3;
	        }
	        return null;
	    };
	    Object.defineProperty(ClothesItem.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClothesItem.prototype, "clothesTexture", {
	        get: function () {
	            return this._clothesTexture;
	        },
	        set: function (value) {
	            this._clothesTexture = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ClothesItem;
	}(DraggableItem_1.DraggableItem));
	ClothesItem.TOP = "appdrhospital.view.waitingroom.objects.ClothesItem.TOP";
	ClothesItem.BOTTOM = "appdrhospital.view.waitingroom.objects.ClothesItem.BOTTOM";
	ClothesItem.NUM_OF_TOP_CLOTHES_ITEMS = 6;
	ClothesItem.NUM_OF_BOTTOM_CLOTHES_ITEMS = 6;
	ClothesItem.CLOTHES_IMAGE_SCALE = 0.8;
	exports.ClothesItem = ClothesItem;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Logger_1 = __webpack_require__(3);
	var ScannerButton_1 = __webpack_require__(32);
	var Level_1 = __webpack_require__(22);
	var Config_1 = __webpack_require__(6);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var AssetLoader_1 = __webpack_require__(7);
	var pixi_js_1 = __webpack_require__(8);
	var AudioPlayer_1 = __webpack_require__(10);
	var HospitalGameView_1 = __webpack_require__(13);
	var Scanner = (function (_super) {
	    __extends(Scanner, _super);
	    function Scanner() {
	        var _this = _super.call(this) || this;
	        _this.inactiveTouchListener = function (event) {
	            Logger_1.Logger.log(_this, "Scanner inactiveTouchListener");
	            _this.clickedOnce = true;
	            _this.inactiveImage.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.inactiveTouchListener);
	            _this.rectCover.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.inactiveTouchListener);
	            _this.inactiveImage.visible = false;
	            _this.rectCover.visible = false;
	            _this.stopHighlightInactive();
	            _this.background.visible = true;
	            _this.btnSkeletal.visible = true;
	            _this.btnMuscular.visible = true;
	            _this.btnDigestive.visible = true;
	            _this.btnRespiratoryAndUrinary.visible = true;
	            _this.btnCardioVascular.visible = true;
	            _this.btnNervous.visible = true;
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, _this.touchDone);
	            _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	            _this._layerToMask.visible = true;
	            _this.addMaskRect();
	        };
	        _this.touchDown = function (event) {
	            Logger_1.Logger.log(_this, "Scanner touchDown  this.x == " + _this.x + " : this.y == " + _this.y);
	            _this.mouseDown = true;
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            _this.visible = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            Logger_1.Logger.log(_this, "Scanner touchDown  mousePositionCanvas.x == " + mousePositionCanvas.x + " : mousePositionCanvas.y == " + mousePositionCanvas.y);
	            _this.offsetPoint = new pixi_js_1.Point((mousePositionCanvas.x - _this.x), (mousePositionCanvas.y - _this.y));
	            _this.x = mousePositionCanvas.x - _this.offsetPoint.x;
	            _this.y = mousePositionCanvas.y - _this.offsetPoint.y;
	            _this.addMaskRect();
	            _this.layerToMask.mask = _this.maskRect;
	            _this.scannerSound = AudioPlayer_1.AudioPlayer.getInstance().playSound("scanner_loop", 999, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = mousePositionCanvas.x - _this.offsetPoint.x;
	                _this.y = mousePositionCanvas.y - _this.offsetPoint.y;
	                _this.addMaskRect();
	                _this.layerToMask.mask = _this.maskRect;
	            }
	        };
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "Scanner touchDone  event.type == " + event.type);
	            _this.mouseDown = false;
	            if (_this.scannerSound != null) {
	                _this.scannerSound.stop();
	            }
	            _this.layerToMask.mask = _this.maskRect;
	        };
	        _this.btnPressedListener = function (data) {
	            var btnPressed = data;
	            Logger_1.Logger.log(_this, "Scanner btnPressedListener      btnPressed ==== " + btnPressed);
	            Logger_1.Logger.log(_this, "Scanner btnPressedListener      btnPressed.name ==== " + btnPressed.name);
	            if (btnPressed.alpha < 1) {
	                if (Config_1.Config.currentSpeakSound != "mille_hov_den_er_last") {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_hov_den_er_last";
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	                return;
	            }
	            _this.playNoiseClip();
	            switch (btnPressed.name) {
	                case "btnSkeletal":
	                    _this.state = Scanner.SKELETAL;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_aargh_et_skelet";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                case "btnMuscular":
	                    _this.state = Scanner.MUSCULAR;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_sikke_et_muskel_bundt";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                case "btnCardioVascular":
	                    _this.state = Scanner.CARDIOVASCULAR;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_noj_der_er_blodbaner_blodet_lober_frem";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                case "btnDigestive":
	                    _this.state = Scanner.DIGESTIVE;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_vildt_er_det_tarmene";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                case "btnRespiratoryAndUrinary":
	                    _this.state = Scanner.RESPIRATORY_AND_UNINARY;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_der_er_tis_inde_i_de_to_lange_ror";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                case "btnNervous":
	                    _this.state = Scanner.NERVOUS;
	                    setTimeout(function () {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_wow_der_er_hjernen";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }, 1000);
	                    break;
	                default:
	                    break;
	            }
	            _this.emit("change");
	        };
	        _this.audioNoiseComplete = function (event) {
	            _this.noiseScreen.visible = false;
	            _this.noiseClip.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioNoiseComplete);
	        };
	        _this.onAddedToStage();
	        return _this;
	    }
	    Scanner.prototype.onAddedToStage = function () {
	        Logger_1.Logger.log(this, "Scanner onAddedToStage");
	        this.interactive = true;
	        this.buttonMode = true;
	        this.createScannerArt();
	        this.inactiveImage.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.inactiveTouchListener);
	        this.rectCover.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.inactiveTouchListener);
	    };
	    Object.defineProperty(Scanner.prototype, "hotspot", {
	        set: function (value) {
	            Logger_1.Logger.log(this, "Scanner set hotspot   value == " + value);
	            this._hotspot = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scanner.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scanner.prototype.createPatientLayerToDiseaseMap = function () {
	        this.patientLayerToDiseaseMap = {};
	        this.patientLayerToDiseaseMap[Level_1.Level.FRACTURE_HAND] = Scanner.SKELETAL;
	        this.patientLayerToDiseaseMap[Level_1.Level.FRACTURE_RADIUS] = Scanner.SKELETAL;
	        this.patientLayerToDiseaseMap[Level_1.Level.SPRAIN] = Scanner.MUSCULAR;
	        this.patientLayerToDiseaseMap[Level_1.Level.PNEUMONIA] = Scanner.RESPIRATORY_AND_UNINARY;
	        this.patientLayerToDiseaseMap[Level_1.Level.POISONING] = Scanner.DIGESTIVE;
	    };
	    Scanner.prototype.update = function () {
	        Logger_1.Logger.log(this, "Scanner update");
	        Logger_1.Logger.log(this, "Scanner update this.btnSkeletal == " + this.btnSkeletal);
	        Logger_1.Logger.log(this, "Scanner update this.btnMuscular == " + this.btnMuscular);
	        Logger_1.Logger.log(this, "Scanner update this.btnCardioVascular == " + this.btnCardioVascular);
	        Logger_1.Logger.log(this, "Scanner update this.btnDigestive == " + this.btnDigestive);
	        Logger_1.Logger.log(this, "Scanner update this.btnRespiratoryAndUrinary == " + this.btnRespiratoryAndUrinary);
	        Logger_1.Logger.log(this, "Scanner update this.btnNervous == " + this.btnNervous);
	        Logger_1.Logger.log(this, "Scanner update Config.patientsCured == " + Config_1.Config.patientsCured);
	        if (this.btnSkeletal != null) {
	            this.disableButton(this.btnSkeletal);
	        }
	        if (this.btnMuscular != null) {
	            this.disableButton(this.btnMuscular);
	        }
	        if (this.btnCardioVascular != null) {
	            this.disableButton(this.btnCardioVascular);
	        }
	        if (this.btnDigestive != null) {
	            this.disableButton(this.btnDigestive);
	        }
	        if (this.btnRespiratoryAndUrinary != null) {
	            this.disableButton(this.btnRespiratoryAndUrinary);
	        }
	        if (this.btnNervous != null) {
	            this.disableButton(this.btnNervous);
	        }
	        for (var i = 0; i <= Config_1.Config.patientsCured; i++) {
	            if (i >= Config_1.Config.levels.length) {
	                continue;
	            }
	            if (Config_1.Config.levels[i].unlockedTools[0]) {
	                this.enableMode(Config_1.Config.levels[i].unlockedTools[0]);
	            }
	        }
	    };
	    Scanner.prototype.enableMode = function (mode) {
	        switch (mode) {
	            case Scanner.SKELETAL:
	                this.enableButton(this.btnSkeletal);
	                break;
	            case Scanner.MUSCULAR:
	                this.enableButton(this.btnMuscular);
	                break;
	            case Scanner.DIGESTIVE:
	                this.enableButton(this.btnDigestive);
	                break;
	            case Scanner.RESPIRATORY_AND_UNINARY:
	                this.enableButton(this.btnRespiratoryAndUrinary);
	                break;
	            case Scanner.CARDIOVASCULAR:
	                this.enableButton(this.btnCardioVascular);
	                break;
	            case Scanner.NERVOUS:
	                this.enableButton(this.btnNervous);
	                break;
	            default:
	                break;
	        }
	    };
	    Scanner.prototype.highlightButton = function (mode, unlockedMode) {
	        if (mode === void 0) { mode = ""; }
	        if (unlockedMode === void 0) { unlockedMode = false; }
	        Logger_1.Logger.log(this, "Scanner highlightButton mode == " + mode + " : unlockedMode == " + unlockedMode);
	        switch (mode) {
	            case Scanner.SKELETAL:
	                this.btnSkeletal.highlight();
	                break;
	            case Scanner.MUSCULAR:
	                this.btnMuscular.highlight();
	                break;
	            case Scanner.DIGESTIVE:
	                this.btnDigestive.highlight();
	                break;
	            case Scanner.RESPIRATORY_AND_UNINARY:
	                this.btnRespiratoryAndUrinary.highlight();
	                break;
	            case Scanner.CARDIOVASCULAR:
	                this.btnCardioVascular.highlight();
	                break;
	            case Scanner.NERVOUS:
	                this.btnNervous.highlight();
	                break;
	            default:
	                break;
	        }
	    };
	    Scanner.prototype.setUnlockedMode = function () {
	        this.inactiveImage.visible = false;
	        this.stopHighlightInactive();
	        this.background.visible = true;
	        this.btnSkeletal.visible = true;
	        this.btnMuscular.visible = true;
	        this.btnDigestive.visible = true;
	        this.btnRespiratoryAndUrinary.visible = true;
	        this.btnCardioVascular.visible = true;
	        this.btnNervous.visible = true;
	        this._layerToMask.visible = true;
	    };
	    Scanner.prototype.disableButton = function (btn) {
	        btn.alpha = 0.3;
	    };
	    Scanner.prototype.enableButton = function (btn) {
	        btn.alpha = 1;
	        btn.touchable = true;
	    };
	    Object.defineProperty(Scanner.prototype, "layerToMask", {
	        get: function () {
	            return this._layerToMask;
	        },
	        set: function (value) {
	            this._layerToMask = value;
	            this._layerToMask.mask = this.maskRect;
	            this._layerToMask.visible = false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scanner.prototype.highlightInactive = function () {
	        this.inactiveOutline.visible = true;
	        TweenMax.to(this.inactiveOutline, 0.5, { alpha: "-1", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    Scanner.prototype.stopHighlightInactive = function () {
	        this.inactiveOutline.visible = false;
	        TweenMax.killTweensOf(this.inactiveOutline);
	    };
	    Scanner.prototype.addMaskRect = function () {
	        this.maskRect = new pixi_js_1.Graphics();
	        this.maskRect.beginFill(0xFF4444);
	        this.maskRect.drawRect(this.x + 60, this.y + 8, 387, 266);
	    };
	    Scanner.prototype.createScannerArt = function () {
	        Logger_1.Logger.log(this, "Scanner createScannerArt");
	        this.inactiveImage = pixi_js_1.Sprite.fromFrame("operationRoom_scannerInactive");
	        this.addChild(this.inactiveImage);
	        this.inactiveImage.scale.x = this.inactiveImage.scale.y = 2;
	        this.inactiveImage.interactive = true;
	        this.inactiveImage.buttonMode = true;
	        this.inactiveOutline = pixi_js_1.Sprite.fromFrame("operationRoom_scannerInactive_outline");
	        this.addChild(this.inactiveOutline);
	        this.inactiveOutline.scale.x = this.inactiveOutline.scale.y = 2;
	        this.inactiveOutline.interactive = false;
	        this.inactiveOutline.visible = false;
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.interactive = true;
	        this.rectCover.buttonMode = true;
	        this.rectCover.drawRect(this.inactiveImage.x, this.inactiveImage.y, this.inactiveImage.width, this.inactiveImage.height);
	        this.inactiveOutline.x = 8;
	        var frames = [];
	        for (var i = 1; i < 3; i++) {
	            var val = i < 10 ? '0' + i : i;
	            frames.push(pixi_js_1.Texture.fromFrame('operationRoom_scannerFlicker_ani_00' + val));
	        }
	        this.noiseScreen = new pixi_js_1.extras.AnimatedSprite(frames);
	        this.addChild(this.noiseScreen);
	        this.noiseScreen.x = 81;
	        this.noiseScreen.y = 10;
	        this.noiseScreen.visible = false;
	        this.noiseScreen.scale.x = this.noiseScreen.scale.y = 2;
	        this.background = pixi_js_1.Sprite.fromFrame("operationRoom_scannerActive");
	        this.addChild(this.background);
	        this.background.visible = false;
	        this.btnSkeletal = this.createAndAddButton("btnSkeletal", "operationRoom_scannerButton_skeletal", 0, 0);
	        this.btnMuscular = this.createAndAddButton("btnMuscular", "operationRoom_scannerButton_muscular", 0, 130);
	        this.btnDigestive = this.createAndAddButton("btnDigestive", "operationRoom_scannerButton_digestive", 0, 230);
	        this.btnRespiratoryAndUrinary = this.createAndAddButton("btnRespiratoryAndUrinary", "operationRoom_scannerButton_respiratoryUrinary", this.background.width - this.btnSkeletal.width + 3, 30);
	        this.btnCardioVascular = this.createAndAddButton("btnCardioVascular", "operationRoom_scannerButton_cardiovascular", this.background.width - this.btnSkeletal.width + 3, 130);
	        this.btnNervous = this.createAndAddButton("btnNervous", "operationRoom_scannerButton_nervous", this.background.width - this.btnSkeletal.width + 3, 230);
	    };
	    Scanner.prototype.createAndAddButton = function (name, texture, positionX, positionY) {
	        Logger_1.Logger.log(this, "Scanner createAndAddButton     name ==== " + name);
	        var btn = new ScannerButton_1.ScannerButton();
	        btn.name = name;
	        btn.addTexture(pixi_js_1.Texture.fromFrame(texture));
	        this.addChild(btn);
	        btn.signalScannerButton.add(this.btnPressedListener);
	        btn.x += btn.getTextureBounds().width * .5;
	        btn.y += btn.getTextureBounds().height;
	        btn.visible = false;
	        return btn;
	    };
	    Scanner.prototype.playNoiseClip = function () {
	        this.noiseScreen.visible = true;
	        this.noiseClip = AudioPlayer_1.AudioPlayer.getInstance().playSound("scanner_noise", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	        this.noiseClip.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, this.audioNoiseComplete);
	    };
	    Scanner.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "Scanner destroy");
	        if (this.inactiveImage != null) {
	            this.inactiveImage.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.inactiveTouchListener);
	            this.inactiveImage = null;
	        }
	        if (this.rectCover != null) {
	            this.rectCover.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.inactiveTouchListener);
	            this.rectCover = null;
	        }
	        if (this.noiseScreen != null) {
	            this.removeChild(this.noiseScreen);
	            this.noiseScreen = null;
	        }
	        this.removeChildren(0, this.children.length - 1);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    return Scanner;
	}(pixi_js_1.Sprite));
	Scanner.SKELETAL = "appdrhospital.view.operatingroom.objects.scanner.skeletal";
	Scanner.MUSCULAR = "appdrhospital.view.operatingroom.objects.scanner.muscular";
	Scanner.CARDIOVASCULAR = "appdrhospital.view.operatingroom.objects.scanner.cardiovascular";
	Scanner.DIGESTIVE = "appdrhospital.view.operatingroom.objects.scanner.digestive";
	Scanner.RESPIRATORY_AND_UNINARY = "appdrhospital.view.operatingroom.objects.scanner.respiratoryandurinary";
	Scanner.NERVOUS = "appdrhospital.view.operatingroom.objects.scanner.nervous";
	exports.Scanner = Scanner;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Button_1 = __webpack_require__(21);
	var pixi_js_1 = __webpack_require__(8);
	var signals_js_1 = __webpack_require__(33);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var Logger_1 = __webpack_require__(3);
	var ScannerButton = (function (_super) {
	    __extends(ScannerButton, _super);
	    function ScannerButton() {
	        var _this = _super.call(this) || this;
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "ScannerButton touchDown  event.type == " + event.type);
	            _this.signalScannerButton.dispatch(_this);
	        };
	        _this.signalScannerButton = new signals_js_1.Signal();
	        _this.highlightImage = pixi_js_1.Sprite.fromFrame("operationRoom_scannerButton_highlight");
	        _this.highlightImage.pivot.x = _this.highlightImage.width * .5;
	        _this.highlightImage.pivot.y = _this.highlightImage.height * .5;
	        _this.addChild(_this.highlightImage);
	        _this.highlightImage.x = 4;
	        _this.highlightImage.y = -4;
	        _this.highlightImage.alpha = 0;
	        _this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	        return _this;
	    }
	    ScannerButton.prototype.highlight = function () {
	        TweenMax.to(this.highlightImage, 0.5, { alpha: "+=1", repeat: -1, yoyo: true, ease: Linear.easeNone });
	        this.parent.setChildIndex(this, this.parent.children.length - 1);
	    };
	    ScannerButton.prototype.endHighlight = function () {
	        TweenMax.killTweensOf(this.highlightImage);
	        this.highlightImage.alpha = 0;
	    };
	    ScannerButton.prototype.destroy = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	    };
	    return ScannerButton;
	}(Button_1.Button));
	exports.ScannerButton = ScannerButton;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var DeluxeSignal_1 = __webpack_require__(34);
	exports.DeluxeSignal = DeluxeSignal_1.DeluxeSignal;
	var GenericEvent_1 = __webpack_require__(40);
	exports.GenericEvent = GenericEvent_1.GenericEvent;
	var IOnceSignal_1 = __webpack_require__(41);
	exports.IOnceSignal = IOnceSignal_1.IOnceSignal;
	var IPrioritySignal_1 = __webpack_require__(42);
	exports.IPrioritySignal = IPrioritySignal_1.IPrioritySignal;
	var ISignal_1 = __webpack_require__(43);
	exports.ISignal = ISignal_1.ISignal;
	var ISlot_1 = __webpack_require__(44);
	exports.ISlot = ISlot_1.ISlot;
	var MonoSignal_1 = __webpack_require__(45);
	exports.MonoSignal = MonoSignal_1.MonoSignal;
	var OnceSignal_1 = __webpack_require__(37);
	exports.OnceSignal = OnceSignal_1.OnceSignal;
	var PrioritySignal_1 = __webpack_require__(35);
	exports.PrioritySignal = PrioritySignal_1.PrioritySignal;
	var Promise_1 = __webpack_require__(46);
	exports.Promise = Promise_1.Promise;
	var Signal_1 = __webpack_require__(36);
	exports.Signal = Signal_1.Signal;
	var Slot_1 = __webpack_require__(39);
	exports.Slot = Slot_1.Slot;
	var SlotList_1 = __webpack_require__(38);
	exports.SlotList = SlotList_1.SlotList;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var PrioritySignal_1 = __webpack_require__(35);
	/**
	 * Allows the valueClasses to be set in MXML, e.g.
	 * <signals:Signal id="nameChanged">{[String, uint]}</signals:Signal>
	 */
	/*[DefaultProperty("valueClasses")]*/
	/**
	 * Signal dispatches events to multiple listeners.
	 * It is inspired by C# events and delegates, and by
	 * <a target="_top" href="http://en.wikipedia.org/wiki/Signals_and_slots">signals and slots</a>
	 * in Qt.
	 * A Signal adds event dispatching functionality through composition and interfaces,
	 * rather than inheriting from a dispatcher.
	 * <br/><br/>
	 * Project home: <a target="_top" href="http://github.com/robertpenner/as3-signals/">http://github.com/robertpenner/as3-signals/</a>
	 */
	var DeluxeSignal = (function (_super) {
	    __extends(DeluxeSignal, _super);
	    /**
	     * Creates a DeluxeSignal instance to dispatch events on behalf of a target object.
	     * @param    target The object the signal is dispatching events on behalf of.
	     * @param    valueClasses Any number of class references that enable type checks in dispatch().
	     * For example, new DeluxeSignal(this, String, uint)
	     * would allow: signal.dispatch("the Answer", 42)
	     * but not: signal.dispatch(true, 42.5)
	     * nor: signal.dispatch()
	     *
	     * NOTE: Subclasses cannot call super.apply(null, valueClasses),
	     * but this constructor has logic to support super(valueClasses).
	     */
	    function DeluxeSignal(target) {
	        if (target === void 0) { target = null; }
	        var valueClasses = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            valueClasses[_i - 1] = arguments[_i];
	        }
	        var _this = this;
	        // Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
	        valueClasses = (valueClasses.length == 1 && valueClasses[0] instanceof Array) ? valueClasses[0] : valueClasses;
	        _this = _super.call(this, valueClasses) || this;
	        //@CHANGED - this was the first call in the constructor
	        //Typescript does not allow "this" to be called before super
	        _this._target = target;
	        return _this;
	    }
	    Object.defineProperty(DeluxeSignal.prototype, "target", {
	        /** @inheritDoc */
	        get: function () {
	            return this._target;
	        },
	        set: function (value) {
	            if (value == this._target)
	                return;
	            this.removeAll();
	            this._target = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     * @throws ArgumentError <code>ArgumentError</code>: Incorrect number of arguments.
	     * @throws ArgumentError <code>ArgumentError</code>: Value object is not an instance of the appropriate valueClasses Class.
	     */
	    /*override*/
	    DeluxeSignal.prototype.dispatch = function () {
	        var valueObjects = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueObjects[_i] = arguments[_i];
	        }
	        // Validate value objects against pre-defined value classes.
	        var numValueClasses = this._valueClasses.length;
	        var numValueObjects = valueObjects.length;
	        if (numValueObjects < numValueClasses) {
	            throw new Error('Incorrect number of arguments. ' +
	                'Expected at least ' + numValueClasses + ' but received ' +
	                numValueObjects + '.');
	        }
	        // Cannot dispatch differently typed objects than declared classes.
	        for (var i = 0; i < numValueClasses; i++) {
	            // Optimized for the optimistic case that values are correct.
	            if (valueObjects[i] === null || valueObjects[i].constructor === this._valueClasses[i])
	                continue;
	            throw new Error('Value object <' + valueObjects[i]
	                + '> is not an instance of <' + this._valueClasses[i] + '>.');
	        }
	        // Extract and clone event object if necessary.
	        var event = valueObjects[0];
	        if (event) {
	            if (event.target) {
	                event = event.clone();
	                valueObjects[0] = event;
	            }
	            event.target = this.target;
	            event.currentTarget = this.target;
	            event.signal = this;
	        }
	        // Broadcast to listeners.
	        var slotsToProcess = this.slots;
	        while (slotsToProcess.nonEmpty) {
	            slotsToProcess.head.execute(valueObjects);
	            slotsToProcess = slotsToProcess.tail;
	        }
	        // Bubble the event as far as possible.
	        if (!event || !event.bubbles)
	            return;
	        var currentTarget = this.target;
	        while (currentTarget && currentTarget.hasOwnProperty("parent")) {
	            currentTarget = currentTarget["parent"];
	            if (!currentTarget)
	                break;
	            if (currentTarget.onEventBubbled !== undefined) {
	                event.currentTarget = currentTarget;
	                // onEventBubbled() can stop the bubbling by returning false.
	                if (currentTarget.onEventBubbled(event))
	                    break;
	            }
	        }
	    };
	    return DeluxeSignal;
	}(PrioritySignal_1.PrioritySignal));
	exports.DeluxeSignal = DeluxeSignal;
	//# sourceMappingURL=DeluxeSignal.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Signal_1 = __webpack_require__(36);
	var Slot_1 = __webpack_require__(39);
	var PrioritySignal = (function (_super) {
	    __extends(PrioritySignal, _super);
	    function PrioritySignal() {
	        var valueClasses = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueClasses[_i] = arguments[_i];
	        }
	        var _this = this;
	        // Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
	        valueClasses = (valueClasses.length == 1 && valueClasses[0] instanceof Array) ? valueClasses[0] : valueClasses;
	        _this = _super.call(this, valueClasses) || this;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    PrioritySignal.prototype.addWithPriority = function (listener, priority) {
	        if (priority === void 0) { priority = 0; }
	        return this.registerListenerWithPriority(listener, false, priority);
	    };
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    PrioritySignal.prototype.addOnceWithPriority = function (listener, priority) {
	        if (priority === void 0) { priority = 0; }
	        return this.registerListenerWithPriority(listener, true, priority);
	    };
	    /*override*/
	    PrioritySignal.prototype.registerListener = function (listener, once) {
	        if (once === void 0) { once = false; }
	        return this.registerListenerWithPriority(listener, once);
	    };
	    PrioritySignal.prototype.registerListenerWithPriority = function (listener, once, priority) {
	        if (once === void 0) { once = false; }
	        if (priority === void 0) { priority = 0; }
	        if (this.registrationPossible(listener, once)) {
	            var slot = new Slot_1.Slot(listener, this, once, priority);
	            this.slots = this.slots.insertWithPriority(slot);
	            return slot;
	        }
	        return this.slots.find(listener);
	    };
	    return PrioritySignal;
	}(Signal_1.Signal));
	exports.PrioritySignal = PrioritySignal;
	//# sourceMappingURL=PrioritySignal.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var OnceSignal_1 = __webpack_require__(37);
	/**
	 * Allows the valueClasses to be set in MXML, e.g.
	 * <signals:Signal id="nameChanged">{[String, uint]}</signals:Signal>
	 */
	/*[DefaultProperty("valueClasses")]*/
	/**
	 * Signal dispatches events to multiple listeners.
	 * It is inspired by C# events and delegates, and by
	 * <a target="_top" href="http://en.wikipedia.org/wiki/Signals_and_slots">signals and slots</a>
	 * in Qt.
	 * A Signal adds event dispatching functionality through composition and interfaces,
	 * rather than inheriting from a dispatcher.
	 * <br/><br/>
	 * Project home: <a target="_top" href="http://github.com/robertpenner/as3-signals/">http://github.com/robertpenner/as3-signals/</a>
	 */
	var Signal = (function (_super) {
	    __extends(Signal, _super);
	    /**
	     * Creates a Signal instance to dispatch value objects.
	     * @param    valueClasses Any number of class references that enable type checks in dispatch().
	     * For example, new Signal(String, uint)
	     * would allow: signal.dispatch("the Answer", 42)
	     * but not: signal.dispatch(true, 42.5)
	     * nor: signal.dispatch()
	     *
	     * NOTE: In AS3, subclasses cannot call super.apply(null, valueClasses),
	     * but this constructor has logic to support super(valueClasses).
	     */
	    function Signal() {
	        var valueClasses = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueClasses[_i] = arguments[_i];
	        }
	        var _this = this;
	        // Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
	        valueClasses = (valueClasses.length == 1 && valueClasses[0] instanceof Array) ? valueClasses[0] : valueClasses;
	        _this = _super.call(this, valueClasses) || this;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    Signal.prototype.add = function (listener) {
	        return this.registerListener(listener);
	    };
	    return Signal;
	}(OnceSignal_1.OnceSignal));
	exports.Signal = Signal;
	//# sourceMappingURL=Signal.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var SlotList_1 = __webpack_require__(38);
	var Slot_1 = __webpack_require__(39);
	/**
	 * Allows the valueClasses to be set in MXML, e.g.
	 * <signals:Signal id="nameChanged">{[String, uint]}</signals:Signal>
	 */
	/*[DefaultProperty("valueClasses")]*/
	/**
	 * Signal dispatches events to multiple listeners.
	 * It is inspired by C# events and delegates, and by
	 * <a target="_top" href="http://en.wikipedia.org/wiki/Signals_and_slots">signals and slots</a>
	 * in Qt.
	 * A Signal adds event dispatching functionality through composition and interfaces,
	 * rather than inheriting from a dispatcher.
	 * <br/><br/>
	 * Project home: <a target="_top" href="http://github.com/robertpenner/as3-signals/">http://github.com/robertpenner/as3-signals/</a>
	 */
	var OnceSignal = (function () {
	    /**
	     * Creates a Signal instance to dispatch value objects.
	     * @param    valueClasses Any number of class references that enable type checks in dispatch().
	     * For example, new Signal(String, uint)
	     * would allow: signal.dispatch("the Answer", 42)
	     * but not: signal.dispatch(true, 42.5)
	     * nor: signal.dispatch()
	     *
	     * NOTE: In AS3, subclasses cannot call super.apply(null, valueClasses),
	     * but this constructor has logic to support super(valueClasses).
	     */
	    function OnceSignal() {
	        var valueClasses = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueClasses[_i] = arguments[_i];
	        }
	        this.slots = SlotList_1.SlotList.NIL;
	        // Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
	        this.valueClasses = (valueClasses.length == 1 && valueClasses[0] instanceof Array) ? valueClasses[0] : valueClasses;
	    }
	    Object.defineProperty(OnceSignal.prototype, "valueClasses", {
	        /**
	         * @inheritDoc
	         * @throws ArgumentError <code>ArgumentError</code>: Invalid valueClasses argument: item at index should be a Class but was not.
	         */
	        /*[ArrayElementType("Class")]*/
	        get: function () {
	            return this._valueClasses;
	        },
	        set: function (value) {
	            // Clone so the Array cannot be affected from outside.
	            this._valueClasses = value ? value.slice() : [];
	            for (var i = this._valueClasses.length; i--;) {
	                if (!(this._valueClasses[i] instanceof Object)) {
	                    throw new Error('Invalid valueClasses argument: ' +
	                        'item at index ' + i + ' should be a Class but was:<' +
	                        this._valueClasses[i] + '>.' + this._valueClasses[i]); //@CHANGED - temp replacement for getQualifiedClassByName()
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(OnceSignal.prototype, "numListeners", {
	        /** @inheritDoc */
	        get: function () {
	            return this.slots.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    OnceSignal.prototype.addOnce = function (listener) {
	        return this.registerListener(listener, true);
	    };
	    /** @inheritDoc */
	    OnceSignal.prototype.remove = function (listener) {
	        var slot = this.slots.find(listener);
	        if (!slot)
	            return null;
	        this.slots = this.slots.filterNot(listener);
	        return slot;
	    };
	    /** @inheritDoc */
	    OnceSignal.prototype.removeAll = function () {
	        this.slots = SlotList_1.SlotList.NIL;
	    };
	    /**
	     * @inheritDoc
	     * @throws ArgumentError <code>ArgumentError</code>: Incorrect number of arguments.
	     * @throws ArgumentError <code>ArgumentError</code>: Value object is not an instance of the appropriate valueClasses Class.
	     */
	    OnceSignal.prototype.dispatch = function () {
	        var valueObjects = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueObjects[_i] = arguments[_i];
	        }
	        // If valueClasses is empty, value objects are not type-checked.
	        var numValueClasses = this._valueClasses.length;
	        var numValueObjects = valueObjects.length;
	        // Cannot dispatch fewer objects than declared classes.
	        if (numValueObjects < numValueClasses) {
	            throw new Error('Incorrect number of arguments. ' +
	                'Expected at least ' + numValueClasses + ' but received ' +
	                numValueObjects + '.');
	        }
	        // Cannot dispatch differently typed objects than declared classes.
	        for (var i = 0; i < numValueClasses; i++) {
	            // Optimized for the optimistic case that values are correct.
	            if (valueObjects[i] === null ||
	                (valueObjects[i] instanceof this._valueClasses[i] || valueObjects[i].constructor === this._valueClasses[i])) {
	                continue;
	            }
	            throw new Error('Value object <' + valueObjects[i]
	                + '> is not an instance of <' + this._valueClasses[i] + '>.');
	        }
	        // Broadcast to listeners.
	        var slotsToProcess = this.slots;
	        if (slotsToProcess.nonEmpty) {
	            while (slotsToProcess.nonEmpty) {
	                slotsToProcess.head.execute(valueObjects);
	                slotsToProcess = slotsToProcess.tail;
	            }
	        }
	    };
	    OnceSignal.prototype.registerListener = function (listener, once) {
	        if (once === void 0) { once = false; }
	        if (this.registrationPossible(listener, once)) {
	            var newSlot = new Slot_1.Slot(listener, this, once);
	            this.slots = this.slots.prepend(newSlot);
	            return newSlot;
	        }
	        return this.slots.find(listener);
	    };
	    OnceSignal.prototype.registrationPossible = function (listener, once) {
	        if (!this.slots.nonEmpty)
	            return true;
	        var existingSlot = this.slots.find(listener);
	        if (!existingSlot)
	            return true;
	        if (existingSlot.once != once) {
	            // If the listener was previously added, definitely don't add it again.
	            // But throw an exception if their once values differ.
	            throw new Error('You cannot addOnce() then add() the same listener without removing the relationship first.');
	        }
	        return false; // Listener was already registered.
	    };
	    return OnceSignal;
	}());
	exports.OnceSignal = OnceSignal;
	//# sourceMappingURL=OnceSignal.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * The SlotList class represents an immutable list of Slot objects.
	 *
	 * @author Joa Ebert
	 * @author Robert Penner
	 */
	var SlotList = (function () {
	    /**
	     * Creates and returns a new SlotList object.
	     *
	     * <p>A user never has to create a SlotList manually.
	     * Use the <code>NIL</code> element to represent an empty list.
	     * <code>NIL.prepend(value)</code> would create a list containing <code>value</code></p>.
	     *
	     * @param head The first slot in the list.
	     * @param tail A list containing all slots except head.
	     *
	     * @throws ArgumentError <code>ArgumentError</code>: Parameters head and tail are null. Use the NIL element instead.
	     * @throws ArgumentError <code>ArgumentError</code>: Parameter head cannot be null.
	     */
	    function SlotList(head, tail) {
	        if (tail === void 0) { tail = null; }
	        this.nonEmpty = false;
	        if (!head && !tail) {
	            if (SlotList.NIL)
	                throw new Error('Parameters head and tail are null. Use the NIL element instead.');
	            //this is the NIL element as per definition
	            this.nonEmpty = false;
	        }
	        else if (!head) {
	            throw new Error('Parameter head cannot be null.');
	        }
	        else {
	            this.head = head;
	            this.tail = tail || SlotList.NIL;
	            this.nonEmpty = true;
	        }
	    }
	    Object.defineProperty(SlotList.prototype, "length", {
	        /**
	         * The number of slots in the list.
	         */
	        get: function () {
	            if (!this.nonEmpty)
	                return 0;
	            if (this.tail == SlotList.NIL)
	                return 1;
	            // We could cache the length, but it would make methods like filterNot unnecessarily complicated.
	            // Instead we assume that O(n) is okay since the length property is used in rare cases.
	            // We could also cache the length lazy, but that is a waste of another 8b per list node (at least).
	            var result = 0;
	            var p = this;
	            while (p.nonEmpty) {
	                ++result;
	                p = p.tail;
	            }
	            return result;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Prepends a slot to this list.
	     * @param    slot The item to be prepended.
	     * @return    A list consisting of slot followed by all elements of this list.
	     *
	     * @throws ArgumentError <code>ArgumentError</code>: Parameter head cannot be null.
	     */
	    SlotList.prototype.prepend = function (slot) {
	        return new SlotList(slot, this);
	    };
	    /**
	     * Appends a slot to this list.
	     * Note: appending is O(n). Where possible, prepend which is O(1).
	     * In some cases, many list items must be cloned to
	     * avoid changing existing lists.
	     * @param    slot The item to be appended.
	     * @return    A list consisting of all elements of this list followed by slot.
	     */
	    SlotList.prototype.append = function (slot) {
	        if (!slot)
	            return this;
	        if (!this.nonEmpty)
	            return new SlotList(slot);
	        // Special case: just one slot currently in the list.
	        if (this.tail == SlotList.NIL)
	            return new SlotList(slot).prepend(this.head);
	        // The list already has two or more slots.
	        // We have to build a new list with cloned items because they are immutable.
	        var wholeClone = new SlotList(this.head);
	        var subClone = wholeClone;
	        var current = this.tail;
	        while (current.nonEmpty) {
	            subClone = subClone.tail = new SlotList(current.head);
	            current = current.tail;
	        }
	        // Append the new slot last.
	        subClone.tail = new SlotList(slot);
	        return wholeClone;
	    };
	    /**
	     * Insert a slot into the list in a position according to its priority.
	     * The higher the priority, the closer the item will be inserted to the list head.
	     * @params slot The item to be inserted.
	     *
	     * @throws ArgumentError <code>ArgumentError</code>: Parameters head and tail are null. Use the NIL element instead.
	     * @throws ArgumentError <code>ArgumentError</code>: Parameter head cannot be null.
	     */
	    SlotList.prototype.insertWithPriority = function (slot) {
	        if (!this.nonEmpty)
	            return new SlotList(slot);
	        var priority = slot.priority;
	        // Special case: new slot has the highest priority.
	        if (priority > this.head.priority)
	            return this.prepend(slot);
	        var wholeClone = new SlotList(this.head);
	        var subClone = wholeClone;
	        var current = this.tail;
	        // Find a slot with lower priority and go in front of it.
	        while (current.nonEmpty) {
	            if (priority > current.head.priority) {
	                subClone.tail = current.prepend(slot);
	                return wholeClone;
	            }
	            subClone = subClone.tail = new SlotList(current.head);
	            current = current.tail;
	        }
	        // Slot has lowest priority.
	        subClone.tail = new SlotList(slot);
	        return wholeClone;
	    };
	    /**
	     * Returns the slots in this list that do not contain the supplied listener.
	     * Note: assumes the listener is not repeated within the list.
	     * @param    listener The function to remove.
	     * @return A list consisting of all elements of this list that do not have listener.
	     */
	    SlotList.prototype.filterNot = function (listener) {
	        if (!this.nonEmpty || listener == null)
	            return this;
	        if (listener == this.head.listener)
	            return this.tail;
	        // The first item wasn't a match so the filtered list will contain it.
	        var wholeClone = new SlotList(this.head);
	        var subClone = wholeClone;
	        var current = this.tail;
	        while (current.nonEmpty) {
	            if (current.head.listener == listener) {
	                // Splice out the current head.
	                subClone.tail = current.tail;
	                return wholeClone;
	            }
	            subClone = subClone.tail = new SlotList(current.head);
	            current = current.tail;
	        }
	        // The listener was not found so this list is unchanged.
	        return this;
	    };
	    /**
	     * Determines whether the supplied listener Function is contained within this list
	     */
	    SlotList.prototype.contains = function (listener) {
	        if (!this.nonEmpty)
	            return false;
	        var p = this;
	        while (p.nonEmpty) {
	            if (p.head.listener == listener)
	                return true;
	            p = p.tail;
	        }
	        return false;
	    };
	    /**
	     * Retrieves the ISlot associated with a supplied listener within the SlotList.
	     * @param   listener The Function being searched for
	     * @return  The ISlot in this list associated with the listener parameter through the ISlot.listener property.
	     *          Returns null if no such ISlot instance exists or the list is empty.
	     */
	    SlotList.prototype.find = function (listener) {
	        if (!this.nonEmpty)
	            return null;
	        var p = this;
	        while (p.nonEmpty) {
	            if (p.head.listener == listener)
	                return p.head;
	            p = p.tail;
	        }
	        return null;
	    };
	    SlotList.prototype.toString = function () {
	        var buffer = '';
	        var p = this;
	        while (p.nonEmpty) {
	            buffer += p.head + " -> ";
	            p = p.tail;
	        }
	        buffer += "NIL";
	        return "[List " + buffer + "]";
	    };
	    /**
	     * Represents an empty list. Used as the list terminator.
	     */
	    SlotList.NIL = new SlotList(null, null);
	    return SlotList;
	}());
	exports.SlotList = SlotList;
	//# sourceMappingURL=SlotList.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * The Slot class represents a signal slot.
	 *
	 * @author Robert Penner
	 * @author Joa Ebert
	 */
	var Slot = (function () {
	    /**
	     * Creates and returns a new Slot object.
	     *
	     * @param listener The listener associated with the slot.
	     * @param signal The signal associated with the slot.
	     * @param once Whether or not the listener should be executed only once.
	     * @param priority The priority of the slot.
	     *
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     * @throws Error <code>Error</code>: Internal signal reference has not been set yet.
	     */
	    function Slot(listener, signal, once, priority) {
	        if (once === void 0) { once = false; }
	        if (priority === void 0) { priority = 0; }
	        this._enabled = true;
	        this._once = false;
	        this._priority = 0;
	        this._listener = listener;
	        this._once = once;
	        this._signal = signal;
	        this._priority = priority;
	        this.verifyListener(listener);
	    }
	    /**
	     * @inheritDoc
	     */
	    Slot.prototype.execute0 = function () {
	        if (!this._enabled)
	            return;
	        if (this._once)
	            this.remove();
	        if (this._params && this._params.length) {
	            this._listener.apply(null, this._params);
	            return;
	        }
	        this._listener();
	    };
	    /**
	     * @inheritDoc
	     */
	    Slot.prototype.execute1 = function (value) {
	        if (!this._enabled)
	            return;
	        if (this._once)
	            this.remove();
	        if (this._params && this._params.length) {
	            this._listener.apply(null, [value].concat(this._params));
	            return;
	        }
	        this._listener(value);
	    };
	    /**
	     * @inheritDoc
	     */
	    Slot.prototype.execute = function (valueObjects) {
	        if (!this._enabled)
	            return;
	        if (this._once)
	            this.remove();
	        // If we have parameters, add them to the valueObject
	        // Note: This could be expensive if we're after the fastest dispatch possible.
	        if (this._params && this._params.length) {
	            valueObjects = valueObjects.concat(this._params);
	        }
	        // NOTE: simple ifs are faster than switch: http://jacksondunstan.com/articles/1007
	        var numValueObjects = valueObjects.length;
	        if (numValueObjects == 0) {
	            this._listener();
	        }
	        else if (numValueObjects == 1) {
	            this._listener(valueObjects[0]);
	        }
	        else if (numValueObjects == 2) {
	            this._listener(valueObjects[0], valueObjects[1]);
	        }
	        else if (numValueObjects == 3) {
	            this._listener(valueObjects[0], valueObjects[1], valueObjects[2]);
	        }
	        else {
	            this._listener.apply(null, valueObjects);
	        }
	    };
	    Object.defineProperty(Slot.prototype, "listener", {
	        /**
	         * @inheritDoc
	         * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>. Did you want to set enabled to false instead?
	         * @throws Error <code>Error</code>: Internal signal reference has not been set yet.
	         */
	        get: function () {
	            return this._listener;
	        },
	        set: function (value) {
	            if (null == value)
	                throw new Error('Given listener is null.\nDid you want to set enabled to false instead?');
	            this.verifyListener(value);
	            this._listener = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Slot.prototype, "once", {
	        /**
	         * @inheritDoc
	         */
	        get: function () {
	            return this._once;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Slot.prototype, "priority", {
	        /**
	         * @inheritDoc
	         */
	        get: function () {
	            return this._priority;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates and returns the string representation of the current object.
	     *
	     * @return The string representation of the current object.
	     */
	    Slot.prototype.toString = function () {
	        return "[Slot listener: " + this._listener + ", once: " + this._once
	            + ", priority: " + this._priority + ", enabled: " + this._enabled + "]";
	    };
	    Object.defineProperty(Slot.prototype, "enabled", {
	        /**
	         * @inheritDoc
	         */
	        get: function () {
	            return this._enabled;
	        },
	        set: function (value) {
	            this._enabled = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Slot.prototype, "params", {
	        /**
	         * @inheritDoc
	         */
	        get: function () {
	            return this._params;
	        },
	        set: function (value) {
	            this._params = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     */
	    Slot.prototype.remove = function () {
	        this._signal.remove(this._listener);
	    };
	    Slot.prototype.verifyListener = function (listener) {
	        if (null == listener) {
	            throw new Error('Given listener is null.');
	        }
	        if (null == this._signal) {
	            throw new Error('Internal signal reference has not been set yet.');
	        }
	    };
	    return Slot;
	}());
	exports.Slot = Slot;
	//# sourceMappingURL=Slot.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *
	 * @see org.osflash.signals.events.IEvent
	 * Documentation for the event interface being maintained in IEvent to avoid duplication for now.
	 */
	var GenericEvent = (function () {
	    function GenericEvent(bubbles) {
	        if (bubbles === void 0) { bubbles = false; }
	        this._bubbles = bubbles;
	    }
	    Object.defineProperty(GenericEvent.prototype, "signal", {
	        /** @inheritDoc */
	        get: function () {
	            return this._signal;
	        },
	        set: function (value) {
	            this._signal = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GenericEvent.prototype, "target", {
	        /** @inheritDoc */
	        get: function () {
	            return this._target;
	        },
	        set: function (value) {
	            this._target = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GenericEvent.prototype, "currentTarget", {
	        /** @inheritDoc */
	        get: function () {
	            return this._currentTarget;
	        },
	        set: function (value) {
	            this._currentTarget = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GenericEvent.prototype, "bubbles", {
	        /** @inheritDoc */
	        get: function () {
	            return this._bubbles;
	        },
	        set: function (value) {
	            this._bubbles = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @inheritDoc */
	    GenericEvent.prototype.clone = function () {
	        return new GenericEvent(this._bubbles);
	    };
	    return GenericEvent;
	}());
	exports.GenericEvent = GenericEvent;
	//# sourceMappingURL=GenericEvent.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *
	 */
	exports.IOnceSignal = Symbol("IOnceSignal");
	//# sourceMappingURL=IOnceSignal.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *
	 */
	exports.IPrioritySignal = Symbol("IPrioritySignal");
	//# sourceMappingURL=IPrioritySignal.js.map

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 *
	 */
	exports.ISignal = Symbol("ISignal");
	//# sourceMappingURL=ISignal.js.map

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * The ISlot interface defines the basic properties of a
	 * listener associated with a Signal.
	 *
	 * @author Joa Ebert
	 * @author Robert Penner
	 */
	exports.ISlot = Symbol("ISlot");
	//# sourceMappingURL=ISlot.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Slot_1 = __webpack_require__(39);
	/**
	 * Allows the valueClasses to be set in MXML, e.g.
	 * <signals:Signal id="nameChanged">{[String, uint]}</signals:Signal>
	 */
	/*[DefaultProperty("valueClasses")]*/
	/**
	 * A MonoSignal can have only one listener.
	 */
	var MonoSignal = (function () {
	    /**
	     * Creates a MonoSignal instance to dispatch value objects.
	     * @param    valueClasses Any number of class references that enable type checks in dispatch().
	     * For example, new Signal(String, uint)
	     * would allow: signal.dispatch("the Answer", 42)
	     * but not: signal.dispatch(true, 42.5)
	     * nor: signal.dispatch()
	     *
	     * NOTE: Subclasses cannot call super.apply(null, valueClasses),
	     * but this constructor has logic to support super(valueClasses).
	     */
	    function MonoSignal() {
	        var valueClasses = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueClasses[_i] = arguments[_i];
	        }
	        // Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
	        this.valueClasses = (valueClasses.length == 1 && valueClasses[0] instanceof Array) ? valueClasses[0] : valueClasses;
	    }
	    Object.defineProperty(MonoSignal.prototype, "valueClasses", {
	        /**
	         * @inheritDoc
	         * @throws ArgumentError <code>ArgumentError</code>: Invalid valueClasses argument: item at index should be a Class but was not.
	         */
	        /*[ArrayElementType("Class")]*/
	        get: function () {
	            return this._valueClasses;
	        },
	        set: function (value) {
	            // Clone so the Array cannot be affected from outside.
	            this._valueClasses = value ? value.slice() : [];
	            for (var i = this._valueClasses.length; i--;) {
	                if (!(this._valueClasses[i] instanceof Object)) {
	                    throw new Error('Invalid valueClasses argument: ' +
	                        'item at index ' + i + ' should be a Class but was:<' +
	                        this._valueClasses[i] + '>.' + this._valueClasses[i]); //@CHANGED - temp replacement for getQualifiedClassByName()
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MonoSignal.prototype, "numListeners", {
	        /** @inheritDoc */
	        get: function () {
	            return this.slot ? 1 : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot add or addOnce with a listener already added, remove the current listener first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    MonoSignal.prototype.add = function (listener) {
	        return this.registerListener(listener);
	    };
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot add or addOnce with a listener already added, remove the current listener first.
	     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
	     */
	    MonoSignal.prototype.addOnce = function (listener) {
	        return this.registerListener(listener, true);
	    };
	    /** @inheritDoc */
	    MonoSignal.prototype.remove = function (listener) {
	        if (this.slot && this.slot.listener == listener) {
	            var theSlot = this.slot;
	            this.slot = null;
	            return theSlot;
	        }
	        return null;
	    };
	    /** @inheritDoc */
	    MonoSignal.prototype.removeAll = function () {
	        if (this.slot)
	            this.slot.remove();
	    };
	    /**
	     * @inheritDoc
	     * @throws ArgumentError <code>ArgumentError</code>: Incorrect number of arguments.
	     * @throws ArgumentError <code>ArgumentError</code>: Value object is not an instance of the appropriate valueClasses Class.
	     */
	    MonoSignal.prototype.dispatch = function () {
	        var valueObjects = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueObjects[_i] = arguments[_i];
	        }
	        // If valueClasses is empty, value objects are not type-checked.
	        var numValueClasses = this._valueClasses.length;
	        var numValueObjects = valueObjects.length;
	        // Cannot dispatch fewer objects than declared classes.
	        if (numValueObjects < numValueClasses) {
	            throw new Error('Incorrect number of arguments. ' +
	                'Expected at least ' + numValueClasses + ' but received ' +
	                numValueObjects + '.');
	        }
	        // Cannot dispatch differently typed objects than declared classes.
	        for (var i = 0; i < numValueClasses; i++) {
	            // Optimized for the optimistic case that values are correct.
	            if (valueObjects[i] === null ||
	                (valueObjects[i] instanceof this._valueClasses[i] || valueObjects[i].constructor === this._valueClasses[i])) {
	                continue;
	            }
	            throw new Error('Value object <' + valueObjects[i]
	                + '> is not an instance of <' + this._valueClasses[i] + '>.');
	        }
	        // Broadcast to the one listener.
	        if (this.slot) {
	            this.slot.execute(valueObjects);
	        }
	    };
	    MonoSignal.prototype.registerListener = function (listener, once) {
	        if (once === void 0) { once = false; }
	        if (this.slot) {
	            // If the listener exits previously added, definitely don't add it.
	            throw new Error('You cannot add or addOnce with a listener already added, remove the current listener first.');
	        }
	        return (this.slot = new Slot_1.Slot(listener, this, once));
	    };
	    return MonoSignal;
	}());
	exports.MonoSignal = MonoSignal;
	//# sourceMappingURL=MonoSignal.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var OnceSignal_1 = __webpack_require__(37);
	var Promise = (function (_super) {
	    __extends(Promise, _super);
	    function Promise() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /** @inheritDoc */
	    /*override*/
	    Promise.prototype.addOnce = function (listener) {
	        var slot = _super.prototype.addOnce.call(this, listener);
	        if (this.isDispatched) {
	            slot.execute(this.valueObjects);
	            slot.remove();
	        }
	        return slot;
	    };
	    /**
	     * @inheritDoc
	     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot dispatch() a Promise more than once
	     */
	    /*override*/
	    Promise.prototype.dispatch = function () {
	        var valueObjects = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            valueObjects[_i] = arguments[_i];
	        }
	        if (this.isDispatched) {
	            throw new Error("You cannot dispatch() a Promise more than once");
	        }
	        else {
	            this.isDispatched = true;
	            this.valueObjects = valueObjects;
	            _super.prototype.dispatch.apply(this, valueObjects);
	        }
	    };
	    return Promise;
	}(OnceSignal_1.OnceSignal));
	exports.Promise = Promise;
	//# sourceMappingURL=Promise.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Level_1 = __webpack_require__(22);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var Logger_1 = __webpack_require__(3);
	var HospitalEvent_1 = __webpack_require__(9);
	var PairOfEyes_1 = __webpack_require__(48);
	var ClothesItem_1 = __webpack_require__(30);
	var pixi_js_1 = __webpack_require__(8);
	var AssetLoader_1 = __webpack_require__(7);
	var SpriteHelper_1 = __webpack_require__(29);
	var AudioPlayer_1 = __webpack_require__(10);
	var Config_1 = __webpack_require__(6);
	var Patient = (function (_super) {
	    __extends(Patient, _super);
	    function Patient(type, startingPoint) {
	        var _this = _super.call(this) || this;
	        _this.blink = function () {
	            if (_this.currentFacialExpression == Patient.EXPRESSION_NEUTRAL) {
	                _this.setFace(Patient.FACE_NEUTRAL_BLINK);
	                setTimeout(_this.setFaceNoBlink, 200);
	            }
	            else if (_this.currentFacialExpression == Patient.EXPRESSION_LITTLE_SMILE) {
	                _this.setFace(Patient.FACE_LITTLE_SMILE_BLINK);
	                setTimeout(_this.setFaceNoBlink, 200);
	            }
	            else if (_this.currentFacialExpression == Patient.EXPRESSION_BIG_SMILE) {
	                _this.setFace(Patient.FACE_BIG_SMILE_BLINK);
	                setTimeout(_this.setFaceNoBlink, 200);
	            }
	        };
	        _this.setFaceNoBlink = function () {
	            switch (_this.currentFacialExpression) {
	                case Patient.EXPRESSION_NEUTRAL:
	                    _this.setFace(Patient.FACE_NEUTRAL);
	                    break;
	                case Patient.EXPRESSION_LITTLE_SMILE:
	                    _this.setFace(Patient.FACE_LITTLE_SMILE);
	                    break;
	                case Patient.EXPRESSION_BIG_SMILE:
	                    _this.setFace(Patient.FACE_BIG_SMILE);
	                    break;
	                default:
	                    break;
	            }
	        };
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            _this._target.showOpened();
	            _this.playExpressionSpeak();
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.touchOffset = mousePositionCanvas;
	            _this.touchOffset.x = _this.touchOffset.x * _this.scale.x;
	            _this.touchOffset.y = _this.touchOffset.y * _this.scale.y;
	            console.log(_this.touchOffset);
	            console.log(_this.touchOffset.x);
	            console.log(_this.touchOffset.y);
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            _this.x = _this.startingPoint.x;
	            _this.y = _this.startingPoint.y;
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                var mousePosition = event.data.getLocalPosition(_this);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                if (mousePositionCanvas.y - _this.touchOffset.y < 280) {
	                    _this.y = Math.abs(mousePositionCanvas.y);
	                }
	                var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.getBounds(), _this._target.getBounds());
	                if (hit) {
	                    _this._target.highlight();
	                }
	                else {
	                    _this._target.removeHighlight();
	                }
	                _this.updateEyesMask();
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.mouseDown = false;
	            var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.getBounds(), _this._target.getBounds());
	            if (Patient.WAITING) {
	                if (hit) {
	                    _this.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                    _this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                    _this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                    _this.x = _this.startingPoint.x;
	                    _this.y = _this.startingPoint.y;
	                    _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_DROPPED, "selected patient", _this, "selected patient");
	                }
	                else {
	                    TweenLite.to(_this, .2, {
	                        x: _this._startingPoint.x,
	                        y: _this._startingPoint.y,
	                        onComplete: _this.updateEyesMask
	                    });
	                    _this.blink();
	                }
	                _this._target.showClosed();
	            }
	        };
	        _this.audioExpressionSpeakComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioExpressionSpeakComplete);
	            Config_1.Config.currentSpeakOverlappingViewsSound = null;
	        };
	        _this._type = type;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this._startingPoint = startingPoint;
	        _this.startBlinking();
	        _this.onAddedToStage();
	        return _this;
	    }
	    Object.defineProperty(Patient.prototype, "startingPoint", {
	        get: function () {
	            return this._startingPoint;
	        },
	        set: function (value) {
	            this._startingPoint = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Patient.prototype, "width", {
	        get: function () {
	            return this.skinImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Patient.prototype, "height", {
	        get: function () {
	            return this.skinImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Patient.prototype.onAddedToStage = function () {
	        this.setSkinAndEyeColorType();
	        this.createShadow();
	        this.createEyes();
	        this.updateEyesMask();
	        this.createSkinLayer();
	        this.createFaces();
	        this.setFace(Patient.FACE_NEUTRAL);
	        this.setFacialExpression(Patient.EXPRESSION_NEUTRAL);
	        this.createClothes();
	        this.startBreathing();
	    };
	    Patient.prototype.setPivotXY = function (amt) {
	        if (amt === void 0) { amt = .5; }
	        this.pivot.set(this.skinImage.width * amt, this.skinImage.height * amt);
	    };
	    Object.defineProperty(Patient.prototype, "skinType", {
	        get: function () {
	            return this._skinType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Patient.prototype.startBlinking = function () {
	        setInterval(this.blink, Math.round(Math.random() * 3000) + 3000);
	    };
	    Patient.prototype.startBreathing = function () {
	        TweenMax.to(this.currentTopClothes, 1, { width: "+=12", x: "-=6", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    Patient.clone = function (originalPatient) {
	        var clone = new Patient(originalPatient.type, originalPatient._startingPoint);
	        clone.state = originalPatient.state;
	        clone.disease = originalPatient.disease;
	        clone.target = originalPatient.target;
	        clone.currentBottomClothesTexture = originalPatient.currentBottomClothesTexture;
	        clone.currentTopClothesTexture = originalPatient.currentTopClothesTexture;
	        return clone;
	    };
	    Object.defineProperty(Patient.prototype, "disease", {
	        get: function () {
	            return this._disease;
	        },
	        set: function (value) {
	            this._disease = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Patient.prototype.toString = function () {
	        return "Patient - type: " + this._type;
	    };
	    Object.defineProperty(Patient.prototype, "target", {
	        get: function () {
	            return this._target;
	        },
	        set: function (value) {
	            this._target = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Patient.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Patient.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	            switch (this._state) {
	                case Patient.WAITING:
	                    this.makeDraggable();
	                    break;
	                case Patient.BEING_EXAMINED:
	                    break;
	                default:
	                    break;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Patient.prototype.scalePatient = function (size) {
	        if (size == Patient.SIZE_BIG) {
	            this.scale.x = this.scale.y = 1;
	        }
	        else if (size == Patient.SIZE_SMALL) {
	            this.scale.x = this.scale.y = 0.5;
	        }
	        this.updateEyesMask();
	    };
	    Patient.prototype.setFacialExpression = function (facialExpression) {
	        this.currentFacialExpression = facialExpression;
	        switch (this.currentFacialExpression) {
	            case Patient.EXPRESSION_NEUTRAL:
	                this.setFace(Patient.FACE_NEUTRAL);
	                break;
	            case Patient.EXPRESSION_LITTLE_SMILE:
	                this.setFace(Patient.FACE_LITTLE_SMILE);
	                break;
	            case Patient.EXPRESSION_BIG_SMILE:
	                this.setFace(Patient.FACE_BIG_SMILE);
	                break;
	            default:
	                break;
	        }
	    };
	    Patient.prototype.setFace = function (face) {
	        this.faceNeutral.visible = false;
	        this.faceNeutralBlink.visible = false;
	        this.faceLittleSmile.visible = false;
	        this.faceLittleSmileBlink.visible = false;
	        this.faceBigSmile.visible = false;
	        this.faceBigSmileBlink.visible = false;
	        switch (face) {
	            case Patient.FACE_NEUTRAL:
	                this.faceNeutral.visible = true;
	                break;
	            case Patient.FACE_NEUTRAL_BLINK:
	                this.faceNeutralBlink.visible = true;
	                break;
	            case Patient.FACE_LITTLE_SMILE:
	                this.faceLittleSmile.visible = true;
	                break;
	            case Patient.FACE_LITTLE_SMILE_BLINK:
	                this.faceLittleSmileBlink.visible = true;
	                break;
	            case Patient.FACE_BIG_SMILE:
	                this.faceBigSmile.visible = true;
	                break;
	            case Patient.FACE_BIG_SMILE_BLINK:
	                this.faceBigSmileBlink.visible = true;
	                break;
	            default:
	                break;
	        }
	        this.currentFace = face;
	    };
	    Patient.prototype.setClothes = function (texture, type) {
	        if (type == ClothesItem_1.ClothesItem.TOP) {
	            this.removeChild(this.currentTopClothes);
	            this.currentTopClothesTexture = texture;
	            this.currentTopClothes = pixi_js_1.Sprite.fromFrame(texture);
	            this.addChild(this.currentTopClothes);
	            this.currentTopClothes.x = 182;
	            this.currentTopClothes.y = 400;
	        }
	        else if (type == ClothesItem_1.ClothesItem.BOTTOM) {
	            this.removeChild(this.currentBottomClothes);
	            this.currentBottomClothesTexture = texture;
	            this.currentBottomClothes = pixi_js_1.Sprite.fromFrame(texture);
	            this.addChild(this.currentBottomClothes);
	            this.currentBottomClothes.x = 182;
	            this.currentBottomClothes.y = 500;
	            this.addChild(this.currentTopClothes);
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        Config_1.Config.currentSpeakSound = "barn_nyt_toj_" + Math.ceil(Math.random() * 3);
	        this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	        this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, this.audioExpressionSpeakComplete);
	        this.clothesAdded = true;
	    };
	    Patient.prototype.makeDraggable = function () {
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, this.touchDone);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    Patient.prototype.createEyes = function () {
	        this.pairOfEyes = new PairOfEyes_1.PairOfEyes(this._eyeColorType);
	        this.addChild(this.pairOfEyes);
	        this.pairOfEyes.x = 274;
	        this.pairOfEyes.y = 264;
	    };
	    Patient.prototype.createClothes = function () {
	        if (this.currentBottomClothes != null) {
	            this.removeChild(this.currentBottomClothes);
	        }
	        if (this.currentTopClothes != null) {
	            this.removeChild(this.currentTopClothes);
	        }
	        this.currentBottomClothesTexture = this.currentBottomClothesTexture || "clothesLower_0" + Math.ceil(Math.random() * ClothesItem_1.ClothesItem.NUM_OF_BOTTOM_CLOTHES_ITEMS);
	        this.currentBottomClothes = pixi_js_1.Sprite.fromFrame(this.currentBottomClothesTexture);
	        this.addChild(this.currentBottomClothes);
	        this.currentBottomClothes.x = 182;
	        this.currentBottomClothes.y = 500;
	        this.currentTopClothesTexture = this.currentTopClothesTexture || "clothesUpper_0" + Math.ceil(Math.random() * ClothesItem_1.ClothesItem.NUM_OF_TOP_CLOTHES_ITEMS);
	        this.currentTopClothes = pixi_js_1.Sprite.fromFrame(this.currentTopClothesTexture);
	        this.addChild(this.currentTopClothes);
	        this.currentTopClothes.x = 182;
	        this.currentTopClothes.y = 400;
	    };
	    Patient.prototype.createShadow = function () {
	        this.shadow = pixi_js_1.Sprite.fromFrame("shadow_01");
	        this.addChild(this.shadow);
	        this.shadow.x = 45;
	        this.shadow.y = 720;
	    };
	    Patient.prototype.createSkinLayer = function () {
	        if (this._type > Patient.NUM_OF_TYPES) {
	            Logger_1.Logger.log(this, "type out of range - texture does not exist");
	            return;
	        }
	        var texture;
	        texture = "kid" + this._type;
	        this.skinImage = pixi_js_1.Sprite.fromFrame(texture);
	        this.addChild(this.skinImage);
	    };
	    Patient.prototype.setSkinAndEyeColorType = function () {
	        switch (this._type) {
	            case 1:
	                this._skinType = 1;
	                this._eyeColorType = 5;
	                break;
	            case 2:
	                this._skinType = 4;
	                this._eyeColorType = 3;
	                break;
	            case 3:
	                this._skinType = 3;
	                this._eyeColorType = 2;
	                break;
	            case 4:
	                this._skinType = 2;
	                this._eyeColorType = 4;
	                break;
	            case 5:
	                this._skinType = 1;
	                this._eyeColorType = 1;
	                break;
	            case 6:
	                this._skinType = 3;
	                this._eyeColorType = 4;
	                break;
	            default:
	                break;
	        }
	    };
	    Patient.prototype.createFaces = function () {
	        this.faceNeutral = this.createFace("facialExpression_kid" + this._type + "_neutral");
	        this.faceNeutralBlink = this.createFace("facialExpression_kid" + this._type + "_neutralBlink");
	        this.faceLittleSmile = this.createFace("facialExpression_kid" + this._type + "_littleSmile");
	        this.faceLittleSmileBlink = this.createFace("facialExpression_kid" + this._type + "_littleSmileBlink");
	        this.faceBigSmile = this.createFace("facialExpression_kid" + this._type + "_bigSmile");
	        this.faceBigSmileBlink = this.createFace("facialExpression_kid" + this._type + "_bigSmileBlink");
	    };
	    Patient.prototype.createFace = function (texture) {
	        var faceImage = pixi_js_1.Sprite.fromFrame(texture);
	        this.addChild(faceImage);
	        faceImage.x = 188;
	        faceImage.y = 168;
	        return faceImage;
	    };
	    Patient.prototype.updateEyesMask = function () {
	    };
	    Patient.prototype.playExpressionSpeak = function () {
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	        }
	        Config_1.Config.currentSpeakOverlappingViewsSound = this.getExpressionSpeakSound();
	        this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakOverlappingViewsSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	        this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, this.audioExpressionSpeakComplete);
	    };
	    Patient.prototype.getExpressionSpeakSound = function () {
	        var speak;
	        switch (this.disease) {
	            case Level_1.Level.FRACTURE_HAND:
	                speak = "barn_jeg_har_slaet_min_hand";
	                break;
	            case Level_1.Level.FRACTURE_RADIUS:
	                speak = "barn_min_arm_er_vist_braekket_fordi_jeg_vaeltede_pa_min_cykel";
	                break;
	            case Level_1.Level.INSECT_BITE:
	                speak = "barn_jeg_er_blevet_stukket_af_en_bi_kan_du_hjaelpe_mig";
	                break;
	            case Level_1.Level.PNEUMONIA:
	                speak = "barn_jeg_hoster_rigtig_meget_mon_jeg_er_forkolet";
	                break;
	            case Level_1.Level.POISONING:
	                speak = "barn_det_rumler_i_min_mave_mon_det_er_noget_jeg_har_spist";
	                break;
	            case Level_1.Level.SPRAIN:
	                speak = "barn_min_arm_er_forstuvet_kan_du_reparere_den";
	                break;
	            case Level_1.Level.BURN:
	                speak = "barn_jeg_har_braendt_mig_pa_en_gryde_skal_vi_komme_is_pa";
	                break;
	            default:
	                break;
	        }
	        return speak;
	    };
	    Patient.prototype.startIdleEyeMOvement = function () {
	        this.pairOfEyes.initIdleMovement();
	    };
	    Patient.prototype.destroy = function () {
	        if (this.sndSpeak != null) {
	            this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, this.audioExpressionSpeakComplete);
	        }
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_OUT, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        if (this.pairOfEyes != null) {
	            this.removeChild(this.pairOfEyes);
	            this.pairOfEyes = null;
	        }
	        if (this.currentTopClothes != null) {
	            this.removeChild(this.currentTopClothes);
	            this.currentTopClothes = null;
	        }
	        if (this.currentBottomClothes != null) {
	            this.removeChild(this.currentBottomClothes);
	            this.currentBottomClothes = null;
	        }
	    };
	    return Patient;
	}(pixi_js_1.Sprite));
	Patient.WAITING = "appdrhospital.view.objects.Patient.waiting";
	Patient.BEING_EXAMINED = "appdrhospital.view.objects.Patient.beingExamined";
	Patient.NUM_OF_TYPES = 6;
	Patient.SIZE_SMALL = "appdrhospital.view.objects.Patient.SIZE_SMALL";
	Patient.SIZE_BIG = "appdrhospital.view.objects.Patient.SIZE_BIG";
	Patient.FACE_NEUTRAL = "appdrhospital.view.objects.Patient.FACE_NEUTRAL";
	Patient.FACE_NEUTRAL_BLINK = "appdrhospital.view.objects.Patient.FACE_NEUTRAL_BLINK";
	Patient.FACE_LITTLE_SMILE = "appdrhospital.view.objects.Patient.FACE_LITTLE_SMILE";
	Patient.FACE_LITTLE_SMILE_BLINK = "appdrhospital.view.objects.Patient.FACE_LITTLE_SMILE_BLINK";
	Patient.FACE_BIG_SMILE = "appdrhospital.view.objects.Patient.FACE_BIG_SMILE";
	Patient.FACE_BIG_SMILE_BLINK = "appdrhospital.view.objects.Patient.FACE_BIG_SMILE_BLINK";
	Patient.EXPRESSION_NEUTRAL = "appdrhospital.view.objects.Patient.EXPRESSION_NEUTRAL";
	Patient.EXPRESSION_LITTLE_SMILE = "appdrhospital.view.objects.Patient.EXPRESSION_LITTLE_SMILE";
	Patient.EXPRESSION_BIG_SMILE = "appdrhospital.view.objects.Patient.EXPRESSION_BIG_SMILE";
	exports.Patient = Patient;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Eye_1 = __webpack_require__(49);
	var AssetLoader_1 = __webpack_require__(7);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var PairOfEyes = (function (_super) {
	    __extends(PairOfEyes, _super);
	    function PairOfEyes(eyeColorType) {
	        var _this = _super.call(this) || this;
	        _this.lookInRandomDirection = function () {
	            var randomX = Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_WIDTH);
	            var randomY = Math.round(Math.random() * AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	            var randomPoint = new pixi_js_1.Point(randomX, randomY);
	            _this.eyeRight.lookAtPoint(randomPoint);
	            _this.eyeLeft.lookAtPoint(randomPoint);
	            _this.movementInterval = Math.round((Math.random() * 2000) + 2000);
	            _this.idleMovementTimeout = setTimeout(_this.lookInRandomDirection, _this.movementInterval);
	        };
	        _this.eyeColorType = eyeColorType;
	        _this.onAddedToStage();
	        return _this;
	    }
	    PairOfEyes.prototype.onAddedToStage = function () {
	        Logger_1.Logger.log(this, "PairOfEyes.onAddedToStage(event)");
	        Logger_1.Logger.log(this, "PairOfEyes.onAddedToStage(event)   this.stage == " + this.stage);
	        this.createEyes();
	        this.createReflections();
	    };
	    PairOfEyes.prototype.createEyes = function () {
	        this.eyeRight = new Eye_1.Eye(this.eyeColorType);
	        this.addChild(this.eyeRight);
	        this.eyeLeft = new Eye_1.Eye(this.eyeColorType);
	        this.addChild(this.eyeLeft);
	        this.eyeLeft.x = 106;
	        Logger_1.Logger.log(this, "PairOfEyes createEyes   this.eyeColorType == " + this.eyeColorType);
	    };
	    PairOfEyes.prototype.createReflections = function () {
	        var reflection = pixi_js_1.Sprite.fromFrame("kid_eyes_highlights");
	        this.addChild(reflection);
	        reflection.x = 14;
	        reflection.y = -18;
	    };
	    PairOfEyes.prototype.initIdleMovement = function () {
	    };
	    return PairOfEyes;
	}(pixi_js_1.Sprite));
	exports.PairOfEyes = PairOfEyes;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var Helper_1 = __webpack_require__(14);
	var Eye = (function (_super) {
	    __extends(Eye, _super);
	    function Eye(eyeColorType) {
	        var _this = _super.call(this) || this;
	        _this.stageTouchListener = function (event) {
	            var mousePosition = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.lookAtPoint(mousePosition);
	        };
	        _this.eyeColorType = eyeColorType;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Eye.prototype.onAddedToStage = function () {
	        this.createEyeArt();
	        this.initStageTouchListener();
	    };
	    Eye.prototype.createEyeArt = function () {
	        this.apple = new pixi_js_1.Sprite();
	        var appleImage = pixi_js_1.Sprite.fromFrame("kid_eyes");
	        this.apple.addChild(appleImage);
	        appleImage.x = -(appleImage.width * .5);
	        appleImage.y = -(appleImage.height * .5);
	        this.addChild(this.apple);
	        this.irisTarget = new pixi_js_1.Sprite();
	        this.addChild(this.irisTarget);
	        this.iris = new pixi_js_1.Sprite();
	        var irisImage = pixi_js_1.Sprite.fromFrame("kid_iris_0" + this.eyeColorType);
	        this.iris.addChild(irisImage);
	        irisImage.x = -(irisImage.width * .5);
	        irisImage.y = -(irisImage.height * .5);
	        this.irisTarget.addChild(this.iris);
	    };
	    Eye.prototype.initStageTouchListener = function () {
	        Logger_1.Logger.log(this, "Eye initStageTouchListener");
	        AssetLoader_1.AssetLoader.getInstance().assetCanvas.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.stageTouchListener);
	        AssetLoader_1.AssetLoader.getInstance().assetCanvas.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.stageTouchListener);
	        AssetLoader_1.AssetLoader.getInstance().assetCanvas.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.stageTouchListener);
	    };
	    Eye.prototype.lookAtPoint = function (pointToLookAt) {
	        var pointThisGlobal = this.getGlobalPosition(new pixi_js_1.Point(0, 0));
	        var distance = Helper_1.Helper.lineDistance(pointThisGlobal, pointToLookAt);
	        var deltaX = pointToLookAt.x - pointThisGlobal.x;
	        var deltaY = pointToLookAt.y - pointThisGlobal.y;
	        var angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
	        var angleRadians = Math.atan2(deltaY, deltaX);
	        this.lookInDirection(distance, angleRadians);
	    };
	    Eye.prototype.lookInDirection = function (distance, angleRadians) {
	        var irisDistance = distance / 40;
	        if (irisDistance > 15) {
	            irisDistance = 15;
	        }
	        var irisDestX = Math.cos(angleRadians) * irisDistance;
	        var irisDestY = Math.sin(angleRadians) * irisDistance;
	        TweenLite.to(this.iris, 0.5, { x: irisDestX, y: irisDestY });
	    };
	    return Eye;
	}(pixi_js_1.Sprite));
	exports.Eye = Eye;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var PatientSlot = (function (_super) {
	    __extends(PatientSlot, _super);
	    function PatientSlot() {
	        var _this = _super.call(this) || this;
	        _this.onAddedToStage();
	        return _this;
	    }
	    PatientSlot.prototype.onAddedToStage = function () {
	        this.createSlotArt();
	    };
	    PatientSlot.prototype.createSlotArt = function () {
	        this.slotImage = pixi_js_1.Sprite.fromFrame("kid_outline");
	        this.addChild(this.slotImage);
	        this.slotImage.alpha = 0.5;
	    };
	    PatientSlot.prototype.destroy = function () {
	        if (this.slotImage != null) {
	            this.removeChild(this.slotImage);
	            this.slotImage = null;
	        }
	    };
	    return PatientSlot;
	}(pixi_js_1.Sprite));
	exports.PatientSlot = PatientSlot;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Cross_1 = __webpack_require__(52);
	var pixi_js_1 = __webpack_require__(8);
	var Door = (function (_super) {
	    __extends(Door, _super);
	    function Door() {
	        var _this = _super.call(this) || this;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Door.prototype.onAddedToStage = function () {
	        this.interactive = true;
	        this.createDoorArt();
	        this.removeHighlight();
	    };
	    Door.prototype.createDoorArt = function () {
	        this.cross = new Cross_1.Cross();
	        this.addChild(this.cross);
	        this.cross.x = 68;
	        this.cross.y = 90;
	        this.doorImageOpen = pixi_js_1.Sprite.fromFrame("waitingRoom_door_open");
	        this.addChild(this.doorImageOpen);
	        this.doorImageOpen.x = 13;
	        this.doorImageOpen.y = 10;
	        this.doorImageOpen.visible = false;
	        this.arrow = pixi_js_1.Sprite.fromFrame("waitingRoom_door_arrow");
	        this.addChild(this.arrow);
	        this.arrow.x = 70;
	        this.arrow.y = -50;
	        this.arrow.visible = false;
	        this.doorImageHighlighted = pixi_js_1.Sprite.fromFrame("waitingRoom_doorOutline");
	        this.addChild(this.doorImageHighlighted);
	        this.doorImageHighlighted.scale.x = this.doorImageHighlighted.scale.y = 2;
	    };
	    Door.prototype.highlight = function () {
	        this.doorImageHighlighted.visible = true;
	    };
	    Door.prototype.removeHighlight = function () {
	        this.doorImageHighlighted.visible = false;
	    };
	    Door.prototype.showOpened = function () {
	        this.doorImageOpen.visible = true;
	        this.animateArrow();
	    };
	    Door.prototype.animateArrow = function () {
	        clearTimeout(this.closeTimeout);
	        this.arrow.visible = true;
	        this.arrow.y = -50;
	        TweenMax.killTweensOf(this.arrow);
	        TweenMax.to(this.arrow, 0.5, { y: "+=20", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    Door.prototype.showClosed = function () {
	        var _this = this;
	        this.closeTimeout = setTimeout(function () {
	            if (_this.doorImageOpen != null) {
	                _this.doorImageOpen.visible = false;
	            }
	            if (_this.arrow != null) {
	                TweenMax.killTweensOf(_this.arrow);
	                _this.arrow.visible = false;
	                _this.arrow.y = -50;
	            }
	        }, 1000);
	    };
	    Door.prototype.destroy = function () {
	        if (this.closeTimeout != null) {
	            clearTimeout(this.closeTimeout);
	        }
	        if (this.cross != null) {
	            this.removeChild(this.cross);
	            this.cross = null;
	        }
	        if (this.doorImageOpen != null) {
	            this.removeChild(this.doorImageOpen);
	            this.doorImageOpen = null;
	        }
	        if (this.arrow != null) {
	            this.removeChild(this.arrow);
	            this.arrow = null;
	        }
	        if (this.doorImageHighlighted != null) {
	            this.removeChild(this.doorImageHighlighted);
	            this.doorImageHighlighted = null;
	        }
	    };
	    return Door;
	}(pixi_js_1.Sprite));
	exports.Door = Door;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var ButtonEvent_1 = __webpack_require__(17);
	var Config_1 = __webpack_require__(6);
	var AudioPlayer_1 = __webpack_require__(10);
	var Cross = (function (_super) {
	    __extends(Cross, _super);
	    function Cross() {
	        var _this = _super.call(this) || this;
	        _this.touchListener = function (event) {
	            _this.onState = !_this.onState;
	            _this.crossTurnedOn.alpha = Number(_this.onState);
	            if (_this.onState) {
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("clik_on", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	            }
	            else {
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("clik_off", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	            }
	        };
	        _this.on(ButtonEvent_1.ButtonEvent.TOUCH, _this.touchListener);
	        _this.onAddedToStage();
	        return _this;
	    }
	    Cross.prototype.onAddedToStage = function () {
	        this.createCrossArt();
	    };
	    Cross.prototype.createCrossArt = function () {
	        this.crossTurnedOn = pixi_js_1.Sprite.fromFrame("waitingRoom_plusOn");
	        this.addChild(this.crossTurnedOn);
	        this.crossTurnedOn.alpha = 0;
	    };
	    Cross.prototype.destroy = function () {
	        this.off(ButtonEvent_1.ButtonEvent.TOUCH, this.touchListener);
	        if (this.crossTurnedOn != null) {
	            this.removeChild(this.crossTurnedOn);
	        }
	    };
	    return Cross;
	}(pixi_js_1.Sprite));
	exports.Cross = Cross;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var CremeTube_1 = __webpack_require__(54);
	var Tweezers_1 = __webpack_require__(56);
	var AssetLoader_1 = __webpack_require__(7);
	var Config_1 = __webpack_require__(6);
	var HospitalEvent_1 = __webpack_require__(9);
	var Logger_1 = __webpack_require__(3);
	var Level_1 = __webpack_require__(22);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var AudioPlayer_1 = __webpack_require__(10);
	var PinchingGameView = (function (_super) {
	    __extends(PinchingGameView, _super);
	    function PinchingGameView() {
	        var _this = _super.call(this) || this;
	        _this.onContaminantRemoved = function (event) {
	            _this.contaminantsRemoved++;
	            if (_this.contaminantsRemoved == 1) {
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	                    Config_1.Config.currentSpeakSound = "mille_godt_klaret_kan_du_fjerne_en_mere";
	                }
	                else {
	                    Config_1.Config.currentSpeakSound = "mille_yey_det_er_flot";
	                }
	                if (Config_1.Config.currentSpeakSound != null) {
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	            }
	            if (_this.contaminants.length > 0) {
	            }
	            else {
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_perfekt_alle_bistikkene_er_vaek";
	                if (Config_1.Config.currentSpeakSound != null) {
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	                _this.tweezers.off(HospitalEvent_1.HospitalEvent.CONTAMINANT_REMOVED, _this.onContaminantRemoved);
	                _this.onAllContaminantsRemoved();
	            }
	        };
	        _this.contaminatedAreaRemovedCallback = function () {
	            _this.onGameCompleted();
	        };
	        _this.onGameCompleted = function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_sadan_det_var_du_rigtig_god_til";
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            }
	        };
	        _this.audioGameCompletedComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	                _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	            }
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    PinchingGameView.prototype.init = function () {
	        this.name = "PinchingGameView";
	        this.onAddedToStage();
	    };
	    PinchingGameView.prototype.onAddedToStage = function () {
	        this.drawScene();
	        this.startGame();
	    };
	    PinchingGameView.prototype.drawScene = function () {
	        this.bgQuad = new pixi_js_1.Graphics();
	        this.bgQuad.drawRect(0, 0, 300, 200);
	        this.addChild(this.bgQuad);
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	            this.drawInsectBites();
	        }
	        else if (Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) {
	            this.drawMouthWithPoison();
	        }
	        this.tweezers = new Tweezers_1.Tweezers();
	        this.addChild(this.tweezers);
	        this.tweezers.state = Tweezers_1.Tweezers.IDLE;
	        this.tweezers.targets = this.contaminants;
	        this.contaminatedAreasCreme = this.contaminatedAreas.slice();
	        this.tweezers.targetAreas = this.contaminatedAreas;
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    PinchingGameView.prototype.drawMouthWithPoison = function () {
	        this.background = pixi_js_1.Sprite.fromFrame("forgiftning_mund_0" + Config_1.Config.currentPatient.skinType);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.addChild(this.background);
	        this.contaminants = [];
	        this.contaminatedAreas = [];
	        this.contaminatedAreasCreme = [];
	        var contaminantPositions = [];
	        contaminantPositions.push(new pixi_js_1.Point(380, 300));
	        contaminantPositions.push(new pixi_js_1.Point(450, 280));
	        contaminantPositions.push(new pixi_js_1.Point(500, 400));
	        contaminantPositions.push(new pixi_js_1.Point(640, 300));
	        contaminantPositions.push(new pixi_js_1.Point(800, 600));
	        contaminantPositions.push(new pixi_js_1.Point(900, 500));
	        for (var i = 0; i < contaminantPositions.length; i++) {
	            var position = contaminantPositions[i];
	            var randomFrame = Math.ceil(Math.random() * 3);
	            var contaminatedAreaImage = pixi_js_1.Sprite.fromFrame("insektstik_saar");
	            contaminatedAreaImage.pivot.x = contaminatedAreaImage.width * .5;
	            contaminatedAreaImage.pivot.y = contaminatedAreaImage.height * .5;
	            contaminatedAreaImage.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	            var contaminatedArea = new pixi_js_1.Sprite();
	            contaminatedArea.addChild(contaminatedAreaImage);
	            this.addChild(contaminatedArea);
	            contaminatedArea.x = position.x;
	            contaminatedArea.y = position.y;
	            this.contaminatedAreas.push(contaminatedArea);
	            var contaminantImage = pixi_js_1.Sprite.fromFrame("forgiftning_gift_0" + randomFrame);
	            contaminantImage.pivot.x = contaminantImage.width * .5;
	            contaminantImage.pivot.y = contaminantImage.height * .5;
	            var contaminant = new pixi_js_1.Sprite();
	            contaminant.addChild(contaminantImage);
	            this.addChild(contaminant);
	            contaminant.x = contaminatedArea.x;
	            contaminant.y = contaminatedArea.y;
	            this.contaminants.push(contaminant);
	        }
	    };
	    PinchingGameView.prototype.drawInsectBites = function () {
	        this.background = pixi_js_1.Sprite.fromFrame("insektstik_bg_0" + Config_1.Config.currentPatient.skinType);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.addChild(this.background);
	        this.contaminants = [];
	        this.contaminatedAreas = [];
	        this.contaminatedAreasCreme = [];
	        var insectBitePositions = [];
	        insectBitePositions.push(new pixi_js_1.Point(800, 450));
	        insectBitePositions.push(new pixi_js_1.Point(730, 300));
	        insectBitePositions.push(new pixi_js_1.Point(600, 480));
	        insectBitePositions.push(new pixi_js_1.Point(480, 350));
	        insectBitePositions.push(new pixi_js_1.Point(300, 410));
	        for (var i = 0; i < insectBitePositions.length; i++) {
	            var position = insectBitePositions[i];
	            var contaminatedAreaImage = pixi_js_1.Sprite.fromFrame("insektstik_saar");
	            contaminatedAreaImage.pivot.x = contaminatedAreaImage.width * .5;
	            contaminatedAreaImage.pivot.y = contaminatedAreaImage.height * .5;
	            var contaminatedArea = new pixi_js_1.Sprite();
	            contaminatedArea.addChild(contaminatedAreaImage);
	            this.addChild(contaminatedArea);
	            contaminatedArea.x = position.x;
	            contaminatedArea.y = position.y;
	            this.contaminatedAreas.push(contaminatedArea);
	            var contaminantImage = pixi_js_1.Sprite.fromFrame("insektstik_brod");
	            contaminantImage.pivot.x = contaminantImage.width * .5;
	            contaminantImage.pivot.y = contaminantImage.height;
	            var contaminant = new pixi_js_1.Sprite();
	            contaminant.addChild(contaminantImage);
	            this.addChild(contaminant);
	            contaminant.x = contaminatedArea.x;
	            contaminant.y = contaminatedArea.y;
	            contaminant.rotation = (30 * (Math.PI / 180));
	            this.contaminants.push(contaminant);
	        }
	    };
	    PinchingGameView.prototype.startGame = function () {
	        var _this = this;
	        Logger_1.Logger.log(this, "PinchingGameView startGame");
	        this.contaminantsRemoved = 0;
	        this.tweezers.on(HospitalEvent_1.HospitalEvent.CONTAMINANT_REMOVED, this.onContaminantRemoved);
	        var speakSound;
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	            speakSound = "mille_prov_om_du_kan_hive_bistikkene_ud_med_pincetten";
	        }
	        else if (Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) {
	            speakSound = "mille_prov_at_traekke_bakterierne_ud_med_pincetten";
	        }
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = speakSound;
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                if (_this.contaminantsRemoved == 0) {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	                        Config_1.Config.currentSpeakSound = "mille_pincetten_skal_have_fat_om_bistikket";
	                    }
	                    else if (Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) {
	                        Config_1.Config.currentSpeakSound = "mille_pincetten_skal_have_fat_om_bakterien";
	                    }
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }
	                }
	            }, 8000);
	        }, 1000);
	    };
	    PinchingGameView.prototype.onAllContaminantsRemoved = function () {
	        var _this = this;
	        this.tweezers.state = Tweezers_1.Tweezers.DISABLED;
	        this.tweezers.visible = false;
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.INSECT_BITE) {
	            this.cremeTube = new CremeTube_1.CremeTube(this.contaminatedAreasCreme, this.contaminatedAreaRemovedCallback);
	            this.addChild(this.cremeTube);
	            TweenLite.from(this.cremeTube, 2, { y: AssetLoader_1.AssetLoader.STAGE_HEIGHT + this.cremeTube.height / 2, ease: Elastic.easeInOut });
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_uhh_hvot_sar_bare_klor_helt_vildt_meget_skynd_dig_at_smore_creme_pa";
	                if (Config_1.Config.currentSpeakSound != null) {
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	            }, 1000);
	        }
	        else if (Config_1.Config.currentPatient.disease == Level_1.Level.POISONING) {
	            this.onGameCompleted();
	        }
	    };
	    PinchingGameView.prototype.quitGame = function () {
	        this.emit("backFromTestGame");
	    };
	    PinchingGameView.prototype.destroy = function () {
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.cremeTube != null) {
	            this.removeChild(this.cremeTube);
	            this.cremeTube.destroy();
	            this.cremeTube = null;
	        }
	        if (this.tweezers != null) {
	            this.removeChild(this.tweezers);
	            this.tweezers.destroy();
	            this.tweezers = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.bgQuad != null) {
	            this.removeChild(this.bgQuad);
	            this.bgQuad = null;
	        }
	        if (this.contaminants.length > 0) {
	            for (var i = 0; i < this.contaminants.length; i++) {
	                try {
	                    var contaminant = this.contaminants[i];
	                    this.removeChild(contaminant);
	                }
	                catch (error) {
	                    Logger_1.Logger.log(this, "CATCH this.removeChild(contaminant)");
	                }
	            }
	            this.contaminants = null;
	        }
	        if (this.contaminatedAreas.length > 0) {
	            for (var i = 0; i < this.contaminatedAreas.length; i++) {
	                try {
	                    var contaminatedArea = this.contaminatedAreas[i];
	                    this.removeChild(contaminatedArea);
	                }
	                catch (error) {
	                    Logger_1.Logger.log(this, "CATCH this.removeChild(contaminatedArea)");
	                }
	            }
	            this.contaminatedAreas = null;
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return PinchingGameView;
	}(HospitalGameView_1.HospitalGameView));
	exports.PinchingGameView = PinchingGameView;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var CremeBlob_1 = __webpack_require__(55);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var SpriteHelper_1 = __webpack_require__(29);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var AudioPlayer_1 = __webpack_require__(10);
	var Config_1 = __webpack_require__(6);
	var HospitalGameView_1 = __webpack_require__(13);
	var CremeTube = (function (_super) {
	    __extends(CremeTube, _super);
	    function CremeTube(contaminatedAreas, contaminatedAreaRemovedCallback) {
	        var _this = _super.call(this) || this;
	        _this.onEnterFrame = function (deltaTime) {
	            _this.checkElapsed();
	        };
	        _this.onSprayingTimer = function (deltaTime) {
	            Logger_1.Logger.log(_this, "CremeTube onSprayingTimer   this.cremeBlobsPool.length ==== " + _this.cremeBlobsPool.length);
	            if (_this.cremeBlobsPool.length > 0) {
	                var nextBlob = _this.cremeBlobsPool.shift();
	                nextBlob.x = -50;
	                nextBlob.y = -50;
	                nextBlob.rotation = (Math.random() * 360 * (Math.PI / 180));
	                _this.creamTarget.addChild(nextBlob);
	                _this.blobsToAnimate.push(nextBlob);
	                _this.checkCollisionWithContaminatedAreas(nextBlob);
	            }
	        };
	        _this.animateBlops = function (deltaTime) {
	            var blobsToAnimateLength = _this.blobsToAnimate.length;
	            if (_this.sprayingStopped && blobsToAnimateLength == 0) {
	                pixi_js_1.ticker.shared.remove(_this.animateBlops, _this);
	            }
	            else {
	                for (var i = blobsToAnimateLength - 1; i >= 0; i--) {
	                    var nextBlob = _this.blobsToAnimate[i];
	                    nextBlob.alpha -= _this.elapsed * 5;
	                    if (nextBlob.alpha > 0.7) {
	                        nextBlob.scale.x = nextBlob.scale.y += _this.elapsed * 3;
	                    }
	                    else {
	                        nextBlob.scale.x = nextBlob.scale.y -= _this.elapsed * 3;
	                    }
	                    if (nextBlob.alpha <= 0) {
	                        _this.blobsToAnimate.splice(i, 1);
	                        _this.cremeBlobsPool.push(nextBlob);
	                        nextBlob.x = -2000;
	                        nextBlob.alpha = 1;
	                        nextBlob.scale.x = nextBlob.scale.y = 1;
	                    }
	                }
	            }
	        };
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            Logger_1.Logger.log(_this, "CremeTube touchDown");
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.x = mousePositionCanvas.x;
	            _this.y = mousePositionCanvas.y;
	            _this.startSpraying();
	            try {
	                pixi_js_1.ticker.shared.remove(_this.animateBlops, _this);
	            }
	            catch (error) {
	                Logger_1.Logger.log(_this, "CATCH CremeTube ticker.shared.remove( this.animateBlops, this )");
	            }
	            pixi_js_1.ticker.shared.add(_this.animateBlops, _this);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                _this.y = Math.abs(mousePositionCanvas.y);
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.mouseDown = false;
	            _this.stopSpraying();
	            if (_this.allContaminatedAreasRemoved()) {
	                Logger_1.Logger.log(_this, "CremeTube allContaminatedAreasRemoved *****************************");
	                pixi_js_1.ticker.shared.remove(_this.onSprayingTimer, _this);
	                _this.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                _this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                _this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound("salve_loop");
	                if (_this.contaminatedAreaRemovedCallback != null) {
	                    _this.contaminatedAreaRemovedCallback();
	                    _this.contaminatedAreaRemovedCallback = null;
	                }
	            }
	        };
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.contaminatedAreas = contaminatedAreas;
	        _this.contaminatedAreaRemovedCallback = contaminatedAreaRemovedCallback;
	        _this.onAddedToStage();
	        return _this;
	    }
	    CremeTube.prototype.onAddedToStage = function () {
	        this.createTubeArt();
	        this.cremeBlobsPool = [];
	        for (var i = 0; i < 200; i++) {
	            var blob = new CremeBlob_1.CremeBlob();
	            this.cremeBlobsPool.push(blob);
	            this.creamTarget.addChild(blob);
	            blob.x = -2000;
	        }
	        this.blobsToAnimate = [];
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    Object.defineProperty(CremeTube.prototype, "width", {
	        get: function () {
	            return this.tubeImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CremeTube.prototype, "height", {
	        get: function () {
	            return this.tubeImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CremeTube.prototype.checkCollisionWithContaminatedAreas = function (blob) {
	        var contaminatedAreasLength = this.contaminatedAreas.length;
	        for (var i = 0; i < contaminatedAreasLength; i++) {
	            var currentContaminatedArea = this.contaminatedAreas[i];
	            if (currentContaminatedArea.alpha > (CremeTube.ALPHA_MINIMUM - .03)) {
	                var hit = SpriteHelper_1.SpriteHelper.hitTest(blob.getBounds(), currentContaminatedArea.getBounds());
	                if (hit) {
	                    this.contaminatedArea = currentContaminatedArea;
	                    this.contaminatedArea.alpha -= 0.02;
	                }
	            }
	        }
	    };
	    CremeTube.prototype.allContaminatedAreasRemoved = function () {
	        var toReturn = true;
	        var contaminatedAreasLength = this.contaminatedAreas.length;
	        for (var i = 0; i < contaminatedAreasLength; i++) {
	            var currentContaminatedArea = this.contaminatedAreas[i];
	            if (currentContaminatedArea.alpha > CremeTube.ALPHA_MINIMUM) {
	                toReturn = false;
	            }
	        }
	        return toReturn;
	    };
	    CremeTube.prototype.startSpraying = function () {
	        try {
	            pixi_js_1.ticker.shared.remove(this.onEnterFrame, this);
	            pixi_js_1.ticker.shared.remove(this.onSprayingTimer, this);
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "CATCH ticker.shared.remove( this.onEnterFrame, this )");
	        }
	        pixi_js_1.ticker.shared.add(this.onEnterFrame, this);
	        pixi_js_1.ticker.shared.add(this.onSprayingTimer, this);
	        this.sprayingStopped = false;
	        AudioPlayer_1.AudioPlayer.getInstance().playSound("salve_loop", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	    };
	    CremeTube.prototype.stopSpraying = function () {
	        pixi_js_1.ticker.shared.remove(this.onEnterFrame, this);
	        pixi_js_1.ticker.shared.remove(this.onSprayingTimer, this);
	        this.sprayingStopped = true;
	        AudioPlayer_1.AudioPlayer.getInstance().stopSound("salve_loop");
	    };
	    CremeTube.prototype.createTubeArt = function () {
	        this.tubeImage = pixi_js_1.Sprite.fromFrame("insektstik_tube");
	        this.addChild(this.tubeImage);
	        this.pivot.x = this.tubeImage.width * .5;
	        this.pivot.y = this.tubeImage.height * .5;
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.tubeImage.x, this.tubeImage.y, this.tubeImage.width, this.tubeImage.height);
	        this.rotation = CremeTube.CREME_ROTATION;
	        this.creamTarget = new pixi_js_1.Sprite();
	        this.tubeImage.addChild(this.creamTarget);
	        this.creamTarget.y += this.tubeImage.height * .5 + 30;
	        this.x = 630;
	        this.y = 700;
	    };
	    CremeTube.prototype.checkElapsed = function () {
	        this.timePrevious = this.timeCurrent;
	        this.timeCurrent = new Date().getTime();
	        this.elapsed = (this.timeCurrent - this.timePrevious) * 0.0005;
	    };
	    CremeTube.prototype.destroy = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        try {
	            pixi_js_1.ticker.shared.remove(this.onEnterFrame, this);
	            pixi_js_1.ticker.shared.remove(this.onSprayingTimer, this);
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "CATCH ticker.shared.remove( this.onEnterFrame, this )");
	        }
	        try {
	            pixi_js_1.ticker.shared.remove(this.animateBlops, this);
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "CATCH CremeTube ticker.shared.remove( this.animateBlops, this )");
	        }
	        if (this.tubeImage != null) {
	            if (this.creamTarget != null) {
	                this.tubeImage.removeChild(this.creamTarget);
	                this.creamTarget = null;
	            }
	            this.removeChild(this.tubeImage);
	            this.tubeImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	        if (this.contaminatedAreaRemovedCallback != null) {
	            this.contaminatedAreaRemovedCallback();
	            this.contaminatedAreaRemovedCallback = null;
	        }
	    };
	    return CremeTube;
	}(pixi_js_1.Sprite));
	CremeTube.CREME_ROTATION = (60 * (Math.PI / 180));
	CremeTube.ALPHA_MINIMUM = 0.1;
	exports.CremeTube = CremeTube;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var CremeBlob = (function (_super) {
	    __extends(CremeBlob, _super);
	    function CremeBlob() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.onAddedToStage();
	        return _this;
	    }
	    CremeBlob.prototype.onAddedToStage = function () {
	        this.createBlobArt();
	    };
	    CremeBlob.prototype.createBlobArt = function () {
	        this.blobImage = pixi_js_1.Sprite.fromFrame("insektstik_salve_01");
	        this.addChild(this.blobImage);
	        this.blobImage.pivot.x = this.blobImage.height * .5;
	        this.blobImage.pivot.y = this.blobImage.height * .5;
	    };
	    Object.defineProperty(CremeBlob.prototype, "height", {
	        get: function () {
	            return this.rectCover.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CremeBlob.prototype.destroy = function () {
	        if (this.blobImage != null) {
	            this.removeChild(this.blobImage);
	            this.blobImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return CremeBlob;
	}(pixi_js_1.Sprite));
	exports.CremeBlob = CremeBlob;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var SpriteHelper_1 = __webpack_require__(29);
	var Logger_1 = __webpack_require__(3);
	var HospitalEvent_1 = __webpack_require__(9);
	var pixi_js_1 = __webpack_require__(8);
	var AudioPlayer_1 = __webpack_require__(10);
	var Helper_1 = __webpack_require__(14);
	var HospitalGameView_1 = __webpack_require__(13);
	var Tweezers = (function (_super) {
	    __extends(Tweezers, _super);
	    function Tweezers() {
	        var _this = _super.call(this) || this;
	        _this.allAreaTouchIdleDown = function (event) {
	            _this.allAreaIdleMouseDown = true;
	            _this.pivot.x = 0;
	            _this.pivot.y = 0;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.x = mousePositionCanvas.x;
	            _this.y = mousePositionCanvas.y;
	        };
	        _this.allAreaTouchIdleMove = function (event) {
	            if (_this.allAreaIdleMouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                _this.y = Math.abs(mousePositionCanvas.y);
	                var checkCollision = void 0;
	                checkCollision = _this.checkCollisionWithTargets(_this.pinchingTarget, _this._targetAreas);
	                if (checkCollision) {
	                    _this.alpha = .6;
	                }
	                else {
	                    _this.alpha = 1;
	                }
	            }
	        };
	        _this.allAreaTouchIdleDone = function (event) {
	            _this.allAreaIdleMouseDown = false;
	            if (_this.alpha < 1) {
	                _this.state = Tweezers.PLACED;
	                _this.alpha = 1;
	                if (_this.currentTargetIndex > -1) {
	                    _this._targets.splice(_this.currentTargetIndex, 1);
	                    _this._targetAreas.splice(_this.currentTargetIndex, 1);
	                }
	                _this.x = _this._target.x;
	                _this.y = _this._target.y;
	            }
	        };
	        _this.allAreaTouchClosedDown = function (event) {
	            _this.allAreaClosedMouseDown = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.lastTouchXAll = mousePositionCanvas.x;
	        };
	        _this.allAreaTouchClosedMove = function (event) {
	            if (_this.allAreaClosedMouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.previousTouchXAll = _this.lastTouchXAll || 0;
	                _this.lastTouchXAll = mousePositionCanvas.x;
	                var touchDistanceMoved = _this.lastTouchXAll - _this.previousTouchXAll;
	                if (touchDistanceMoved > 0) {
	                    _this.x += Math.cos(_this.rotation - Math.PI) * touchDistanceMoved;
	                    _this.y += Math.sin(_this.rotation - Math.PI) * touchDistanceMoved;
	                }
	                var distanceStartingPoint = Helper_1.Helper.lineDistance(new pixi_js_1.Point(_this.x, _this.y), _this.targetStartingPoint);
	                var distanceMoved = _this.pinchingPoint.x - distanceStartingPoint;
	                if (distanceStartingPoint > 50) {
	                    Logger_1.Logger.log(_this, "Tweezer PICKED");
	                    _this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.allAreaTouchClosedDown);
	                    _this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.allAreaTouchClosedMove);
	                    _this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.allAreaTouchClosedDone);
	                    _this.removeChild(_this._target);
	                    _this.removeChild(_this._targetArea);
	                    _this.emit(HospitalEvent_1.HospitalEvent.CONTAMINANT_REMOVED);
	                    _this.state = Tweezers.IDLE;
	                    _this.tweezerTop.rotation = Tweezers.TWEEZER_TOP_OPEN_ROTATION;
	                    _this.tweezerBottom.rotation = Tweezers.TWEEZER_BOTTOM_OPEN_ROTATION;
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound("pop");
	                }
	            }
	        };
	        _this.allAreaTouchClosedDone = function (event) {
	            Logger_1.Logger.log(_this, "Tweezers allAreaTouchClosedDone  event.type == " + event.type);
	            _this.allAreaClosedMouseDown = false;
	            Logger_1.Logger.log(_this, "Tweezers allAreaTouchClosedDone this.x == " + _this.x + " :  this.y == " + _this.y);
	        };
	        _this.topAreaTouchDown = function (event) {
	            _this.topAreaMouseDown = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.lastTouchYTop = mousePositionCanvas.y;
	        };
	        _this.topAreaTouchMove = function (event) {
	            if (_this.topAreaMouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.previousTouchYTop = _this.lastTouchYTop || 0;
	                _this.lastTouchYTop = mousePositionCanvas.y;
	                var newRotation = _this.tweezerTop.rotation + (_this.previousTouchYTop - _this.lastTouchYTop) * (Math.PI / 180) / 2;
	                if (newRotation > Tweezers.TWEEZER_TOP_OPEN_ROTATION && newRotation < 0) {
	                    _this.tweezerTop.rotation = newRotation;
	                }
	                var rotateTo = (-10 * (Math.PI / 180));
	                if (_this.tweezerTop.rotation > rotateTo) {
	                    _this.tweezerTop.rotation = -0.08 * (Math.PI / 180);
	                    _this.tweezerBottom.rotation = 0.08 * (Math.PI / 180);
	                    _this.state = Tweezers.CLOSED;
	                    _this.addChild(_this._target);
	                    _this._target.x = _this.pinchingPoint.x;
	                    _this._target.y = _this.pinchingPoint.y;
	                    _this._target.rotation -= _this.rotation;
	                }
	            }
	        };
	        _this.topAreaTouchDone = function (event) {
	            _this.topAreaMouseDown = false;
	            _this.tweezerTop.rotation = Tweezers.TWEEZER_TOP_OPEN_ROTATION;
	        };
	        _this.bottomAreaTouchDown = function (event) {
	            _this.bottomAreaMouseDown = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.lastTouchYBottom = mousePositionCanvas.y;
	        };
	        _this.bottomAreaTouchMove = function (event) {
	            if (_this.bottomAreaMouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.previousTouchYBottom = _this.lastTouchYBottom || 0;
	                _this.lastTouchYBottom = mousePositionCanvas.y;
	                var newRotation = _this.tweezerBottom.rotation + (_this.previousTouchYBottom - _this.lastTouchYBottom) * (Math.PI / 180) / 2;
	                if (newRotation < Tweezers.TWEEZER_BOTTOM_OPEN_ROTATION && newRotation > 0) {
	                    _this.tweezerBottom.rotation = newRotation;
	                }
	                var rotateTo = (10 * (Math.PI / 180));
	                if (_this.tweezerBottom.rotation < rotateTo) {
	                    _this.tweezerTop.rotation = -0.08 * (Math.PI / 180);
	                    _this.tweezerBottom.rotation = 0.08 * (Math.PI / 180);
	                    _this.state = Tweezers.CLOSED;
	                    _this.addChild(_this._target);
	                    _this._target.x = _this.pinchingPoint.x;
	                    _this._target.y = _this.pinchingPoint.y;
	                    _this._target.rotation -= _this.rotation;
	                }
	            }
	        };
	        _this.bottomAreaTouchDone = function (event) {
	            Logger_1.Logger.log(_this, "Tweezers touchDone  event.type == " + event.type);
	            _this.bottomAreaMouseDown = false;
	            Logger_1.Logger.log(_this, "Tweezers touchDone this.x == " + _this.x + " :  this.y == " + _this.y);
	            _this.tweezerBottom.rotation = Tweezers.TWEEZER_BOTTOM_OPEN_ROTATION;
	        };
	        _this.onAddedToStage();
	        return _this;
	    }
	    Tweezers.prototype.onAddedToStage = function () {
	        this.createTweezersArt();
	        this.pinchingPoint = new pixi_js_1.Point(this.tweezerTopImage.width * .9, -this.tweezerTopImage.height * .2);
	        this.pinchingTarget = new pixi_js_1.Graphics();
	        this.pinchingTarget.drawRect(this.pinchingPoint.x, this.pinchingPoint.y, 60, 100);
	        this.pinchingTarget.pivot.x = this.pinchingTarget.width * .5;
	        this.pinchingTarget.pivot.y = this.pinchingTarget.height * .5;
	        this.pinchingTarget.beginFill(0x999999);
	        this.pinchingTarget.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.pinchingTarget);
	    };
	    Object.defineProperty(Tweezers.prototype, "targets", {
	        get: function () {
	            return this._targets;
	        },
	        set: function (value) {
	            this._targets = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tweezers.prototype, "targetAreas", {
	        set: function (value) {
	            this._targetAreas = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tweezers.prototype, "target", {
	        set: function (value) {
	            this._target = value;
	            this.targetStartingPoint = new pixi_js_1.Point(this._target.x, this._target.y);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Tweezers.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	            this.allAreaIdleMouseDown = false;
	            this.allAreaClosedMouseDown = false;
	            this.topAreaMouseDown = false;
	            this.bottomAreaMouseDown = false;
	            switch (this._state) {
	                case Tweezers.IDLE:
	                    this.touchAreaTop.visible = this.touchAreaBottom.visible = false;
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.topAreaTouchDown);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.topAreaTouchMove);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.topAreaTouchDone);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.bottomAreaTouchDown);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.bottomAreaTouchMove);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.bottomAreaTouchDone);
	                    this.touchAreaAll.visible = true;
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchClosedDown);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchClosedMove);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchClosedDone);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchIdleDown);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	                    break;
	                case Tweezers.PLACED:
	                    this.touchAreaTop.visible = this.touchAreaBottom.visible = true;
	                    this.touchAreaTop.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.topAreaTouchDown);
	                    this.touchAreaTop.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.topAreaTouchMove);
	                    this.touchAreaTop.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.topAreaTouchDone);
	                    this.touchAreaBottom.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.bottomAreaTouchDown);
	                    this.touchAreaBottom.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.bottomAreaTouchMove);
	                    this.touchAreaBottom.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.bottomAreaTouchDone);
	                    this.touchAreaAll.visible = false;
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchIdleDown);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchClosedDown);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchClosedMove);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchClosedDone);
	                    this.pivot.x = this.pinchingPoint.x;
	                    this.pivot.y = this.pinchingPoint.y;
	                    break;
	                case Tweezers.CLOSED:
	                    this.touchAreaTop.visible = this.touchAreaBottom.visible = false;
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.topAreaTouchDown);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.topAreaTouchMove);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.topAreaTouchDone);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.bottomAreaTouchDown);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.bottomAreaTouchMove);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.bottomAreaTouchDone);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchIdleDown);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchClosedDown);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchClosedMove);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchClosedDone);
	                    this.touchAreaAll.visible = true;
	                    break;
	                case Tweezers.DISABLED:
	                    this.touchAreaTop.visible = this.touchAreaBottom.visible = false;
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.topAreaTouchDown);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.topAreaTouchMove);
	                    this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.topAreaTouchDone);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.bottomAreaTouchDown);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.bottomAreaTouchMove);
	                    this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.bottomAreaTouchDone);
	                    this.touchAreaAll.visible = true;
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchIdleDown);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	                    this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchClosedDown);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchClosedMove);
	                    this.touchAreaAll.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchClosedDone);
	                    break;
	                default:
	                    break;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Tweezers.prototype.getTargetRect = function (currentTarget) {
	        var targetImage = currentTarget.getChildAt(0);
	        var targetBounds = new pixi_js_1.Rectangle(currentTarget.x, currentTarget.y, targetImage.width, targetImage.height);
	        return targetBounds;
	    };
	    Tweezers.prototype.checkCollisionWithTargets = function (tweezer, _targetAreas) {
	        var targetsLength = _targetAreas.length;
	        for (var i = 0; i < targetsLength; i++) {
	            var currentTarget = this._targets[i];
	            var currentTargetAreas = _targetAreas[i];
	            var targetImage = currentTargetAreas.getChildAt(0);
	            var targetBounds = new pixi_js_1.Rectangle(currentTargetAreas.x, currentTargetAreas.y, targetImage.width, targetImage.height);
	            var hit = SpriteHelper_1.SpriteHelper.hitTest(tweezer.getBounds(), targetBounds);
	            if (hit) {
	                this.currentTargetIndex = i;
	                this.target = currentTarget;
	                this._targetArea = currentTargetAreas;
	                return true;
	            }
	        }
	        this.currentTargetIndex = -1;
	        return false;
	    };
	    Tweezers.prototype.createTweezersArt = function () {
	        this.tweezerTopImage = pixi_js_1.Sprite.fromFrame("insektstik_pincet_top");
	        this.tweezerTopImage.x = -20;
	        this.tweezerTopImage.y = -50;
	        this.tweezerTop = new pixi_js_1.Sprite();
	        this.tweezerTop.addChild(this.tweezerTopImage);
	        this.addChild(this.tweezerTop);
	        this.tweezerTop.rotation = Tweezers.TWEEZER_TOP_OPEN_ROTATION;
	        this.tweezerBottomImage = pixi_js_1.Sprite.fromFrame("insektstik_pincet_bottom");
	        this.tweezerBottomImage.x = -20;
	        this.tweezerBottomImage.y = -20;
	        this.tweezerBottom = new pixi_js_1.Sprite();
	        this.tweezerBottom.addChild(this.tweezerBottomImage);
	        this.addChild(this.tweezerBottom);
	        this.tweezerBottom.rotation = Tweezers.TWEEZER_BOTTOM_OPEN_ROTATION;
	        this.touchAreaAll = new pixi_js_1.Graphics();
	        this.touchAreaAll.interactive = true;
	        this.touchAreaAll.beginFill(0x333333);
	        this.touchAreaAll.drawRect(-this.tweezerTopImage.width, -this.tweezerTopImage.height * 3, this.tweezerTopImage.width * 2, this.tweezerTopImage.height * 6);
	        this.addChild(this.touchAreaAll);
	        this.touchAreaAll.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.touchAreaAll);
	        this.touchAreaTop = new pixi_js_1.Graphics();
	        this.touchAreaTop.interactive = true;
	        this.touchAreaTop.beginFill(0x000000);
	        this.touchAreaTop.drawRect(this.tweezerTopImage.x, this.tweezerTopImage.y, this.tweezerTopImage.width, this.tweezerTopImage.height * 2);
	        this.touchAreaTop.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.tweezerTop.addChild(this.touchAreaTop);
	        this.touchAreaBottom = new pixi_js_1.Graphics();
	        this.touchAreaBottom.interactive = true;
	        this.touchAreaBottom.beginFill(0xFFFFFF);
	        this.touchAreaBottom.drawRect(this.tweezerBottomImage.x, this.tweezerBottomImage.y, this.tweezerBottomImage.width, this.tweezerBottomImage.height * 2);
	        this.tweezerBottom.addChild(this.touchAreaBottom);
	        this.touchAreaBottom.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.touchAreaBottom);
	        this.rotation = Tweezers.TWEEZER_ROTATION;
	        this.x = AssetLoader_1.AssetLoader.STAGE_WIDTH * .5;
	        this.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT * .5;
	    };
	    Tweezers.prototype.destroy = function () {
	        this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.topAreaTouchDown);
	        this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.topAreaTouchMove);
	        this.touchAreaTop.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.topAreaTouchDone);
	        this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.bottomAreaTouchDown);
	        this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.bottomAreaTouchMove);
	        this.touchAreaBottom.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.bottomAreaTouchDone);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchIdleDown);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.allAreaTouchClosedDown);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.allAreaTouchIdleMove);
	        this.touchAreaAll.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.allAreaTouchIdleDone);
	    };
	    return Tweezers;
	}(pixi_js_1.Sprite));
	Tweezers.TWEEZER_TOP_OPEN_ROTATION = -20 * (Math.PI / 180);
	Tweezers.TWEEZER_BOTTOM_OPEN_ROTATION = 20 * (Math.PI / 180);
	Tweezers.TWEEZER_ROTATION = (120 * (Math.PI / 180));
	Tweezers.IDLE = "idle";
	Tweezers.PLACED = "placed";
	Tweezers.CLOSED = "closed";
	Tweezers.DISABLED = "disabled";
	exports.Tweezers = Tweezers;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var ButtonEvent_1 = __webpack_require__(17);
	var HospitalEvent_1 = __webpack_require__(9);
	var Logger_1 = __webpack_require__(3);
	var Button_1 = __webpack_require__(21);
	var pixi_js_1 = __webpack_require__(8);
	var AssetLoader_1 = __webpack_require__(7);
	var AudioPlayer_1 = __webpack_require__(10);
	var Config_1 = __webpack_require__(6);
	var BackBtn = (function (_super) {
	    __extends(BackBtn, _super);
	    function BackBtn(sprite, destination, textureName, posRight) {
	        if (destination === void 0) { destination = HospitalEvent_1.HospitalEvent.QUIT_APP; }
	        if (textureName === void 0) { textureName = "ramasjang_tilbagepil"; }
	        if (posRight === void 0) { posRight = false; }
	        var _this = _super.call(this) || this;
	        _this.btnBackPressed = function (event) {
	            Logger_1.Logger.log(_this, "BackBtn btnBackPressed");
	            _this.btnBack.off(ButtonEvent_1.ButtonEvent.CLICKED, _this.btnBackPressed);
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            _this.emit(_this.destination);
	        };
	        _this.sprite = sprite;
	        _this.destination = destination;
	        _this.textureName = textureName;
	        _this.createButton(posRight);
	        return _this;
	    }
	    BackBtn.prototype.createButton = function (posRight) {
	        if (posRight === void 0) { posRight = false; }
	        this.btnBack = new Button_1.Button();
	        this.btnBack.addTexture(pixi_js_1.Texture.fromFrame(this.textureName));
	        this.sprite.addChild(this.btnBack);
	        this.btnBack.pivot.x = Math.floor(this.btnBack.width * .5);
	        this.btnBack.pivot.y = Math.floor(this.btnBack.height * .5);
	        this.btnBack.name = "back";
	        if (posRight) {
	            this.btnBack.x = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH - (BackBtn.OFFSET_X + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2))) - 15);
	        }
	        else {
	            this.btnBack.x = Math.floor(this.btnBack.width + (BackBtn.OFFSET_X + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2))));
	        }
	        var addedY = posRight ? 20 : 0;
	        this.btnBack.y = Math.floor(this.btnBack.height + BackBtn.OFFSET_Y + addedY + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioY / 2)) + addedY);
	        this.btnBack.on(ButtonEvent_1.ButtonEvent.CLICKED, this.btnBackPressed);
	    };
	    BackBtn.prototype.destroy = function () {
	        this.btnBack.off(ButtonEvent_1.ButtonEvent.CLICKED, this.btnBackPressed);
	        this.sprite.removeChild(this.btnBack);
	        Logger_1.Logger.log(this, "BackBtn this.btnBack destroy");
	    };
	    return BackBtn;
	}(pixi_js_1.Sprite));
	BackBtn.OFFSET_X = 20;
	BackBtn.OFFSET_Y = 600;
	exports.BackBtn = BackBtn;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var Config_1 = __webpack_require__(6);
	var Level_1 = __webpack_require__(22);
	var Logger_1 = __webpack_require__(3);
	var TargetObject_1 = __webpack_require__(59);
	var Piece_1 = __webpack_require__(60);
	var HospitalEvent_1 = __webpack_require__(9);
	var AssetLoader_1 = __webpack_require__(7);
	var SpriteHelper_1 = __webpack_require__(29);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var AudioPlayer_1 = __webpack_require__(10);
	var PuzzleGameView = (function (_super) {
	    __extends(PuzzleGameView, _super);
	    function PuzzleGameView() {
	        var _this = _super.call(this) || this;
	        _this.pieceTouched = function (data) {
	            _this.touchedPiece = data;
	        };
	        _this.touchDone = function () {
	            Logger_1.Logger.log(_this, "PuzzleGame touchDone");
	            _this.mouseDown = false;
	            var currentTargetObject = _this.touchedPiece.targetObject;
	            var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.touchedPiece.getBounds(), currentTargetObject.getBounds());
	            if (hit) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound("knogle", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                var currentTargetObject_1 = _this.touchedPiece.targetObject;
	                TweenLite.to(_this.touchedPiece, 0.4, { x: _this.touchedPiece.targetObject.x, y: _this.touchedPiece.targetObject.y, onComplete: function () {
	                        currentTargetObject_1.visible = false;
	                        if (++_this.piecesInPlace == _this.pieces.length) {
	                            _this.onGameCompleted();
	                        }
	                        else if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_HAND && _this.piecesInPlace == 1) {
	                            if (Config_1.Config.currentSpeakSound != null) {
	                                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                            }
	                            Config_1.Config.currentSpeakSound = "mille_super_flot";
	                            if (Config_1.Config.currentSpeakSound != null) {
	                                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                            }
	                        }
	                    } });
	                _this.touchedPiece.removeTouch();
	                _this.touchedPiece.signalPiece.remove(_this.pieceTouched);
	                _this.touchedPiece.signalPieceTouchDone.remove(_this.touchDone);
	            }
	            else {
	                Logger_1.Logger.log(_this, "this.touchedPiece.height==== " + _this.touchedPiece.height);
	                TweenLite.to(_this.touchedPiece, 0.4, { x: _this.touchedPiece.initialPosition.x, y: _this.touchedPiece.initialPosition.y });
	                _this.touchedPiece.resetRotation();
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("negative", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }
	        };
	        _this.onGameCompleted = function () {
	            Logger_1.Logger.log(_this, "PuzzleGameView.onGameCompleted()");
	            var objectToHighlight;
	            if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_RADIUS) {
	                TweenLite.to(_this.wholeObject, 2, { alpha: 1 });
	                _this.hidePieces();
	                objectToHighlight = _this.wholeObject;
	            }
	            else if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_HAND) {
	                objectToHighlight = _this.background;
	            }
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_sadan_det_var_du_rigtig_god_til";
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            }
	        };
	        _this.audioGameCompletedComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    PuzzleGameView.prototype.init = function () {
	        this.onAddedToStage();
	    };
	    PuzzleGameView.prototype.onAddedToStage = function () {
	        this.name = "PuzzleGameView";
	        Logger_1.Logger.log(this, "Config.currentPatient.disease: " + Config_1.Config.currentPatient.disease);
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_RADIUS)
	            this.drawSceneArm();
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_HAND)
	            this.drawSceneHand();
	        this.startGame();
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    PuzzleGameView.prototype.drawSceneArm = function () {
	        this.bgQuad = new pixi_js_1.Graphics();
	        this.bgQuad.beginFill(0xc1fdf1);
	        this.bgQuad.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.bgQuad);
	        this.background = pixi_js_1.Sprite.fromFrame("brokenBonesGame_armBackground");
	        this.addChild(this.background);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.wholeObject = pixi_js_1.Sprite.fromFrame("brokenBonesGame_boneRadius_complete");
	        this.addChild(this.wholeObject);
	        this.wholeObject.x = 330;
	        this.wholeObject.y = 152;
	        this.wholeObject.rotation = 15 * (Math.PI / 180);
	        this.wholeObject.alpha = 0;
	        this.pieces = [];
	        var targetObject_1 = new TargetObject_1.TargetObject("brokenBonesGame_boneRadius_01", new pixi_js_1.Point(366, 250), 41);
	        this.addChild(targetObject_1);
	        var piece_1 = new Piece_1.Piece("brokenBonesGame_boneRadius_01", new pixi_js_1.Point(640, 200), -20, targetObject_1, "piece_1_arm");
	        this.addChild(piece_1);
	        this.pieces.push(piece_1);
	        var targetObject_2 = new TargetObject_1.TargetObject("brokenBonesGame_boneRadius_02", new pixi_js_1.Point(462, 282), 3);
	        this.addChild(targetObject_2);
	        var piece_2 = new Piece_1.Piece("brokenBonesGame_boneRadius_02", new pixi_js_1.Point(800, 200), 30, targetObject_2, "piece_2_arm");
	        this.addChild(piece_2);
	        this.pieces.push(piece_2);
	        var targetObject_3 = new TargetObject_1.TargetObject("brokenBonesGame_boneRadius_03", new pixi_js_1.Point(594, 308), 22);
	        this.addChild(targetObject_3);
	        var piece_3 = new Piece_1.Piece("brokenBonesGame_boneRadius_03", new pixi_js_1.Point(510, 120), 0, targetObject_3, "piece_3_arm");
	        this.addChild(piece_3);
	        this.pieces.push(piece_3);
	        var targetObject_4 = new TargetObject_1.TargetObject("brokenBonesGame_boneRadius_04", new pixi_js_1.Point(716, 336), 30);
	        this.addChild(targetObject_4);
	        var piece_4 = new Piece_1.Piece("brokenBonesGame_boneRadius_04", new pixi_js_1.Point(366, 150), 0, targetObject_4, "piece_4_arm");
	        this.addChild(piece_4);
	        this.pieces.push(piece_4);
	    };
	    PuzzleGameView.prototype.drawSceneHand = function () {
	        this.bgQuad = new pixi_js_1.Graphics();
	        this.bgQuad.beginFill(0xc1fdf1);
	        this.bgQuad.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.bgQuad);
	        this.background = pixi_js_1.Sprite.fromFrame("braekketHaand_bg");
	        this.addChild(this.background);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.pieces = [];
	        var targetObject_1 = new TargetObject_1.TargetObject("braekketHaand_metaCarpal_2_A", new pixi_js_1.Point(676, 256), 20);
	        this.addChild(targetObject_1);
	        var piece_1 = new Piece_1.Piece("braekketHaand_metaCarpal_2_A", new pixi_js_1.Point(1080, 40), 0, targetObject_1, "piece_1_hand");
	        this.addChild(piece_1);
	        this.pieces.push(piece_1);
	        var targetObject_2 = new TargetObject_1.TargetObject("braekketHaand_metaCarpal_2_B", new pixi_js_1.Point(778, 295), 20);
	        this.addChild(targetObject_2);
	        var piece_2 = new Piece_1.Piece("braekketHaand_metaCarpal_2_B", new pixi_js_1.Point(1080, 140), 0, targetObject_2, "piece_2_hand");
	        this.addChild(piece_2);
	        this.pieces.push(piece_2);
	        var targetObject_3 = new TargetObject_1.TargetObject("braekketHaand_metaCarpal_5_complete", new pixi_js_1.Point(460, 500), 30);
	        this.addChild(targetObject_3);
	        var piece_3 = new Piece_1.Piece("braekketHaand_metaCarpal_5_complete", new pixi_js_1.Point(1080, 240), 0, targetObject_3, "piece_3_hand");
	        this.addChild(piece_3);
	        this.pieces.push(piece_3);
	        var targetObject_4 = new TargetObject_1.TargetObject("braekketHaand_phalanx_P_3", new pixi_js_1.Point(790, 480), 30);
	        this.addChild(targetObject_4);
	        var piece_4 = new Piece_1.Piece("braekketHaand_phalanx_P_3", new pixi_js_1.Point(1080, 340), 0, targetObject_4, "piece_4_hand");
	        this.addChild(piece_4);
	        this.pieces.push(piece_4);
	        var targetObject_5 = new TargetObject_1.TargetObject("braekketHaand_phalanx_M_2", new pixi_js_1.Point(950, 430), 30);
	        this.addChild(targetObject_5);
	        var piece_5 = new Piece_1.Piece("braekketHaand_phalanx_M_2", new pixi_js_1.Point(1080, 440), 0, targetObject_5, "piece_5_hand");
	        this.addChild(piece_5);
	        this.pieces.push(piece_5);
	        var targetObject_6 = new TargetObject_1.TargetObject("braekketHaand_phalanx_M_5", new pixi_js_1.Point(645, 635), 30);
	        this.addChild(targetObject_6);
	        var piece_6 = new Piece_1.Piece("braekketHaand_phalanx_M_5", new pixi_js_1.Point(1080, 540), 0, targetObject_6, "piece_6_hand");
	        this.addChild(piece_6);
	        this.pieces.push(piece_6);
	        var targetObject_7 = new TargetObject_1.TargetObject("braekketHaand_phalanx_D_1", new pixi_js_1.Point(976, 134), 0);
	        this.addChild(targetObject_7);
	        var piece_7 = new Piece_1.Piece("braekketHaand_phalanx_D_1", new pixi_js_1.Point(1080, 640), 0, targetObject_7, "piece_7_hand");
	        this.addChild(piece_7);
	        this.pieces.push(piece_7);
	        var targetObject_8 = new TargetObject_1.TargetObject("braekketHaand_phalanx_D_4", new pixi_js_1.Point(842, 652), 30);
	        this.addChild(targetObject_8);
	        var piece_8 = new Piece_1.Piece("braekketHaand_phalanx_D_4", new pixi_js_1.Point(1080, 740), 0, targetObject_8, "piece_8_hand");
	        this.addChild(piece_8);
	        this.pieces.push(piece_8);
	    };
	    PuzzleGameView.prototype.startGame = function () {
	        var _this = this;
	        this.piecesInPlace = 0;
	        for (var i = 0; i < this.pieces.length; i++) {
	            var piece = this.pieces[i];
	            piece.signalPiece.add(this.pieceTouched);
	            piece.signalPieceTouchDone.add(this.touchDone);
	        }
	        var speakSound;
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_HAND) {
	            speakSound = "mille_knoglerne_er_helt_rodet_rundt";
	        }
	        else if (Config_1.Config.currentPatient.disease == Level_1.Level.FRACTURE_RADIUS) {
	            speakSound = "mille_knoglen_i_armen_er_braekket_prov_om_du_kan_samle_den_igen";
	        }
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = speakSound;
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }
	        }, 1000);
	    };
	    PuzzleGameView.prototype.hidePieces = function () {
	        for (var _i = 0, _a = this.pieces; _i < _a.length; _i++) {
	            var piece = _a[_i];
	            TweenMax.to(piece, 2, { alpha: 0 });
	        }
	    };
	    PuzzleGameView.prototype.destroy = function () {
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.bgQuad != null) {
	            this.removeChild(this.bgQuad);
	            this.bgQuad = null;
	        }
	        if (this.wholeObject != null) {
	            this.removeChild(this.wholeObject);
	            this.wholeObject = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        for (var i = 0; i < this.pieces.length; i++) {
	            var piece = this.pieces[i];
	            piece.signalPiece.remove(this.pieceTouched);
	            piece.signalPieceTouchDone.remove(this.touchDone);
	            piece.destroy();
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return PuzzleGameView;
	}(HospitalGameView_1.HospitalGameView));
	PuzzleGameView.PIECE_TOUCH_OFFSET = 100;
	exports.PuzzleGameView = PuzzleGameView;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var TargetObject = (function (_super) {
	    __extends(TargetObject, _super);
	    function TargetObject(texture, position, rotation) {
	        var _this = _super.call(this) || this;
	        _this.textureName = texture;
	        _this.x = position.x;
	        _this.y = position.y;
	        _this.rotation = (rotation * (Math.PI / 180));
	        _this.onAddedToStage();
	        return _this;
	    }
	    TargetObject.prototype.onAddedToStage = function () {
	        this.createPieceArt();
	    };
	    TargetObject.prototype.createPieceArt = function () {
	        this.pieceImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.pieceImage);
	        this.pieceImage.x = -(this.pieceImage.width / 2);
	        this.pieceImage.y = -(this.pieceImage.height / 2);
	        this.pieceImage.alpha = 0.5;
	    };
	    return TargetObject;
	}(pixi_js_1.Sprite));
	exports.TargetObject = TargetObject;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var AssetLoader_1 = __webpack_require__(7);
	var signals_js_1 = __webpack_require__(33);
	var PuzzleGameView_1 = __webpack_require__(58);
	var HospitalGameView_1 = __webpack_require__(13);
	var Piece = (function (_super) {
	    __extends(Piece, _super);
	    function Piece(texture, initialPosition, initialRotation, targetObject, type) {
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            var mousePosition = event.data.getLocalPosition(_this);
	            TweenLite.to(_this.pieceImage, 0.4, { rotation: _this._targetObject.rotation });
	            _this.x = mousePositionCanvas.x;
	            _this.y = mousePositionCanvas.y;
	            _this.pieceImage.y = -PuzzleGameView_1.PuzzleGameView.PIECE_TOUCH_OFFSET;
	            _this.signalPiece.dispatch(_this);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                var mousePosition = event.data.getLocalPosition(_this);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                _this.y = Math.abs(mousePositionCanvas.y);
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.mouseDown = false;
	            TweenLite.to(_this.pieceImage, 0.4, { y: 0 });
	            _this.signalPieceTouchDone.dispatch();
	        };
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.textureName = texture;
	        _this._initialPosition = initialPosition;
	        _this._initialRotation = initialRotation * (Math.PI / 180);
	        _this._targetObject = targetObject;
	        _this._type = type;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Piece.prototype.onAddedToStage = function () {
	        this.signalPiece = new signals_js_1.Signal();
	        this.signalPieceTouchDone = new signals_js_1.Signal();
	        this.createPieceArt();
	        this.pieceImage.pivot.x = this.pieceImage.width * .5;
	        this.pieceImage.pivot.y = this.pieceImage.height * .5;
	        this.pieceImage.rotation = this._initialRotation;
	        this.x = this.initialPosition.x;
	        this.y = this.initialPosition.y;
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    Piece.prototype.resetRotation = function () {
	        TweenLite.to(this.pieceImage, 0.4, { rotation: this._initialRotation });
	    };
	    Object.defineProperty(Piece.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "touch", {
	        get: function () {
	            return this._touch;
	        },
	        set: function (value) {
	            this._touch = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "targetObject", {
	        get: function () {
	            return this._targetObject;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "initialRotation", {
	        get: function () {
	            return this._initialRotation;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "initialPosition", {
	        get: function () {
	            return this._initialPosition;
	        },
	        set: function (value) {
	            this.x = Math.floor(value.x + this.width * .5);
	            this.y = Math.floor(value.y + this.height * .5);
	            this._initialPosition = new pixi_js_1.Point(this.x, this.y);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "width", {
	        get: function () {
	            return this.pieceImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "height", {
	        get: function () {
	            return this.pieceImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Piece.prototype.createPieceArt = function () {
	        this.pieceImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.pieceImage);
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0x444444);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.pivot.x = this.pieceImage.width * .5;
	        this.rectCover.pivot.y = this.pieceImage.height * .5;
	        this.rectCover.drawRect(this.pieceImage.x, this.pieceImage.y, this.pieceImage.width, this.pieceImage.height);
	    };
	    Piece.prototype.removeTouch = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    Piece.prototype.destroy = function () {
	        this.removeTouch();
	        if (this.pieceImage != null) {
	            this.removeChild(this.pieceImage);
	            this.pieceImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return Piece;
	}(pixi_js_1.Sprite));
	exports.Piece = Piece;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var TargetObject_1 = __webpack_require__(62);
	var Piece_1 = __webpack_require__(63);
	var Config_1 = __webpack_require__(6);
	var Level_1 = __webpack_require__(22);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalEvent_1 = __webpack_require__(9);
	var Logger_1 = __webpack_require__(3);
	var SpriteHelper_1 = __webpack_require__(29);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var Helper_1 = __webpack_require__(14);
	var AudioPlayer_1 = __webpack_require__(10);
	var SoothingGameView = (function (_super) {
	    __extends(SoothingGameView, _super);
	    function SoothingGameView() {
	        var _this = _super.call(this) || this;
	        _this.GRID_POSITION = new pixi_js_1.Point(385 + 58, 96 + 74);
	        _this.SQUARE_SIZE = 98;
	        _this.INITIAL_PIECE_POSITION = new pixi_js_1.Point(630, 573);
	        _this.INIT_NUM_OF_TARGETOBJECTS = 15;
	        _this.SPAWN_TARGET_OBJECTS_TIMER_INTERVAL = 15000;
	        _this.onExplosionComplete = function () {
	            _this.removeChild(_this.explosion);
	        };
	        _this.pieceTouched = function (data) {
	            _this.touchedPiece = data;
	        };
	        _this.touchDone = function () {
	            _this.mouseDown = false;
	            var collidedTargetObject = _this.checkTargetCollision(_this.touchedPiece);
	            if (collidedTargetObject != null) {
	                TweenLite.to(_this.touchedPiece, 0.4, { x: collidedTargetObject.x + _this.touchedPiece.width * .5, y: collidedTargetObject.y + _this.touchedPiece.height * .5, onComplete: _this.placePieceInPuzzle, onCompleteParams: [collidedTargetObject] });
	            }
	            else {
	                TweenLite.to(_this.touchedPiece, 0.4, {
	                    x: _this.touchedPiece.initialPosition.x,
	                    y: _this.touchedPiece.initialPosition.y
	                });
	                AudioPlayer_1.AudioPlayer.getInstance().playSound("negative", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }
	        };
	        _this.placePieceInPuzzle = function (collidedTarget) {
	            var collidedTargetObject = collidedTarget;
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("positive", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            _this.addChild(_this.explosion);
	            _this.explosion.x = collidedTargetObject.x - collidedTargetObject.width * .5;
	            _this.explosion.y = collidedTargetObject.y - collidedTargetObject.height * .5;
	            Logger_1.Logger.log("collidedTargetObject width / height == " + collidedTargetObject.width + " : " + collidedTargetObject.height);
	            _this.explosion.gotoAndPlay(1);
	            _this.slotsAvailable.push(new pixi_js_1.Point(collidedTargetObject.x, collidedTargetObject.y));
	            collidedTargetObject.y = _this.OFF_STAGE_POSITION.y;
	            _this.targetObjectsWaiting.push(collidedTargetObject);
	            _this.targetObjects.splice(_this.targetObjects.indexOf(collidedTargetObject), 1);
	            _this.touchedPiece.y = _this.OFF_STAGE_POSITION.y;
	            if (_this.targetObjects.length == 0) {
	                _this.onGameCompleted();
	            }
	            else {
	                if (_this.targetsPlaced <= _this.piecesInPlace) {
	                    _this.placeNextTarget();
	                }
	                _this.spawnNextPiece();
	                if (_this.targetObjects.length == _this.INIT_NUM_OF_TARGETOBJECTS - 1) {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_godt_klaret_kan_du_fjerne_en_mere";
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	                if (_this.targetObjects.length < _this.INIT_NUM_OF_TARGETOBJECTS / 2 && !_this.halfwayEncouragingSpeakDone) {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_super_flot";
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    _this.halfwayEncouragingSpeakDone = true;
	                }
	            }
	        };
	        _this.onGameCompleted = function () {
	            if (Config_1.Config.currentPatient.disease == Level_1.Level.BURN) {
	                _this.grid.alpha = 0;
	            }
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_wow_du_er_god";
	            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	        };
	        _this.audioGameCompletedComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    SoothingGameView.prototype.init = function () {
	        this.name = "SoothingGameView";
	        if (Config_1.Config.currentPatient.disease == Level_1.Level.SPRAIN) {
	            this.currentDisease = "forstuvning";
	            this.backgroundName = "forstuvning_bg";
	        }
	        else if (Config_1.Config.currentPatient.disease == Level_1.Level.BURN) {
	            this.currentDisease = "brandsaar";
	            this.backgroundName = "brandsaar_arm_0" + Config_1.Config.currentPatient.skinType;
	        }
	        this.onAddedToStage();
	    };
	    SoothingGameView.prototype.onAddedToStage = function () {
	        this.OFF_STAGE_POSITION = new pixi_js_1.Point(0, AssetLoader_1.AssetLoader.STAGE_HEIGHT + 200);
	        this.drawScene();
	        this.startGame();
	    };
	    SoothingGameView.prototype.drawScene = function () {
	        var _this = this;
	        this.bgQuad = new pixi_js_1.Graphics();
	        this.bgQuad.beginFill(0xc1fdf1);
	        this.bgQuad.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.bgQuad);
	        this.background = pixi_js_1.Sprite.fromFrame(this.backgroundName);
	        this.addChild(this.background);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.grid = pixi_js_1.Sprite.fromFrame("forstuvning_grid");
	        this.addChild(this.grid);
	        this.grid.x = this.GRID_POSITION.x;
	        this.grid.y = this.GRID_POSITION.y;
	        this.grid.scale.x = this.grid.scale.y = 2;
	        this.targetObjects = [];
	        for (var i = 0; i < this.INIT_NUM_OF_TARGETOBJECTS; i++) {
	            if (i < this.INIT_NUM_OF_TARGETOBJECTS * 0.25) {
	                this.createAndAddTargetObject(this.currentDisease + "_ikon_a", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_1);
	            }
	            else if (i < this.INIT_NUM_OF_TARGETOBJECTS * 0.5) {
	                this.createAndAddTargetObject(this.currentDisease + "_ikon_b", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_2);
	            }
	            else if (i < this.INIT_NUM_OF_TARGETOBJECTS * 0.75) {
	                this.createAndAddTargetObject(this.currentDisease + "_ikon_c", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_3);
	            }
	            else if (i < this.INIT_NUM_OF_TARGETOBJECTS) {
	                this.createAndAddTargetObject(this.currentDisease + "_ikon_d", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_4);
	            }
	        }
	        this.pieces = [];
	        this.piece_1 = new Piece_1.Piece(this.currentDisease + "_ikon_a", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_1);
	        this.addChild(this.piece_1);
	        this.pieces.push(this.piece_1);
	        this.piece_1.visible = false;
	        this.piece_2 = new Piece_1.Piece(this.currentDisease + "_ikon_b", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_2);
	        this.addChild(this.piece_2);
	        this.pieces.push(this.piece_2);
	        this.piece_2.visible = false;
	        this.piece_3 = new Piece_1.Piece(this.currentDisease + "_ikon_c", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_3);
	        this.addChild(this.piece_3);
	        this.pieces.push(this.piece_3);
	        this.piece_3.visible = false;
	        this.piece_4 = new Piece_1.Piece(this.currentDisease + "_ikon_d", new pixi_js_1.Point(this.OFF_STAGE_POSITION.x, this.OFF_STAGE_POSITION.y), SoothingGameView.TYPE_4);
	        this.addChild(this.piece_4);
	        this.pieces.push(this.piece_4);
	        this.piece_4.visible = false;
	        var frames = [];
	        for (var i = 1; i < 9; i++) {
	            var val = i < 10 ? '0' + i : i;
	            frames.push(pixi_js_1.Texture.fromFrame('lungebetaendelse_ani_explosion_00' + val));
	        }
	        this.explosion = new pixi_js_1.extras.AnimatedSprite(frames);
	        this.explosion.loop = false;
	        this.explosion.animationSpeed = .5;
	        this.explosion.onComplete = function () {
	            _this.onExplosionComplete();
	        };
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    SoothingGameView.prototype.createAndAddTargetObject = function (texture, position, type) {
	        var targetObject = new TargetObject_1.TargetObject(texture, position, type);
	        this.addChild(targetObject);
	        this.targetObjects.push(targetObject);
	        return targetObject;
	    };
	    SoothingGameView.prototype.startGame = function () {
	        var _this = this;
	        this.piecesInPlace = 0;
	        this.targetsPlaced = 0;
	        for (var i = 0; i < this.pieces.length; i++) {
	            var piece = this.pieces[i];
	            piece.signalPiece.add(this.pieceTouched);
	            piece.signalPieceTouchDone.add(this.touchDone);
	        }
	        this.placeAllTargets();
	        this.spawnNextPiece();
	        this.targetObjectsWaiting = [];
	        this.slotsAvailable = [];
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_tag_den_nederste_brik_prov_om_du_kan";
	            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	        }, 1000);
	    };
	    SoothingGameView.prototype.placeAllTargets = function () {
	        var occupiedSlots = [];
	        while (this.targetsPlaced < this.INIT_NUM_OF_TARGETOBJECTS) {
	            var pointToTry = new pixi_js_1.Point(Math.ceil(Math.random() * 5), Math.ceil(Math.random() * 3));
	            if (!isOccupied(pointToTry)) {
	                occupiedSlots.push(pointToTry);
	                this.placeNextTarget(pointToTry.x, pointToTry.y, this.targetsPlaced);
	                this.targetsPlaced++;
	            }
	        }
	        function isOccupied(point) {
	            for (var i = 0; i < occupiedSlots.length; i++) {
	                if (occupiedSlots[i].equals(point)) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    };
	    SoothingGameView.prototype.placeNextTarget = function (column, row, targetIndex) {
	        if (column === void 0) { column = 0; }
	        if (row === void 0) { row = 0; }
	        if (targetIndex === void 0) { targetIndex = 0; }
	        var nextTarget = this.targetObjects[targetIndex];
	        if (column > 0 && row > 0) {
	            nextTarget.x = this.GRID_POSITION.x + this.SQUARE_SIZE * (column - 1);
	            nextTarget.y = this.GRID_POSITION.y + this.SQUARE_SIZE * (row - 1);
	        }
	        else {
	            nextTarget.x = this.GRID_POSITION.x + this.SQUARE_SIZE * (Math.floor(Math.random() * 6));
	            nextTarget.y = this.GRID_POSITION.y + this.SQUARE_SIZE * (Math.floor(Math.random() * 4));
	        }
	    };
	    SoothingGameView.prototype.spawnNextPiece = function () {
	        var randomTargetObject = this.targetObjects[Math.floor(Math.random() * this.targetObjects.length)];
	        var nextPiece;
	        switch (randomTargetObject.type) {
	            case SoothingGameView.TYPE_1:
	                nextPiece = this.piece_1;
	                break;
	            case SoothingGameView.TYPE_2:
	                nextPiece = this.piece_2;
	                break;
	            case SoothingGameView.TYPE_3:
	                nextPiece = this.piece_3;
	                break;
	            case SoothingGameView.TYPE_4:
	                nextPiece = this.piece_4;
	                break;
	            default:
	                break;
	        }
	        nextPiece.initialPosition = this.INITIAL_PIECE_POSITION;
	        nextPiece.visible = true;
	    };
	    SoothingGameView.prototype.checkTargetCollision = function (piece) {
	        var toReturn;
	        var collidingTargetObjects = [];
	        var targetObjectsLength = this.targetObjects.length;
	        var hit;
	        for (var i = 0; i < targetObjectsLength; i++) {
	            var nextTarget = this.targetObjects[i];
	            if (piece.type == nextTarget.type) {
	                hit = SpriteHelper_1.SpriteHelper.hitTest(piece.getBounds(), nextTarget.getBounds());
	                if (hit) {
	                    collidingTargetObjects.push(nextTarget);
	                }
	            }
	        }
	        if (collidingTargetObjects.length > 0) {
	            var nearestTargetObject = void 0;
	            var shortestDistance = void 0;
	            for (var j = 0; j < collidingTargetObjects.length; j++) {
	                var nextCollidingTarget = collidingTargetObjects[j];
	                var distance = Helper_1.Helper.lineDistance(new pixi_js_1.Point(piece.x, piece.y), new pixi_js_1.Point(nextCollidingTarget.x, nextCollidingTarget.y));
	                if (!shortestDistance || distance < shortestDistance) {
	                    shortestDistance = distance;
	                    nearestTargetObject = nextCollidingTarget;
	                }
	            }
	            toReturn = nearestTargetObject;
	        }
	        return toReturn;
	    };
	    SoothingGameView.prototype.destroy = function () {
	        console.log("This Button is being destroyed");
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.bgQuad != null) {
	            this.removeChild(this.bgQuad);
	            this.bgQuad = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.grid != null) {
	            this.removeChild(this.grid);
	            this.grid = null;
	        }
	        if (this.explosion != null) {
	            this.removeChild(this.explosion);
	            this.explosion = null;
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        for (var i = 0; i < this.pieces.length; i++) {
	            var piece = this.pieces[i];
	            piece.signalPiece.remove(this.pieceTouched);
	            piece.signalPieceTouchDone.remove(this.touchDone);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return SoothingGameView;
	}(HospitalGameView_1.HospitalGameView));
	SoothingGameView.TYPE_1 = "appdrhospital.view.minigames.soothinggame.SoothingGameView.type_1";
	SoothingGameView.TYPE_2 = "appdrhospital.view.minigames.soothinggame.SoothingGameView.type_2";
	SoothingGameView.TYPE_3 = "appdrhospital.view.minigames.soothinggame.SoothingGameView.type_3";
	SoothingGameView.TYPE_4 = "appdrhospital.view.minigames.soothinggame.SoothingGameView.type_4";
	SoothingGameView.PIECE_TOUCH_OFFSET = 150;
	exports.SoothingGameView = SoothingGameView;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var TargetObject = (function (_super) {
	    __extends(TargetObject, _super);
	    function TargetObject(texture, position, type) {
	        var _this = _super.call(this) || this;
	        _this.textureName = texture;
	        _this.x = position.x;
	        _this.y = position.y;
	        _this.interactive = true;
	        _this._type = type;
	        _this.onAddedToStage();
	        return _this;
	    }
	    TargetObject.prototype.onAddedToStage = function () {
	        this.createTargetObjectArt();
	    };
	    Object.defineProperty(TargetObject.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TargetObject.prototype, "width", {
	        get: function () {
	            return this.targetObjectImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TargetObject.prototype, "height", {
	        get: function () {
	            return this.targetObjectImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TargetObject.prototype.createTargetObjectArt = function () {
	        this.targetObjectImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.targetObjectImage);
	    };
	    return TargetObject;
	}(pixi_js_1.Sprite));
	exports.TargetObject = TargetObject;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var AssetLoader_1 = __webpack_require__(7);
	var signals_js_1 = __webpack_require__(33);
	var SoothingGameView_1 = __webpack_require__(61);
	var HospitalGameView_1 = __webpack_require__(13);
	var Piece = (function (_super) {
	    __extends(Piece, _super);
	    function Piece(texture, initialPosition, type) {
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            var mousePosition = event.data.getLocalPosition(_this);
	            _this.x = mousePositionCanvas.x;
	            _this.y = mousePositionCanvas.y;
	            _this.pieceImage.y = -SoothingGameView_1.SoothingGameView.PIECE_TOUCH_OFFSET;
	            _this.signalPiece.dispatch(_this);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                _this.y = Math.abs(mousePositionCanvas.y);
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.mouseDown = false;
	            TweenLite.to(_this.pieceImage, 0.4, { y: 0 });
	            _this.signalPieceTouchDone.dispatch();
	        };
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.textureName = texture;
	        _this._initialPosition = initialPosition;
	        _this._type = type;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Piece.prototype.onAddedToStage = function () {
	        this.signalPiece = new signals_js_1.Signal();
	        this.signalPieceTouchDone = new signals_js_1.Signal();
	        this.createPieceArt();
	        this.pivot.set(this.pieceImage.width * .5, this.pieceImage.height * .5);
	        Logger_1.Logger.log("piece width / height == " + this.pieceImage.width + " : " + this.pieceImage.height);
	        this.x = this.initialPosition.x;
	        this.y = this.initialPosition.y;
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	    };
	    Object.defineProperty(Piece.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "touch", {
	        get: function () {
	            return this._touch;
	        },
	        set: function (value) {
	            this._touch = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "initialPosition", {
	        get: function () {
	            return this._initialPosition;
	        },
	        set: function (value) {
	            this.x = Math.floor(value.x + this.width * .5);
	            this.y = Math.floor(value.y + this.height * .5);
	            this._initialPosition = new pixi_js_1.Point(this.x, this.y);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "width", {
	        get: function () {
	            return this.pieceImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Piece.prototype, "height", {
	        get: function () {
	            return this.pieceImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Piece.prototype.createPieceArt = function () {
	        this.pieceImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.pieceImage);
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.pieceImage.x, this.pieceImage.y, this.pieceImage.width, this.pieceImage.height);
	    };
	    Piece.prototype.destroy = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        if (this.pieceImage != null) {
	            this.removeChild(this.pieceImage);
	            this.pieceImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return Piece;
	}(pixi_js_1.Sprite));
	exports.Piece = Piece;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var Config_1 = __webpack_require__(6);
	var DraggableObject_1 = __webpack_require__(65);
	var ScoreBoard_1 = __webpack_require__(66);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalEvent_1 = __webpack_require__(9);
	var Collectable_1 = __webpack_require__(67);
	var Obstacle_1 = __webpack_require__(68);
	var Logger_1 = __webpack_require__(3);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var SpriteHelper_1 = __webpack_require__(29);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var AudioPlayer_1 = __webpack_require__(10);
	var Helper_1 = __webpack_require__(14);
	var FollowPathGameView = (function (_super) {
	    __extends(FollowPathGameView, _super);
	    function FollowPathGameView() {
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            _this.draggableObject.hitObstacle = false;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            var hit = _this.graphicsHitArea.containsPoint(mousePositionCanvas);
	            Logger_1.Logger.log(_this, "touchDown  hit  == " + hit);
	            _this.offsetPosition = new pixi_js_1.Point(0, 0);
	            if (hit) {
	                _this.draggableObject.mouseDown = true;
	                _this.offsetPosition = new pixi_js_1.Point(_this.draggableObject.x - mousePositionCanvas.x, _this.draggableObject.y - mousePositionCanvas.y);
	            }
	        };
	        _this.touchMove = function (event) {
	            if (_this.draggableObject.mouseDown && !_this.draggableObject.hitObstacle) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                var hit = _this.graphicsHitArea.containsPoint(mousePositionCanvas);
	                if (hit) {
	                    _this.draggableObject.x = mousePositionCanvas.x + _this.offsetPosition.x;
	                    _this.draggableObject.y = mousePositionCanvas.y + _this.offsetPosition.y;
	                    _this.previousInsideGraphicPoint = mousePositionCanvas;
	                    _this.checkCollectablesCollision();
	                    if (_this.obstacleHit()) {
	                        AudioPlayer_1.AudioPlayer.getInstance().playSound("negative", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                        _this.draggableObject.x = _this.draggableObjectStartPosition.x;
	                        _this.draggableObject.y = _this.draggableObjectStartPosition.y;
	                        _this.draggableObject.mouseDown = false;
	                        _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                        _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                        _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                        setTimeout(function () {
	                            if (_this.draggableObject != null) {
	                                _this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                                _this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                                _this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                            }
	                        }, FollowPathGameView.RESPAWN_TIME);
	                        _this.draggableObject.alpha = 0;
	                        TweenLite.to(_this.draggableObject, FollowPathGameView.RESPAWN_TIME / 1000, { alpha: 1, delay: .1 });
	                    }
	                }
	                else {
	                    _this.draggableObject.mouseDown = false;
	                    _this.draggableObject.x = _this.previousInsideGraphicPoint.x;
	                    _this.draggableObject.y = _this.previousInsideGraphicPoint.y;
	                }
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.draggableObject.mouseDown = false;
	            var hit = _this.graphicsHitArea.containsPoint(new pixi_js_1.Point(_this.draggableObject.x, _this.draggableObject.y));
	            if (hit) {
	            }
	            else {
	                _this.draggableObject.x = _this.previousInsideGraphicPoint.x;
	                _this.draggableObject.y = _this.previousInsideGraphicPoint.y;
	            }
	        };
	        _this.onGameTick = function (deltaTime) {
	            _this.animateBacteriaTimer += _this.elapsed * 1000;
	            if (_this.animateBacteriaTimer > _this.animateBacteriaInterval) {
	                _this.animateObstacles();
	                _this.animateBacteriaTimer = 0;
	            }
	        };
	        _this.onGameCompleted = function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_super_flot";
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            }
	        };
	        _this.audioGameCompletedComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    FollowPathGameView.prototype.init = function () {
	        this.onAddedToStage();
	    };
	    FollowPathGameView.prototype.onAddedToStage = function () {
	        this.name = "FollowPathGameView";
	        this.animateBacteriaInterval = FollowPathGameView.ANIMATE_BACTERIA_INTERVAL;
	        this.drawScene();
	        var mazeX = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.maze.width * .5);
	        this.mazePosition = new pixi_js_1.Point(mazeX, 0);
	        this.drawCollectables();
	        this.drawObstacles();
	        this.maze.x = this.mazePosition.x;
	        this.maze.y = this.mazePosition.y;
	        this.draggableObjectStartPosition = new pixi_js_1.Point(this.mazePosition.x + 200, 130);
	        this.draggableObject.x = this.draggableObjectStartPosition.x;
	        this.draggableObject.y = this.draggableObjectStartPosition.y;
	        this.previousInsideGraphicPoint = this.draggableObjectStartPosition;
	        this.startGame();
	    };
	    FollowPathGameView.prototype.drawScene = function () {
	        Logger_1.Logger.log(this, " FollowPathGameView drawScene");
	        this.bg = new pixi_js_1.Graphics();
	        this.bg.beginFill(0xc1fdf1);
	        this.addChild(this.bg);
	        this.maze = pixi_js_1.Sprite.fromFrame("forgiftning_tarm");
	        this.addChild(this.maze);
	        this.graphicsHitArea = new PIXI.Graphics()
	            .beginFill(0x00ffcc)
	            .drawPolygon([914, 86, 968, 133, 1005, 223, 712, 305, 362, 284, 609, 87])
	            .drawPolygon([301, 610, 600, 588, 804, 734, 153, 734, 197, 663])
	            .drawPolygon([727, 544, 921, 681, 804, 734, 600, 588])
	            .drawPolygon([798, 469, 983, 600, 921, 681, 727, 544])
	            .drawPolygon([808, 362, 1005, 223, 1014, 362, 1002, 547, 983, 600, 798, 469])
	            .drawPolygon([93, 463, 39, 356, 362, 284, 666, 331, 606, 415, 527, 471, 337, 525, 182, 519])
	            .drawPolygon([445, 86, 407, 146, 300, 217, 39, 356, 36, 169, 72, 91])
	            .drawPolygon([771, 313, 1005, 223, 808, 362])
	            .drawPolygon([39, 356, 93, 463, 61, 423])
	            .drawPolygon([305, 269, 39, 356, 300, 217])
	            .drawPolygon([362, 284, 39, 356, 305, 269])
	            .drawPolygon([712, 305, 1005, 223, 771, 313])
	            .drawPolygon([362, 284, 712, 305, 666, 331]);
	        this.graphicsHitArea.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.maze.addChild(this.graphicsHitArea);
	        this.bg.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.draggableObject = new DraggableObject_1.DraggableObject("forgiftning_kul");
	        this.addChild(this.draggableObject);
	        this.scoreBoard = new ScoreBoard_1.ScoreBoard(FollowPathGameView.NUM_OF_COLLECTABLES);
	        this.addChild(this.scoreBoard);
	        this.scoreBoard.x = AssetLoader_1.AssetLoader.STAGE_WIDTH - this.scoreBoard.getWidth();
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    FollowPathGameView.prototype.getInteriorPoint = function () {
	        var pointToTry;
	        var pointWidth = this.maze.width;
	        var pointHeight = this.maze.height;
	        var checkInside;
	        while (!checkInside) {
	            pointToTry = new pixi_js_1.Point(Helper_1.Helper.randomRange(this.maze.x, pointWidth), Helper_1.Helper.randomRange(this.maze.y + 150, pointHeight - 20, true));
	            checkInside = this.graphicsHitArea.containsPoint(pointToTry);
	        }
	        return pointToTry;
	    };
	    FollowPathGameView.prototype.drawCollectables = function () {
	        this.collectables = [];
	        var pointToTry;
	        var collectableNew;
	        var texture;
	        for (var i = 0; i < FollowPathGameView.NUM_OF_COLLECTABLES; i++) {
	            pointToTry = this.getInteriorPoint();
	            texture = "forgiftning_gift_0" + Math.ceil(Math.random() * 3);
	            collectableNew = new Collectable_1.Collectable(texture);
	            collectableNew.x = pointToTry.x;
	            collectableNew.y = pointToTry.y;
	            this.maze.addChild(collectableNew);
	            this.collectables.push(collectableNew);
	        }
	    };
	    FollowPathGameView.prototype.drawObstacles = function () {
	        this.obstacles = [];
	        var pointToTry;
	        var pointWidth = this.maze.width;
	        var pointHeight = this.maze.height;
	        for (var i = 0; i < FollowPathGameView.NUM_OF_OBSTACLES; i++) {
	            pointToTry = this.getInteriorPoint();
	            var texture = "forgiftning_forhindring_0" + Math.ceil(Math.random() * 2);
	            var obstacleNew = new Obstacle_1.Obstacle(texture);
	            obstacleNew.x = pointToTry.x + this.mazePosition.x;
	            obstacleNew.y = pointToTry.y;
	            this.addChild(obstacleNew);
	            this.obstacles.push(obstacleNew);
	        }
	    };
	    FollowPathGameView.prototype.startGame = function () {
	        var _this = this;
	        this.elapsed = 0.07;
	        this.animateBacteriaTimer = 0;
	        this.collectablesCollected = 0;
	        if (this.draggableObject != null) {
	            this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	            this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	            this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        }
	        pixi_js_1.ticker.shared.add(this.onGameTick, this);
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_brug_det_sorte_stykke_kul_til_at_samle_alle_de_gronne_bakterier";
	            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	        }, 1000);
	    };
	    FollowPathGameView.prototype.obstacleHit = function () {
	        for (var i = 0; i < this.obstacles.length; i++) {
	            var obstacle = this.obstacles[i];
	            var hit = SpriteHelper_1.SpriteHelper.hitTest(this.draggableObject.bounds, obstacle.getBounds());
	            if (hit) {
	                return true;
	            }
	        }
	        return false;
	    };
	    FollowPathGameView.prototype.checkCollectablesCollision = function () {
	        for (var i = 0; i < this.collectables.length; i++) {
	            var collectable = this.collectables[i];
	            if (!collectable.collected) {
	                var hit = SpriteHelper_1.SpriteHelper.hitTest(this.draggableObject.bounds, collectable.getBounds());
	                if (hit) {
	                    this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound("positive", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    this.draggableObject.addCollectable(collectable);
	                    collectable.x = Math.random() * this.draggableObject.bounds.width;
	                    collectable.y = Math.random() * this.draggableObject.bounds.height;
	                    collectable.collected = true;
	                    this.collectablesCollected++;
	                    this.scoreBoard.update(this.collectablesCollected);
	                    if (this.collectablesCollected == FollowPathGameView.NUM_OF_COLLECTABLES) {
	                        this.onGameCompleted();
	                    }
	                }
	            }
	        }
	    };
	    FollowPathGameView.prototype.animateObstacles = function () {
	        var obstacleToTrack;
	        var obstaclesLength = this.obstacles.length;
	        var pointToTry;
	        for (var i = 0; i < obstaclesLength; i++) {
	            obstacleToTrack = this.obstacles[i];
	            pointToTry = new pixi_js_1.Point(obstacleToTrack.x + obstacleToTrack.speed * Math.cos(obstacleToTrack.direction), obstacleToTrack.y + obstacleToTrack.speed * Math.sin(obstacleToTrack.direction));
	            var hit = this.graphicsHitArea.containsPoint(pointToTry);
	            if (hit) {
	                obstacleToTrack.x = pointToTry.x;
	                obstacleToTrack.y = pointToTry.y;
	            }
	            else {
	                obstacleToTrack.changeDirection();
	                pointToTry = new pixi_js_1.Point(obstacleToTrack.x + obstacleToTrack.speed * Math.random() * Math.cos(obstacleToTrack.direction), obstacleToTrack.y + obstacleToTrack.speed * Math.random() * Math.sin(obstacleToTrack.direction));
	            }
	        }
	    };
	    FollowPathGameView.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "FollowPathGameView destroy");
	        pixi_js_1.ticker.shared.remove(this.onGameTick, this);
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.bg != null) {
	            this.removeChild(this.bg);
	            this.bg = null;
	        }
	        if (this.draggableObject != null) {
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	            this.removeChild(this.draggableObject);
	            this.draggableObject.destroy();
	            this.draggableObject = null;
	        }
	        if (this.scoreBoard != null) {
	            this.removeChild(this.scoreBoard);
	            this.scoreBoard.destroy();
	            this.scoreBoard = null;
	        }
	        if (this.collectables.length > 0) {
	            for (var i = 0; i < this.collectables.length; i++) {
	                try {
	                    var collectable = this.collectables[i];
	                    this.maze.removeChild(collectable);
	                    collectable.destroy();
	                    collectable = null;
	                }
	                catch (error) {
	                    Logger_1.Logger.log(this, "CATCH this.removeChild(collectable)");
	                }
	            }
	            this.collectables = null;
	        }
	        if (this.obstacles.length > 0) {
	            for (var i = 0; i < this.obstacles.length; i++) {
	                try {
	                    var obstacle = this.obstacles[i];
	                    this.maze.removeChild(obstacle);
	                    obstacle.destroy();
	                    obstacle = null;
	                }
	                catch (error) {
	                    Logger_1.Logger.log(this, "CATCH this.removeChild(obstacle)");
	                }
	            }
	            this.obstacles = null;
	        }
	        if (this.maze != null) {
	            this.removeChild(this.maze);
	            this.maze = null;
	        }
	        try {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Logger_1.Logger.log("FollowPathGameView AudioPlayer.getInstance().stopSound(Config.currentSpeakSound)");
	        }
	        catch (error) {
	            Logger_1.Logger.log("ERROR : FollowPathGameView stopSound(Config.currentSpeakSound)");
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return FollowPathGameView;
	}(HospitalGameView_1.HospitalGameView));
	FollowPathGameView.DRAGGABLE_OBJECT_TOUCH_OFFSET = 0;
	FollowPathGameView.WALL_COLLISIONS_MAX = 2;
	FollowPathGameView.NUM_OF_COLLECTABLES = 10;
	FollowPathGameView.NUM_OF_OBSTACLES = 3;
	FollowPathGameView.RESPAWN_TIME = 1000;
	FollowPathGameView.ANIMATE_BACTERIA_INTERVAL = 200;
	exports.FollowPathGameView = FollowPathGameView;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var HospitalGameView_1 = __webpack_require__(13);
	var DraggableObject = (function (_super) {
	    __extends(DraggableObject, _super);
	    function DraggableObject(texture) {
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            _this.hitObstacle = false;
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown && !_this.hitObstacle) {
	            }
	        };
	        _this.touchDone = function (event) {
	            _this.mouseDown = false;
	        };
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.textureName = texture;
	        _this.onAddedToStage();
	        return _this;
	    }
	    DraggableObject.prototype.onAddedToStage = function () {
	        this.createDraggableObjectArt();
	    };
	    DraggableObject.prototype.addTouchEvents = function () {
	    };
	    DraggableObject.prototype.createDraggableObjectArt = function () {
	        this.draggableObjectImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.draggableObjectImage.x, this.draggableObjectImage.y, this.draggableObjectImage.width, this.draggableObjectImage.height);
	        this.pivot.x = this.draggableObjectImage.width * .5;
	        this.pivot.y = this.draggableObjectImage.height * .5;
	        this.addChild(this.draggableObjectImage);
	    };
	    DraggableObject.prototype.addCollectable = function (item) {
	        this.addChild(item);
	        this.addChild(this.rectCover);
	    };
	    Object.defineProperty(DraggableObject.prototype, "bounds", {
	        get: function () {
	            return this.draggableObjectImage.getBounds();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DraggableObject.prototype.destroy = function () {
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        if (this.draggableObjectImage != null) {
	            this.removeChild(this.draggableObjectImage);
	            this.draggableObjectImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return DraggableObject;
	}(pixi_js_1.Sprite));
	exports.DraggableObject = DraggableObject;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var ScoreBoard = (function (_super) {
	    __extends(ScoreBoard, _super);
	    function ScoreBoard(numOfSlots) {
	        var _this = _super.call(this) || this;
	        _this.numOfSlots = numOfSlots;
	        _this.onAddedToStage();
	        return _this;
	    }
	    ScoreBoard.prototype.onAddedToStage = function () {
	        this.createScoreBoardArt();
	    };
	    ScoreBoard.prototype.createScoreBoardArt = function () {
	        this.background = new pixi_js_1.Graphics();
	        this.background.beginFill(0x06a484);
	        this.background.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, 76);
	        this.addChild(this.background);
	        this.background.alpha = 0.2;
	        this.slots = [];
	        for (var i = 0; i < this.numOfSlots; i++) {
	            this.imageEmpty = pixi_js_1.Sprite.fromFrame("forgiftning_gift_01");
	            var slot = new pixi_js_1.Sprite();
	            slot.addChild(this.imageEmpty);
	            this.addChild(slot);
	            slot.x = i * this.imageEmpty.width + 20;
	            slot.alpha = 0.2;
	            this.slots.push(slot);
	        }
	    };
	    ScoreBoard.prototype.getWidth = function () {
	        return (this.imageEmpty.width * this.numOfSlots + (this.numOfSlots * 20));
	    };
	    ScoreBoard.prototype.update = function (collectablesCollected) {
	        var editNum = collectablesCollected - 1;
	        Logger_1.Logger.log(this, "ScoreBoard collectablesCollected == " + collectablesCollected + " : editNum == " + editNum);
	        var slot = this.slots[editNum];
	        slot.alpha = 1;
	    };
	    ScoreBoard.prototype.destroy = function () {
	    };
	    return ScoreBoard;
	}(pixi_js_1.Sprite));
	exports.ScoreBoard = ScoreBoard;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var HospitalGameView_1 = __webpack_require__(13);
	var Collectable = (function (_super) {
	    __extends(Collectable, _super);
	    function Collectable(texture) {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.textureName = texture;
	        _this.onAddedToStage();
	        return _this;
	    }
	    Collectable.prototype.onAddedToStage = function () {
	        this.createCollectableArt();
	        this.createMovement();
	    };
	    Collectable.prototype.createCollectableArt = function () {
	        this.collectableImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.collectableImage.x, this.collectableImage.y, this.collectableImage.width, this.collectableImage.height);
	        this.addChild(this.collectableImage);
	        this.pivot.x = this.collectableImage.width * .5;
	        this.pivot.y = this.collectableImage.height * .5;
	    };
	    Collectable.prototype.createMovement = function () {
	        this.rotation = -0.1;
	        TweenMax.to(this, 1, { rotation: "+=0.2", repeat: -1, yoyo: true, ease: Linear.easeNone, delay: Math.random() });
	    };
	    Object.defineProperty(Collectable.prototype, "bounds", {
	        get: function () {
	            return this.collectableImage.getBounds();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Collectable.prototype.destroy = function () {
	        if (this.collectableImage != null) {
	            this.removeChild(this.collectableImage);
	            this.collectableImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return Collectable;
	}(pixi_js_1.Sprite));
	exports.Collectable = Collectable;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var Helper_1 = __webpack_require__(14);
	var HospitalGameView_1 = __webpack_require__(13);
	var Obstacle = (function (_super) {
	    __extends(Obstacle, _super);
	    function Obstacle(texture) {
	        var _this = _super.call(this) || this;
	        _this.textureName = texture;
	        _this._speed = Math.random() * 2 + 3;
	        _this.changeDirection();
	        _this.onAddedToStage();
	        return _this;
	    }
	    Object.defineProperty(Obstacle.prototype, "direction", {
	        get: function () {
	            return this._direction;
	        },
	        set: function (value) {
	            this._direction = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Obstacle.prototype, "speed", {
	        get: function () {
	            return this._speed;
	        },
	        set: function (value) {
	            this._speed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Obstacle.prototype.changeDirection = function () {
	        this._direction = Helper_1.Helper.randomRange(160, 200) * (180 * (Math.PI / 180));
	    };
	    Obstacle.prototype.onAddedToStage = function () {
	        this.createObstacleArt();
	    };
	    Obstacle.prototype.createObstacleArt = function () {
	        this.obstacleImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.obstacleImage.x, this.obstacleImage.y, this.obstacleImage.width, this.obstacleImage.height);
	        this.addChild(this.obstacleImage);
	        this.pivot.x = this.obstacleImage.width * .5;
	        this.pivot.y = this.obstacleImage.height * .5;
	    };
	    Object.defineProperty(Obstacle.prototype, "bounds", {
	        get: function () {
	            return this.obstacleImage.getBounds();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Obstacle.prototype.destroy = function () {
	        if (this.obstacleImage != null) {
	            this.removeChild(this.obstacleImage);
	            this.obstacleImage = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return Obstacle;
	}(pixi_js_1.Sprite));
	exports.Obstacle = Obstacle;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var PenicillinJar_1 = __webpack_require__(70);
	var HospitalGameView_1 = __webpack_require__(13);
	var Bacterium_1 = __webpack_require__(71);
	var Main_1 = __webpack_require__(1);
	var AssetLoader_1 = __webpack_require__(7);
	var Config_1 = __webpack_require__(6);
	var HospitalEvent_1 = __webpack_require__(9);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var AudioPlayer_1 = __webpack_require__(10);
	var Level_1 = __webpack_require__(22);
	var Helper_1 = __webpack_require__(14);
	var ShootBacteriaGameView = (function (_super) {
	    __extends(ShootBacteriaGameView, _super);
	    function ShootBacteriaGameView() {
	        var _this = _super.call(this) || this;
	        _this.BACTERIA_POOL_SIZE = 30;
	        _this.INITIAL_NUMBER_OF_BACTERIA = 2;
	        _this.PENICILLIN_SHOTS_PER_DIP = 5;
	        _this.bacteriumTouched = function (data) {
	            _this.touchedBacterium = null;
	            if (_this.shotsOfPenicillin > 0) {
	                _this.touchedBacterium = data;
	            }
	        };
	        _this.onGameTick = function (deltaTime) {
	            _this.timePrevious = _this.timeCurrent;
	            _this.timeCurrent = new Date().getTime();
	            _this.elapsed = (_this.timeCurrent - _this.timePrevious) * 0.001;
	            _this.animateBacteria();
	            _this.splitBacteria();
	        };
	        _this.onExplosionComplete = function () {
	            _this.removeChild(_this.explosion);
	        };
	        _this.onBacteriumTouch = function (event) {
	            if (_this.touchedBacterium != null) {
	                if (_this.shotsOfPenicillin > 0) {
	                    _this.touchedBacterium.receiveTouch();
	                    if (_this.touchedBacterium.state == Bacterium_1.Bacterium.DEAD) {
	                        AudioPlayer_1.AudioPlayer.getInstance().playSound("lung_die", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                        var bacteriumIndex = _this.bacteriaToAnimate.indexOf(_this.touchedBacterium);
	                        _this.touchedBacterium.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.onBacteriumTouch);
	                        _this.touchedBacterium.signalPiece.remove(_this.bacteriumTouched);
	                        _this.bacteriaToAnimate.splice(bacteriumIndex, 1);
	                        _this.bacteriaWaiting.push(_this.touchedBacterium);
	                        _this.addChild(_this.explosion);
	                        _this.explosion.x = _this.touchedBacterium.x - _this.touchedBacterium.bounds.width;
	                        _this.explosion.y = _this.touchedBacterium.y - _this.touchedBacterium.bounds.height;
	                        _this.explosion.gotoAndPlay(1);
	                        _this.touchedBacterium.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT + 500;
	                        _this.touchedBacterium.reInit();
	                        if (_this.bacteriaToAnimate.length < 1) {
	                            _this.onGameCompleted();
	                        }
	                    }
	                    else {
	                        AudioPlayer_1.AudioPlayer.getInstance().playSound("lung_hit", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    }
	                    if (_this.shotsOfPenicillin == 0) {
	                        _this.penicillinJar.highlight();
	                    }
	                    if (_this.bacteriaHitCounter > 8) {
	                        if (Config_1.Config.currentSpeakSound != null) {
	                            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                        }
	                        Config_1.Config.currentSpeakSound = "mille_mega_sejt";
	                        _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                        _this.bacteriaHitCounter = 0;
	                    }
	                    _this.bacteriaHitCounter++;
	                }
	            }
	        };
	        _this.onPenicillinJarTouch = function (event) {
	            _this.penicillinJar.stopHighlighting();
	            _this.penicillinJar.showFingerDipped();
	            _this.shotsOfPenicillin = _this.PENICILLIN_SHOTS_PER_DIP;
	        };
	        _this.onGameCompleted = function () {
	            pixi_js_1.ticker.shared.remove(_this.onGameTick, _this);
	            Config_1.Config.currentPatient.disease = Level_1.Level.PNEUMONIA;
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_wow_du_er_god";
	            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	        };
	        _this.audioGameCompletedComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedComplete);
	            _this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    ShootBacteriaGameView.prototype.init = function () {
	        this.name = "ShootBacteriaGameView";
	        this.onAddedToStage();
	    };
	    ShootBacteriaGameView.prototype.onAddedToStage = function () {
	        this.elapsed = 0;
	        this.animateBacteriaTimer = 0;
	        this.animateBacteriaInterval = 0;
	        this.drawScene();
	        this.startGame();
	    };
	    ShootBacteriaGameView.prototype.drawScene = function () {
	        var _this = this;
	        this.bg = new pixi_js_1.Graphics();
	        this.bg.beginFill(0xc1fdf1);
	        this.bg.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.bg);
	        this.penicillinJar = new PenicillinJar_1.PenicillinJar();
	        this.penicillinJar.x = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 + this.penicillinJar.width + 20);
	        this.penicillinJar.y = 100;
	        this.addChild(this.penicillinJar);
	        try {
	            this.lungs = PIXI.Sprite.fromImage(Main_1.Main.ASSETS["media/hospital/assets/textures/1x/lungebetaendelse_lunger.png"]);
	        }
	        catch (e) {
	            console.log(e);
	            this.lungs = Main_1.Main.ASSETS["media/hospital/assets/textures/1x/lungebetaendelse_lunger.png"];
	        }
	        this.addChild(this.lungs);
	        this.lungs.x = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.lungs.width * .5 - this.penicillinJar.width * .5);
	        this.lungsPosition = new pixi_js_1.Point(this.lungs.x, this.lungs.y);
	        this.graphicsHitArea = new PIXI.Graphics()
	            .beginFill(0x00ffcc)
	            .drawPolygon([511, 170, 572, 208, 627, 295, 663, 438, 675, 598, 649, 703, 407, 252, 446, 158])
	            .drawPolygon([263, 165, 291, 236, 55, 671, 12, 482, 26, 357, 126, 197, 203, 142, 230, 140])
	            .drawPolygon([105, 699, 55, 671, 291, 236, 310, 303, 319, 420, 297, 557])
	            .drawPolygon([390, 543, 384, 453, 384, 372, 395, 296, 649, 703, 625, 723, 457, 650, 415, 617])
	            .drawPolygon([360, 169, 329, 173, 324, 0, 358, 0])
	            .drawPolygon([360, 169, 394, 250, 348, 252, 306, 240, 329, 173])
	            .drawPolygon([291, 236, 348, 252, 310, 303])
	            .drawPolygon([395, 296, 407, 252, 649, 703])
	            .drawPolygon([348, 252, 394, 250, 407, 252, 395, 296]);
	        this.graphicsHitArea.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.lungs.addChild(this.graphicsHitArea);
	        var frames = [];
	        for (var i = 1; i < 9; i++) {
	            var val = i < 10 ? '0' + i : i;
	            frames.push(pixi_js_1.Texture.fromFrame('lungebetaendelse_ani_explosion_00' + val));
	        }
	        this.explosion = new pixi_js_1.extras.AnimatedSprite(frames);
	        this.explosion.loop = false;
	        this.explosion.animationSpeed = .5;
	        this.explosion.onComplete = function () {
	            _this.onExplosionComplete();
	            _this.touchedBacterium.x = 200;
	            _this.touchedBacterium.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT + 500;
	        };
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    ShootBacteriaGameView.prototype.getInteriorPoint = function () {
	        var pointToTry;
	        var pointWidth = this.lungs.width;
	        var pointHeight = this.lungs.height;
	        var checkInside;
	        while (!checkInside) {
	            pointToTry = new pixi_js_1.Point(Helper_1.Helper.randomRange(0, pointWidth), Helper_1.Helper.randomRange(0, pointHeight, true));
	            checkInside = this.graphicsHitArea.containsPoint(pointToTry);
	        }
	        return pointToTry;
	    };
	    ShootBacteriaGameView.prototype.createBacteria = function (numOfBacteria) {
	        var pointToTry;
	        var bacterium;
	        var pointWidth = this.lungs.width;
	        var pointHeight = this.lungs.height;
	        for (var i = 0; i < numOfBacteria; i++) {
	            pointToTry = this.getInteriorPoint();
	            bacterium = this.bacteriaWaiting.shift();
	            bacterium.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.onBacteriumTouch);
	            bacterium.x = pointToTry.x + this.lungsPosition.x;
	            bacterium.y = pointToTry.y;
	            this.addChild(bacterium);
	            bacterium.signalPiece.add(this.bacteriumTouched);
	            this.bacteriaToAnimate.push(bacterium);
	        }
	    };
	    ShootBacteriaGameView.prototype.startGame = function () {
	        var _this = this;
	        this.bacteriaHitCounter = 0;
	        this.bacteriaWaiting = [];
	        this.bacteriaToAnimate = [];
	        for (var i = 0; i < this.BACTERIA_POOL_SIZE; i++) {
	            var bacterium = new Bacterium_1.Bacterium();
	            this.bacteriaWaiting.push(bacterium);
	        }
	        this.createBacteria(this.INITIAL_NUMBER_OF_BACTERIA);
	        this.penicillinJar.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.onPenicillinJarTouch);
	        this.timeCurrent = 0;
	        pixi_js_1.ticker.shared.add(this.onGameTick, this);
	        this.shotsOfPenicillin = 0;
	        this.penicillinJar.highlight();
	        this.bacteriaSplitTimer = 0;
	        this.bacteriaSplitInterval = ShootBacteriaGameView.BACTERIA_SPLIT_INTERVAL;
	        this.animateBacteriaTimer = 0;
	        this.animateBacteriaInterval = ShootBacteriaGameView.ANIMATE_BACTERIA_INTERVAL;
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_tryk_pa_skalen";
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            }
	        }, 1000);
	    };
	    ShootBacteriaGameView.prototype.splitBacteria = function () {
	        var _this = this;
	        if (this.bacteriaWaiting.length == 0 || this.bacteriaToAnimate.length == 0) {
	        }
	        else {
	            this.bacteriaSplitTimer += this.elapsed * 1000;
	            if (this.bacteriaSplitTimer > this.bacteriaSplitInterval) {
	                var itemNum = Helper_1.Helper.randomRange(0, this.bacteriaToAnimate.length - 1, true);
	                var bacteriaToSplit_1 = this.bacteriaToAnimate[itemNum];
	                if (bacteriaToSplit_1 != null && bacteriaToSplit_1.state == Bacterium_1.Bacterium.NOT_TOUCHED) {
	                    TweenLite.to(bacteriaToSplit_1.scale, 0.5, {
	                        x: 2, y: 2, ease: Linear.easeNone, onComplete: function () {
	                            bacteriaToSplit_1.scale.x = bacteriaToSplit_1.scale.y = 1;
	                            AudioPlayer_1.AudioPlayer.getInstance().playSound("lung_split", 0, Config_1.Config.EFFECTS_VOLUME_LEVEL);
	                            var newBacterium = _this.bacteriaWaiting.shift();
	                            newBacterium.x = bacteriaToSplit_1.x;
	                            newBacterium.y = bacteriaToSplit_1.y;
	                            _this.addChild(newBacterium);
	                            newBacterium.on(TouchLoudEvent_1.TouchEvent.TOUCH, _this.onBacteriumTouch);
	                            newBacterium.signalPiece.add(_this.bacteriumTouched);
	                            _this.bacteriaToAnimate.push(newBacterium);
	                        }
	                    });
	                }
	                this.bacteriaSplitTimer = 0;
	            }
	        }
	    };
	    ShootBacteriaGameView.prototype.animateBacteria = function () {
	        var obstacleToTrack;
	        var obstaclesLength = this.bacteriaToAnimate.length;
	        var pointToTry;
	        for (var i = 0; i < obstaclesLength; i++) {
	            obstacleToTrack = this.bacteriaToAnimate[i];
	            pointToTry = new pixi_js_1.Point(obstacleToTrack.x + obstacleToTrack.speed * Math.cos(obstacleToTrack.direction), obstacleToTrack.y + obstacleToTrack.speed * Math.sin(obstacleToTrack.direction));
	            var hit = this.graphicsHitArea.containsPoint(pointToTry);
	            if (hit) {
	                obstacleToTrack.x = pointToTry.x;
	                obstacleToTrack.y = pointToTry.y;
	            }
	            else {
	                obstacleToTrack.changeDirection();
	                pointToTry = new pixi_js_1.Point(obstacleToTrack.x + obstacleToTrack.speed * Math.random() * Math.cos(obstacleToTrack.direction), obstacleToTrack.y + obstacleToTrack.speed * Math.random() * Math.sin(obstacleToTrack.direction));
	            }
	        }
	    };
	    ShootBacteriaGameView.prototype.destroy = function () {
	        if (pixi_js_1.ticker != null) {
	            pixi_js_1.ticker.shared.remove(this.onGameTick, this);
	        }
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.explosion != null) {
	            this.removeChild(this.explosion);
	            this.explosion = null;
	        }
	        if (this.bg != null) {
	            this.removeChild(this.bg);
	            this.bg = null;
	        }
	        if (this.lungs != null) {
	            this.removeChild(this.lungs);
	            this.lungs = null;
	        }
	        try {
	            this.lungs = PIXI.Sprite.fromImage(Main_1.Main.ASSETS["media/hospital/assets/textures/1x/lungebetaendelse_lunger.png"]);
	        }
	        catch (e) {
	            console.log(e);
	            this.lungs = Main_1.Main.ASSETS["media/hospital/assets/textures/1x/lungebetaendelse_lunger.png"];
	        }
	        this.addChild(this.lungs);
	        this.lungs.x = Math.floor(AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.lungs.width * .5 - this.penicillinJar.width * .5);
	        this.lungsPosition = new pixi_js_1.Point(this.lungs.x, this.lungs.y);
	        if (this.bacteriaWaiting != null) {
	            if (this.bacteriaWaiting.length > 0) {
	                for (var i = 0; i < this.bacteriaWaiting.length; i++) {
	                    try {
	                        var bacteriaWait = this.bacteriaWaiting[i];
	                        bacteriaWait.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.onBacteriumTouch);
	                        this.removeChild(bacteriaWait);
	                    }
	                    catch (error) {
	                        Logger_1.Logger.log(this, "CATCH this.removeChild(bacteriaWait)");
	                    }
	                }
	                this.bacteriaWaiting = null;
	            }
	        }
	        if (this.bacteriaToAnimate != null) {
	            if (this.bacteriaToAnimate.length > 0) {
	                for (var i = 0; i < this.bacteriaToAnimate.length; i++) {
	                    try {
	                        var bacteriaTo = this.bacteriaToAnimate[i];
	                        bacteriaTo.signalPiece.remove(this.bacteriumTouched);
	                        this.removeChild(bacteriaTo);
	                    }
	                    catch (error) {
	                        Logger_1.Logger.log(this, "CATCH this.removeChild(bacteriaTo)");
	                    }
	                }
	                this.bacteriaToAnimate = null;
	            }
	        }
	        if (this.penicillinJar != null) {
	            this.removeChild(this.penicillinJar);
	            this.penicillinJar.destroy();
	            this.penicillinJar = null;
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return ShootBacteriaGameView;
	}(HospitalGameView_1.HospitalGameView));
	ShootBacteriaGameView.BACTERIA_SPLIT_INTERVAL = 14000;
	ShootBacteriaGameView.ANIMATE_BACTERIA_INTERVAL = 200;
	exports.ShootBacteriaGameView = ShootBacteriaGameView;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var HospitalGameView_1 = __webpack_require__(13);
	var PenicillinJar = (function (_super) {
	    __extends(PenicillinJar, _super);
	    function PenicillinJar() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.onAddedToStage();
	        return _this;
	    }
	    PenicillinJar.prototype.onAddedToStage = function () {
	        this.createImages();
	        this.initialPosition = new pixi_js_1.Point(this.x, this.y);
	    };
	    PenicillinJar.prototype.showFingerDipped = function () {
	        TweenLite.killTweensOf(this.imageFingerDipped);
	        this.imageFingerDipped.alpha = 1;
	        this.startFadingFingerPrint();
	    };
	    PenicillinJar.prototype.highlight = function () {
	        TweenMax.to(this.imageHighlight, 0.5, { alpha: "+=1", repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    PenicillinJar.prototype.stopHighlighting = function () {
	        TweenMax.killTweensOf(this.imageHighlight);
	        this.imageHighlight.alpha = 0;
	    };
	    PenicillinJar.prototype.createImages = function () {
	        this.imageHighlight = pixi_js_1.Sprite.fromFrame("lungebetaendelse_penicillin_highlight");
	        this.imageFull = pixi_js_1.Sprite.fromFrame("lungebetaendelse_penicillin1");
	        this.imageFingerDipped = pixi_js_1.Sprite.fromFrame("lungebetaendelse_penicillin2");
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.imageHighlight.x, this.imageHighlight.y, this.imageHighlight.width, this.imageHighlight.height);
	        this.addChild(this.imageHighlight);
	        this.addChild(this.imageFull);
	        this.addChild(this.imageFingerDipped);
	        this.imageHighlight.alpha = 0;
	        this.imageFingerDipped.alpha = 0;
	        this.imageHighlight.scale.x = this.imageHighlight.scale.y = 1.2;
	        this.imageHighlight.pivot.x = Math.floor(this.imageHighlight.width * .5 - 2);
	        this.imageHighlight.pivot.y = Math.floor(this.imageHighlight.height * .5 - 2);
	        this.imageHighlight.x = this.imageHighlight.width * .5;
	        this.imageHighlight.y = this.imageHighlight.height * .5;
	    };
	    Object.defineProperty(PenicillinJar.prototype, "width", {
	        get: function () {
	            return this.imageHighlight.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PenicillinJar.prototype.startFadingFingerPrint = function () {
	        TweenLite.to(this.imageFingerDipped, 4, { alpha: 0 });
	    };
	    PenicillinJar.prototype.destroy = function () {
	        if (this.imageHighlight != null) {
	            this.removeChild(this.imageHighlight);
	            this.imageHighlight = null;
	        }
	        if (this.imageFull != null) {
	            this.removeChild(this.imageFull);
	            this.imageFull = null;
	        }
	        if (this.imageFingerDipped != null) {
	            this.removeChild(this.imageFingerDipped);
	            this.imageFingerDipped = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return PenicillinJar;
	}(pixi_js_1.Sprite));
	exports.PenicillinJar = PenicillinJar;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var signals_js_1 = __webpack_require__(33);
	var Texture = PIXI.Texture;
	var HospitalGameView_1 = __webpack_require__(13);
	var Bacterium = (function (_super) {
	    __extends(Bacterium, _super);
	    function Bacterium() {
	        var _this = _super.call(this) || this;
	        _this.touchDown = function (event) {
	            _this.parent.setChildIndex(_this, _this.parent.children.length - 1);
	            _this.signalPiece.dispatch(_this);
	        };
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this._speed = Math.random() + 1;
	        _this.changeDirection();
	        _this.onAddedToStage();
	        return _this;
	    }
	    Object.defineProperty(Bacterium.prototype, "bacteriumTexture", {
	        get: function () {
	            return this._bacteriumTexture;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Bacterium.prototype, "bacteriumImageCurrent", {
	        get: function () {
	            return this._bacteriumImageCurrent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Bacterium.prototype.onAddedToStage = function () {
	        this.signalPiece = new signals_js_1.Signal();
	        this.createBacteriumArt();
	        this.state = Bacterium.NOT_TOUCHED;
	        this.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	    };
	    Object.defineProperty(Bacterium.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            this._state = value;
	            switch (value) {
	                case Bacterium.NOT_TOUCHED:
	                    this.showImage(this.bacteriumImage);
	                    break;
	                case Bacterium.TOUCHED_ONCE:
	                    this.showImage(this.bacteriumImageTouchedOnce);
	                    break;
	                case Bacterium.TOUCHED_TWICE:
	                    this.showImage(this.bacteriumImageTouchedTwice);
	                    break;
	                default:
	                    break;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Bacterium.prototype.showImage = function (image) {
	        this.bacteriumImage.visible = false;
	        this.bacteriumImageTouchedOnce.visible = false;
	        this.bacteriumImageTouchedTwice.visible = false;
	        this._bacteriumImageCurrent = image;
	        this._bacteriumImageCurrent.visible = true;
	    };
	    Object.defineProperty(Bacterium.prototype, "direction", {
	        get: function () {
	            return this._direction;
	        },
	        set: function (value) {
	            this._direction = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Bacterium.prototype, "speed", {
	        get: function () {
	            return this._speed;
	        },
	        set: function (value) {
	            this._speed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Bacterium.prototype.changeDirection = function () {
	        this._direction = Math.random() * (360 * (Math.PI / 180));
	    };
	    Bacterium.prototype.receiveTouch = function () {
	        switch (this.state) {
	            case Bacterium.NOT_TOUCHED:
	                this.state = Bacterium.TOUCHED_ONCE;
	                break;
	            case Bacterium.TOUCHED_ONCE:
	                this.state = Bacterium.TOUCHED_TWICE;
	                break;
	            case Bacterium.TOUCHED_TWICE:
	                this.state = Bacterium.DEAD;
	                break;
	            default:
	                break;
	        }
	    };
	    Bacterium.prototype.reInit = function () {
	        this._speed = Math.random() + 1;
	        this.changeDirection();
	        this.state = Bacterium.NOT_TOUCHED;
	    };
	    Bacterium.prototype.createBacteriumArt = function () {
	        this.bacteriumImageTouchedOnce = pixi_js_1.Sprite.fromFrame("lungebetaendelse_bakterie1_skud1");
	        this.bacteriumImageTouchedTwice = pixi_js_1.Sprite.fromFrame("lungebetaendelse_bakterie1_skud2");
	        this._bacteriumTexture = Texture.fromFrame('lungebetaendelse_bakterie1');
	        this.bacteriumImage = new pixi_js_1.Sprite(this._bacteriumTexture);
	        this._bacteriumImageCurrent = this.bacteriumImage;
	        this.rectCover = new pixi_js_1.Graphics();
	        this.rectCover.beginFill(0xFFFFFF);
	        this.rectCover.alpha = HospitalGameView_1.HospitalGameView.RECT_COVER_ALPHA;
	        this.addChild(this.rectCover);
	        this.rectCover.drawRect(this.bacteriumImage.x, this.bacteriumImage.y, this.bacteriumImage.width, this.bacteriumImage.height);
	        this.addChild(this.bacteriumImage);
	        this.addChild(this.bacteriumImageTouchedOnce);
	        this.addChild(this.bacteriumImageTouchedTwice);
	        this.pivot.x = this.bacteriumImage.width * .5;
	        this.pivot.y = this.bacteriumImage.height * .5;
	    };
	    Object.defineProperty(Bacterium.prototype, "bounds", {
	        get: function () {
	            return this._bacteriumImageCurrent.getBounds();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Bacterium.prototype.destroy = function () {
	        if (this._bacteriumImageCurrent != null) {
	            this.removeChild(this._bacteriumImageCurrent);
	            this._bacteriumImageCurrent = null;
	        }
	        if (this.bacteriumImage != null) {
	            this.removeChild(this.bacteriumImage);
	            this.bacteriumImage = null;
	        }
	        if (this.bacteriumImageTouchedOnce != null) {
	            this.removeChild(this.bacteriumImageTouchedOnce);
	            this.bacteriumImageTouchedOnce = null;
	        }
	        if (this.bacteriumImageTouchedTwice != null) {
	            this.removeChild(this.bacteriumImageTouchedTwice);
	            this.bacteriumImageTouchedTwice = null;
	        }
	        if (this.rectCover != null) {
	            this.removeChild(this.rectCover);
	            this.rectCover = null;
	        }
	    };
	    return Bacterium;
	}(pixi_js_1.Sprite));
	Bacterium.NOT_TOUCHED = "notTouched";
	Bacterium.TOUCHED_ONCE = "touchedOnce";
	Bacterium.TOUCHED_TWICE = "touchedTwice";
	Bacterium.DEAD = "dead";
	exports.Bacterium = Bacterium;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var Config_1 = __webpack_require__(6);
	var Target_1 = __webpack_require__(73);
	var Wiper_1 = __webpack_require__(74);
	var HospitalGameView_1 = __webpack_require__(13);
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalEvent_1 = __webpack_require__(9);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var Logger_1 = __webpack_require__(3);
	var SpriteHelper_1 = __webpack_require__(29);
	var AudioPlayer_1 = __webpack_require__(10);
	var WipingGameView = (function (_super) {
	    __extends(WipingGameView, _super);
	    function WipingGameView() {
	        var _this = _super.call(this) || this;
	        _this.WIPER_TOUCH_OFFSET = 0;
	        _this.NUM_OF_TARGETS = 10;
	        _this.TARGET_AREA = new pixi_js_1.Rectangle(350, 230, 500, 180);
	        _this.touchDown = function (event) {
	            _this.wiper.mouseDown = true;
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            _this.wiper.y = mousePositionCanvas.y;
	        };
	        _this.touchMove = function (event) {
	            if (_this.wiper.mouseDown) {
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                var mousePosition = event.data.getLocalPosition(_this);
	                var newPosX = Math.abs(mousePositionCanvas.x);
	                if (newPosX > 0 && newPosX < AssetLoader_1.AssetLoader.STAGE_WIDTH) {
	                    _this.wiper.x = newPosX;
	                }
	                var newPosY = Math.abs(mousePositionCanvas.y);
	                if (newPosY > 0 && newPosY < AssetLoader_1.AssetLoader.STAGE_HEIGHT) {
	                    _this.wiper.y = newPosY;
	                }
	                for (var _i = 0, _a = _this.targets; _i < _a.length; _i++) {
	                    var target = _a[_i];
	                    var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.wiper.getBounds(), target.getBounds());
	                    if (hit) {
	                        target.alpha -= 0.06;
	                    }
	                }
	            }
	        };
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "WipingGameView touchDone  event.type == " + event.type);
	            _this.wiper.mouseDown = false;
	            if (_this.allTargetsRemoved()) {
	                _this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                _this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                _this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_super_flot";
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedSpeakComplete);
	            }
	        };
	        _this.audioGameCompletedSpeakComplete = function (event) {
	            Logger_1.Logger.log(_this, "WipingGameView audioGameCompletedSpeakComplete");
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioGameCompletedSpeakComplete);
	            _this.emit(HospitalEvent_1.HospitalEvent.MINIGAME_COMPLETED);
	        };
	        return _this;
	    }
	    WipingGameView.prototype.init = function () {
	        this.onAddedToStage();
	    };
	    WipingGameView.prototype.onAddedToStage = function () {
	        this.name = "WipingGameView";
	        this.drawScene();
	        this.startGame();
	    };
	    WipingGameView.prototype.drawScene = function () {
	        this.bgQuad = new pixi_js_1.Graphics();
	        this.bgQuad.beginFill(0xc1fdf1);
	        this.bgQuad.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.bgQuad);
	        var bgTexture = "brandsaar_arm_0" + Config_1.Config.currentPatient.skinType;
	        this.background = pixi_js_1.Sprite.fromFrame(bgTexture);
	        this.background.scale.x = this.background.scale.y = 2;
	        this.addChild(this.background);
	        this.targets = [];
	        for (var i = 0; i < this.NUM_OF_TARGETS; i++) {
	            var target = new Target_1.Target("brandsaar_snavs");
	            this.addChild(target);
	            target.x = Math.round(Math.random() * this.TARGET_AREA.width) + this.TARGET_AREA.x;
	            target.y = Math.round(Math.random() * this.TARGET_AREA.height) + this.TARGET_AREA.y;
	            this.targets.push(target);
	        }
	        this.wiper = new Wiper_1.Wiper("brandsaar_klud");
	        this.addChild(this.wiper);
	        this.wiper.x = 630;
	        this.wiper.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT - this.wiper.height * .5;
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_MINIGAME);
	    };
	    WipingGameView.prototype.startGame = function () {
	        var _this = this;
	        this.wiper.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	        this.wiper.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	        this.wiper.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            if (Config_1.Config.currentSpeakSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	            }
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakOverlappingViewsSound);
	            }
	            Config_1.Config.currentSpeakSound = "mille_tag_kluden_og_vask_rent_for_snavs";
	            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                if (!_this.allTargetsRemoved()) {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_hov_der_er_vist_lidt_snavs_tilbage";
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                }
	            }, 10000);
	        }, 1000);
	    };
	    WipingGameView.prototype.allTargetsRemoved = function () {
	        var toReturn = true;
	        var targetsLength = this.targets.length;
	        for (var i = 0; i < targetsLength; i++) {
	            var target = this.targets[i];
	            if (target.alpha > 0.1) {
	                toReturn = false;
	            }
	        }
	        Logger_1.Logger.log(this, "WipingGameView allTargetsRemoved toReturn == " + toReturn);
	        return toReturn;
	    };
	    WipingGameView.prototype.destroy = function () {
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.bgQuad != null) {
	            this.removeChild(this.bgQuad);
	            this.bgQuad = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.wiper != null) {
	            this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	            this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	            this.wiper.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	            this.removeChild(this.wiper);
	            this.wiper.destroy();
	            this.wiper = null;
	        }
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return WipingGameView;
	}(HospitalGameView_1.HospitalGameView));
	exports.WipingGameView = WipingGameView;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var Target = (function (_super) {
	    __extends(Target, _super);
	    function Target(texture) {
	        var _this = _super.call(this) || this;
	        _this.textureName = texture;
	        _this.createTargetArt();
	        return _this;
	    }
	    Target.prototype.createTargetArt = function () {
	        this.interactive = true;
	        this.targetImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.targetImage);
	        this.targetImage.x = -(Math.floor(this.targetImage.width * .5));
	        this.targetImage.y = -(Math.floor(this.targetImage.height * .5));
	    };
	    return Target;
	}(pixi_js_1.Sprite));
	exports.Target = Target;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var Wiper = (function (_super) {
	    __extends(Wiper, _super);
	    function Wiper(texture) {
	        var _this = _super.call(this) || this;
	        _this.textureName = texture;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        _this.createPieceArt();
	        _this.pivot.set(_this.wiperImage.width * .5, _this.wiperImage.height * .5);
	        return _this;
	    }
	    Wiper.prototype.createPieceArt = function () {
	        Logger_1.Logger.log(this, "Wiper createPieceArt");
	        this.wiperImage = pixi_js_1.Sprite.fromFrame(this.textureName);
	        this.addChild(this.wiperImage);
	    };
	    Object.defineProperty(Wiper.prototype, "width", {
	        get: function () {
	            return this.wiperImage.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wiper.prototype, "height", {
	        get: function () {
	            return this.wiperImage.height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Wiper.prototype.destroy = function () {
	        if (this.wiperImage != null) {
	            this.removeChild(this.wiperImage);
	            this.wiperImage = null;
	        }
	    };
	    return Wiper;
	}(pixi_js_1.Sprite));
	exports.Wiper = Wiper;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var HospitalGameView_1 = __webpack_require__(13);
	var Config_1 = __webpack_require__(6);
	var HospitalEvent_1 = __webpack_require__(9);
	var ButtonEvent_1 = __webpack_require__(17);
	var Logger_1 = __webpack_require__(3);
	var pixi_js_1 = __webpack_require__(8);
	var AudioPlayer_1 = __webpack_require__(10);
	var FrontPageView = (function (_super) {
	    __extends(FrontPageView, _super);
	    function FrontPageView() {
	        var _this = _super.call(this) || this;
	        _this.currentSpeakTimeout = function () {
	            Config_1.Config.currentSpeakSound = "mille_hej_og_velkommen";
	            if (Config_1.Config.currentSpeakSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                console.log(AudioPlayer_1.AudioPlayer.getInstance().getSoundByName(Config_1.Config.currentSpeakSound));
	                console.log(_this.sndSpeak);
	                console.log("--------------------------------------------------");
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioLetsStartComplete);
	                Logger_1.Logger.log(_this, "FrontPageView currentSpeakTimeout Config.currentSpeakSound === " + Config_1.Config.currentSpeakSound);
	            }
	            Config_1.Config.currentTimeout = setTimeout(_this.highlight, 1000);
	        };
	        _this.audioLetsStartComplete = function (event) {
	            Logger_1.Logger.log(_this, "FrontPageView.audioLetsStartComplete(event)");
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.audioLetsStartComplete);
	        };
	        _this.highlight = function () {
	            TweenMax.to(_this.playButton, 0.5, { width: '+=40px', height: '+=40px', x: '-=20px', y: '-=20px', repeat: -1, yoyo: true, ease: Linear.easeNone });
	        };
	        _this.onTouch = function (event) {
	            Logger_1.Logger.log(_this, "FrontPageView onTouch");
	            _this.emit(HospitalEvent_1.HospitalEvent.FRONTPAGE_EXITED);
	        };
	        Logger_1.Logger.log(_this, "FrontPageView constructor");
	        return _this;
	    }
	    FrontPageView.prototype.init = function () {
	        console.log("FrontPageView init");
	        this.name = "FrontPageView";
	        Config_1.Config.currentTimeout = setTimeout(this.currentSpeakTimeout, 2000);
	        this.onAddedToStage();
	    };
	    FrontPageView.prototype.onAddedToStage = function () {
	        this.drawScene();
	        TweenLite.to(this.label, 2, { y: 60, ease: Elastic.easeOut, delay: 1 });
	        TweenLite.to(this.playButton, 0.3, { alpha: 1, delay: 2 });
	        this.interactive = true;
	    };
	    FrontPageView.prototype.drawScene = function () {
	        this.background = pixi_js_1.Sprite.fromFrame("titlePage");
	        this.addChild(this.background);
	        Logger_1.Logger.log(this, "FrontPageView drawScene  : this.background == " + this.background);
	        this.label = pixi_js_1.Sprite.fromFrame("title");
	        this.addChild(this.label);
	        this.label.x = AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.label.width / 2;
	        this.label.y = -this.label.height;
	        this.playButton = pixi_js_1.Sprite.fromFrame("playIkon");
	        this.addChild(this.playButton);
	        this.playButton.x = AssetLoader_1.AssetLoader.STAGE_WIDTH * .5 - this.playButton.width * .5;
	        this.playButton.y = 400;
	        this.playButton.alpha = 0;
	        this.screenButton = new pixi_js_1.Graphics();
	        this.screenButton.interactive = true;
	        this.screenButton.beginFill(0xFFFFFF);
	        this.screenButton.alpha = 0.05;
	        this.screenButton.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this.addChild(this.screenButton);
	        this.screenButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onTouch);
	    };
	    FrontPageView.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "FrontPageView BEFORE destroy");
	        Logger_1.Logger.log(this, "FrontPageView this.children.length == " + this.children.length);
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        if (this.label != null) {
	            this.removeChild(this.label);
	            this.label = null;
	        }
	        if (this.playButton != null) {
	            this.removeChild(this.playButton);
	            this.playButton = null;
	        }
	        if (this.screenButton != null) {
	            this.screenButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onTouch);
	            this.removeChild(this.screenButton);
	            this.screenButton = null;
	        }
	        Logger_1.Logger.log(this, "FrontPageView AFTER this.children.length == " + this.children.length);
	        try {
	        }
	        catch (Error) {
	            Logger_1.Logger.log(this, "ERROR FrontPageView removing this.stage.removeChildren(0, this.stage.children.length)");
	        }
	        clearTimeout(Config_1.Config.currentTimeout);
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    return FrontPageView;
	}(HospitalGameView_1.HospitalGameView));
	exports.FrontPageView = FrontPageView;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalGameView_1 = __webpack_require__(13);
	var Patient_1 = __webpack_require__(47);
	var Scanner_1 = __webpack_require__(31);
	var ItemsSelector_1 = __webpack_require__(24);
	var MaskedLayer_1 = __webpack_require__(77);
	var UnlockedScreen_1 = __webpack_require__(23);
	var ConfettiMaker_1 = __webpack_require__(18);
	var HospitalEvent_1 = __webpack_require__(9);
	var Config_1 = __webpack_require__(6);
	var AssetLoader_1 = __webpack_require__(7);
	var Level_1 = __webpack_require__(22);
	var TouchLoudEvent_1 = __webpack_require__(28);
	var HotSpot_1 = __webpack_require__(78);
	var pixi_js_1 = __webpack_require__(8);
	var BackBtn_1 = __webpack_require__(57);
	var Logger_1 = __webpack_require__(3);
	var SpriteHelper_1 = __webpack_require__(29);
	var AudioPlayer_1 = __webpack_require__(10);
	var OperatingRoomView = (function (_super) {
	    __extends(OperatingRoomView, _super);
	    function OperatingRoomView() {
	        var _this = _super.call(this) || this;
	        _this.DRAGGABLE_OBJECT_TOUCH_OFFSET = -200;
	        _this.onDiseaseHotspotPressed = function (e) {
	            Logger_1.Logger.log(_this, "OperatingRoomView onDiseaseHotspotPressed");
	            _this.hotSpot.off(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED, _this.onDiseaseHotspotPressed);
	            _this.emit(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED);
	        };
	        _this.playScannerSpeak = function (event) {
	            if (_this.scanner && !_this.scanner.clickedOnce) {
	                if (_this.sndSpeak != null) {
	                    _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.playScannerSpeak);
	                }
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "mille_kan_du_se_maskinen_der_blinker";
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	            }
	        };
	        _this.speakComplete = function (event) {
	            _this.sndSpeak.off(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	        };
	        _this.onScannerChange = function (event) {
	            Logger_1.Logger.log(_this, "OperatingRoomView.onScannerChange(event)");
	            Logger_1.Logger.log(_this, "scanner.state: " + _this.scanner.state);
	            _this.maskedLayer.update(_this.scanner.state);
	        };
	        _this.touchDown = function (event) {
	            _this.mouseDown = true;
	            Logger_1.Logger.log(_this, "OperatingRoomView touchDown this.x == " + _this.x + " :  this.y == " + _this.y);
	            var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	            var mousePosition = event.data.getLocalPosition(_this);
	            Logger_1.Logger.log(_this, "Patient touchDown  mousePositionCanvas.x == " + mousePositionCanvas.x + " ; mousePositionCanvas.y == " + mousePositionCanvas.y);
	            Logger_1.Logger.log(_this, "Patient touchDown  mousePosition.x == " + mousePosition.x + " ; mousePosition.y == " + mousePosition.y);
	            Logger_1.Logger.log(_this, "OperatingRoomView AFTER touchDown this.x == " + _this.x + " :  this.y == " + _this.y);
	        };
	        _this.touchMove = function (event) {
	            if (_this.mouseDown) {
	                Logger_1.Logger.log(_this, "OperatingRoomView touchMove this.x == " + _this.x + " :  this.y == " + _this.y);
	                var mousePositionCanvas = event.data.getLocalPosition(AssetLoader_1.AssetLoader.getInstance().assetCanvas);
	                var mousePosition = event.data.getLocalPosition(_this);
	                Logger_1.Logger.log(_this, "OperatingRoomView touchMove  mousePositionCanvas.x == " + mousePositionCanvas.x + " ; mousePositionCanvas.y == " + mousePositionCanvas.y);
	                Logger_1.Logger.log(_this, "OperatingRoomView touchMove  mousePosition.x == " + mousePosition.x + " ; mousePosition.y == " + mousePosition.y);
	                _this.x = Math.abs(mousePositionCanvas.x);
	                _this.y = Math.abs(mousePositionCanvas.y);
	                var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.draggableObject.getBounds(), _this.draggableObjectTarget.getBounds());
	                if (hit) {
	                    _this.draggableObjectTarget.alpha = 0.6;
	                }
	                else {
	                    _this.draggableObjectTarget.alpha = 0.3;
	                }
	                Logger_1.Logger.log(_this, "OperatingRoomView AFTER touchMove this.x == " + _this.x + " :  this.y == " + _this.y);
	            }
	        };
	        _this.touchDone = function (event) {
	            Logger_1.Logger.log(_this, "OperatingRoomView touchDone  event.type == " + event.type);
	            _this.mouseDown = false;
	            var hit = SpriteHelper_1.SpriteHelper.hitTest(_this.draggableObject.getBounds(), _this.draggableObjectTarget.getBounds());
	            if (hit) {
	                Logger_1.Logger.log(_this, "OperatingRoomView touchDone this.x == " + _this.x + " :  this.y == " + _this.y);
	                _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH, _this.touchDown);
	                _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, _this.touchDone);
	                _this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, _this.touchMove);
	                TweenLite.to(_this.draggableObject, 0.5, { x: _this.draggableObjectTarget.x, y: _this.draggableObjectTarget.y, onComplete: function () {
	                        if (_this.patient.disease == Level_1.Level.POISONING && Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                            _this.removeChild(_this.draggableObjectTarget);
	                            TweenLite.to(_this.draggableObject, 1, { alpha: 0, delay: 1, onComplete: _this.createAndStartScanner });
	                            Logger_1.Logger.log(_this, "show scanner - hotspot to follow path game");
	                            AudioPlayer_1.AudioPlayer.getInstance().playSound("drink_water", 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                            if (Config_1.Config.currentSpeakSound != null) {
	                                AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                            }
	                            Config_1.Config.currentSpeakSound = "mille_super_flot";
	                            _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                            _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	                        }
	                        else {
	                            _this.onGameCompleted();
	                        }
	                    } });
	            }
	            else {
	                TweenLite.to(_this.draggableObject, 0.5, { x: OperatingRoomView.DRAGGABLE_OBJECT_POSITION.x, y: OperatingRoomView.DRAGGABLE_OBJECT_POSITION.y });
	            }
	        };
	        _this.createAndStartScanner = function () {
	            Logger_1.Logger.log(_this, "createAndStartScanner");
	            _this.maskedLayer = new MaskedLayer_1.MaskedLayer();
	            _this.patient.addChild(_this.maskedLayer);
	            _this.scanner = new Scanner_1.Scanner();
	            _this.scanner.x = Config_1.Config.safeFrame.x + 700;
	            _this.addChild(_this.scanner);
	            _this.scanner.highlightInactive();
	            _this.addDiseaseHotspotAndHighlightScannerButton();
	            _this.addScannerSettings();
	        };
	        _this.onGameCompleted = function () {
	            Config_1.Config.gameState = Config_1.Config.POST_TREATMENT;
	            _this.patient.setFacialExpression(Patient_1.Patient.EXPRESSION_BIG_SMILE);
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                if (_this.checkIfCurrentLevelHasUnlocks()) {
	                    _this.showUnlockedScreen();
	                }
	                else {
	                    _this.unlockedItemsSelector = new ItemsSelector_1.ItemsSelector(ItemsSelector_1.ItemsSelector.TREATS, _this.draggableObjectTarget);
	                    _this.unlockedItemsSelector.x = 0;
	                    _this.unlockedItemsSelector.y = 0;
	                    _this.addChild(_this.unlockedItemsSelector);
	                    _this.unlockedItemsSelector.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	                    _this.unlockedItemsSelector.highlight();
	                }
	                if (Config_1.Config.currentSpeakSound != null) {
	                    AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                }
	                Config_1.Config.currentSpeakSound = "done_" + Math.ceil(Math.random() * 4);
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	            }, 500);
	        };
	        _this.highlightBtnToWaitingRoom = function () {
	            Logger_1.Logger.log(_this, "OperatingRoomView highlightBtnToWaitingRoom  this.btnToWaitingRoom == " + _this.btnToWaitingRoom);
	            TweenMax.to(_this.btnToWaitingRoom.btnBack, 0.5, { width: "+=40", height: "+=40", x: "+=20", y: "+=20", repeat: -1, yoyo: true, ease: Linear.easeNone });
	        };
	        _this.startKonfetti = function () {
	            _this.konfettiMaker = new ConfettiMaker_1.ConfettiMaker();
	            _this.addChild(_this.konfettiMaker);
	            _this.stopKonfetti();
	        };
	        return _this;
	    }
	    OperatingRoomView.prototype.init = function () {
	        this.onAddedToStage();
	        this.name = "OperatingRoomView";
	    };
	    OperatingRoomView.prototype.onAddedToStage = function () {
	        this.drawScene();
	        this.startGame();
	    };
	    OperatingRoomView.prototype.drawScene = function () {
	        var _this = this;
	        Logger_1.Logger.log(this, "OperatingRoomView.drawScene()");
	        Logger_1.Logger.log(this, "Config.gameState: " + Config_1.Config.gameState);
	        this.background = pixi_js_1.Sprite.fromFrame("operationRoom_bg");
	        this.addChild(this.background);
	        this.patient = Config_1.Config.currentPatient;
	        Logger_1.Logger.log(this, "OperatingRoomView this.patient=== " + this.patient);
	        this.addChild(this.patient);
	        this.patient.startIdleEyeMOvement();
	        this.patient.setPivotXY(0);
	        this.patient.scalePatient(Patient_1.Patient.SIZE_BIG);
	        this.patient.startingPoint.x = 300;
	        this.patient.startingPoint.y = -30;
	        this.patient.x = this.patient.startingPoint.x;
	        this.patient.y = this.patient.startingPoint.y;
	        Logger_1.Logger.log(this, "OperatingRoomView this.patient.disease === " + this.patient.disease);
	        Logger_1.Logger.log(this, "OperatingRoomView this.patient.x === " + this.patient.x + " : this.patient.y == " + this.patient.y);
	        Logger_1.Logger.log(this, "OperatingRoomView Config.gameState === " + Config_1.Config.gameState);
	        this.btnBack = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM);
	        Logger_1.Logger.log(this, "OperatingRoomView this.hotSpot === " + this.hotSpot);
	        if (this.hotSpot != null) {
	            this.patient.removeChild(this.hotSpot);
	            this.hotSpot = null;
	        }
	        Logger_1.Logger.log(this, "OperatingRoomView this.maskedLayer === " + this.maskedLayer);
	        if (this.maskedLayer != null) {
	            this.patient.removeChild(this.maskedLayer);
	            this.maskedLayer.destroy();
	            this.maskedLayer = null;
	        }
	        if (Config_1.Config.gameState == Config_1.Config.POST_TREATMENT) {
	            this.patient.setFacialExpression(Patient_1.Patient.EXPRESSION_BIG_SMILE);
	            this.btnToWaitingRoom = new BackBtn_1.BackBtn(this, HospitalEvent_1.HospitalEvent.BACK_FROM_OPERATING_ROOM, "operationRoom_tilbagepil", true);
	        }
	        else if (Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	            this.patient.setFacialExpression(Patient_1.Patient.EXPRESSION_LITTLE_SMILE);
	            if (this.patient.disease == Level_1.Level.POISONING) {
	                this.draggableObjectTarget = pixi_js_1.Sprite.fromFrame("forgiftning_glas");
	                this.addChild(this.draggableObjectTarget);
	                this.draggableObjectTarget.x = 560;
	                this.draggableObjectTarget.y = 330;
	                this.draggableObjectTarget.alpha = 0.3;
	                this.draggableObject = pixi_js_1.Sprite.fromFrame("forgiftning_glas");
	                this.addChild(this.draggableObject);
	                this.draggableObject.x = OperatingRoomView.DRAGGABLE_OBJECT_POSITION.x;
	                this.draggableObject.y = OperatingRoomView.DRAGGABLE_OBJECT_POSITION.y;
	                this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	                this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	                this.draggableObject.on(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	                Config_1.Config.currentTimeout = setTimeout(function () {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_flyt_glasset_hen_til_munden";
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	                }, 1000);
	            }
	            if (this.patient.disease == Level_1.Level.BURN) {
	                this.addDiseaseHotspotAndHighlightScannerButton();
	            }
	        }
	        else if (Config_1.Config.gameState == Config_1.Config.EXAMINING) {
	            if (this.patient.disease != Level_1.Level.INSECT_BITE && this.patient.disease != Level_1.Level.BURN) {
	                this.maskedLayer = new MaskedLayer_1.MaskedLayer();
	                this.patient.addChild(this.maskedLayer);
	                this.scanner = new Scanner_1.Scanner();
	                this.addChild(this.scanner);
	                this.scanner.x = Config_1.Config.safeFrame.x + Config_1.Config.safeFrame.width - 342;
	                this.scanner.highlightInactive();
	            }
	            this.addDiseaseHotspotAndHighlightScannerButton();
	            this.audioDiseaseSpeakComplete(null);
	        }
	    };
	    OperatingRoomView.prototype.addDiseaseHotspotAndHighlightScannerButton = function () {
	        Logger_1.Logger.log(this, "OperatingRoomView addDiseaseHotspotAndHighlightScannerButton");
	        Logger_1.Logger.log(this, "OperatingRoomView addDiseaseHotspotAndHighlightScannerButton     this.patient.disease  === " + this.patient.disease);
	        this.hotSpot = new HotSpot_1.HotSpot();
	        this.hotSpot.enable();
	        this.hotSpot.on(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED, this.onDiseaseHotspotPressed);
	        switch (this.patient.disease) {
	            case Level_1.Level.BURN:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 200;
	                this.hotSpot.y = 550;
	                break;
	            case Level_1.Level.INSECT_BITE:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 200;
	                this.hotSpot.y = 550;
	                break;
	            case Level_1.Level.FRACTURE_HAND:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 60 + 107;
	                this.hotSpot.y = 600;
	                this.scanner.highlightButton(Scanner_1.Scanner.SKELETAL);
	                break;
	            case Level_1.Level.FRACTURE_RADIUS:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 80 + 107;
	                this.hotSpot.y = 560;
	                this.scanner.highlightButton(Scanner_1.Scanner.SKELETAL);
	                break;
	            case Level_1.Level.SPRAIN:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 80 + 107;
	                this.hotSpot.y = 560;
	                this.scanner.highlightButton(Scanner_1.Scanner.MUSCULAR);
	                break;
	            case Level_1.Level.POISONING:
	                if (Config_1.Config.gameState == Config_1.Config.EXAMINING) {
	                    this.patient.addChild(this.hotSpot);
	                    this.hotSpot.x = 230 + 107;
	                    this.hotSpot.y = 360;
	                }
	                else if (Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) {
	                    this.patient.addChild(this.hotSpot);
	                    this.hotSpot.x = 200 + 107;
	                    this.hotSpot.y = 580;
	                }
	                this.scanner.highlightButton(Scanner_1.Scanner.DIGESTIVE);
	                break;
	            case Level_1.Level.PNEUMONIA:
	                this.patient.addChild(this.hotSpot);
	                this.hotSpot.x = 220 + 107;
	                this.hotSpot.y = 460;
	                this.scanner.highlightButton(Scanner_1.Scanner.RESPIRATORY_AND_UNINARY);
	                break;
	            default:
	                Logger_1.Logger.log(this, "OperatingRoomView addDiseaseHotspotAndHighlightScannerButton DEFAULT no disease");
	                break;
	        }
	    };
	    OperatingRoomView.prototype.startGame = function () {
	        Logger_1.Logger.log(this, "OperatingRoomView.startGame()     Config.gameState == " + Config_1.Config.gameState);
	        Logger_1.Logger.log(this, "OperatingRoomView.startGame()   this.scanner == " + this.scanner);
	        if (Config_1.Config.gameState == Config_1.Config.POST_TREATMENT) {
	            this.onGameCompleted();
	        }
	        else if ((Config_1.Config.gameState == Config_1.Config.EXAMINING || Config_1.Config.gameState == Config_1.Config.BETWEEN_TREATMENTS) && this.scanner) {
	            this.addScannerSettings();
	        }
	    };
	    OperatingRoomView.prototype.audioDiseaseSpeakComplete = function (event) {
	        var _this = this;
	        Config_1.Config.currentTimeout = setTimeout(function () {
	            Logger_1.Logger.log(_this, "OperatingRoomView audioDiseaseSpeakComplete Config.currentSpeakOverlappingViewsSound == " + Config_1.Config.currentSpeakOverlappingViewsSound);
	            if (Config_1.Config.currentSpeakOverlappingViewsSound != null) {
	                _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().getSoundByName(Config_1.Config.currentSpeakOverlappingViewsSound);
	                _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.playScannerSpeak);
	            }
	            else {
	                _this.playScannerSpeak(null);
	            }
	        }, 200);
	    };
	    OperatingRoomView.prototype.getDiseaseSpeakSound = function () {
	        var toReturn;
	        switch (Config_1.Config.currentPatient.disease) {
	            case Level_1.Level.FRACTURE_HAND:
	                toReturn = "mille_nu_skal_du_bahandle_en_brakket_hand";
	                break;
	            case Level_1.Level.FRACTURE_RADIUS:
	                toReturn = "mille_av_for_en_hundestejle";
	                break;
	            case Level_1.Level.INSECT_BITE:
	                toReturn = "mille_det_er_altsa_mega_uheldigt";
	                break;
	            case Level_1.Level.PNEUMONIA:
	                toReturn = "mille_host_host_vi_kan_alle_blive_syge";
	                break;
	            case Level_1.Level.POISONING:
	                toReturn = "mille_puha_nogen_der_har_slaet_en_fis";
	                break;
	            case Level_1.Level.SPRAIN:
	                toReturn = "mille_prov_lige_at_leg_ninja";
	                break;
	            case Level_1.Level.BURN:
	                toReturn = "mille_na_da_her_er_en_der_har_brandt_sig";
	                break;
	            default:
	                break;
	        }
	        return toReturn;
	    };
	    OperatingRoomView.prototype.addScannerSettings = function () {
	        this.scanner.on("change", this.onScannerChange);
	        this.scanner.update();
	        this.scanner.layerToMask = this.maskedLayer;
	        this.scanner.createPatientLayerToDiseaseMap();
	        this.maskedLayer.update("");
	        this.maskedLayer.maskedLayerBG.x = -this.patient.x;
	        this.maskedLayer.maskedLayerBG.y = -this.patient.y;
	    };
	    OperatingRoomView.prototype.checkIfCurrentLevelHasUnlocks = function () {
	        var index = Config_1.Config.patientsCured < Config_1.Config.levels.length ? Config_1.Config.patientsCured : Config_1.Config.levels.length - 1;
	        if (Config_1.Config.levels[index].unlockedTools.length > 0)
	            return true;
	        if (Config_1.Config.levels[index].unlockedClothes.length > 0)
	            return true;
	        if (Config_1.Config.levels[index].unlockedBandage.length > 0)
	            return true;
	        if (Config_1.Config.levels[index].unlockedBandAid.length > 0)
	            return true;
	        if (Config_1.Config.levels[index].unlockedLemonade.length > 0)
	            return true;
	        return false;
	    };
	    OperatingRoomView.prototype.showUnlockedScreen = function () {
	        var _this = this;
	        Logger_1.Logger.log(this, "OperatingRoomView showUnlockedScreen");
	        this.unlockedItemsSelector = new ItemsSelector_1.ItemsSelector(ItemsSelector_1.ItemsSelector.TREATS, this.draggableObjectTarget);
	        this.unlockedItemsSelector.x = 0 - Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioX / 2));
	        this.unlockedItemsSelector.y = 0 + Math.abs(Math.floor(AssetLoader_1.AssetLoader.getInstance().ratioY / 2));
	        this.addChild(this.unlockedItemsSelector);
	        this.unlockedItemsSelector.setState(ItemsSelector_1.ItemsSelector.OPEN_BAG_ONLY);
	        this.unlockedItemsSelector.visible = false;
	        this.unlockedScreen = new UnlockedScreen_1.UnlockedScreen(this.unlockedItemsSelector.bagClosedPos, ItemsSelector_1.ItemsSelector.TREATS);
	        this.addChild(this.unlockedScreen);
	        this.unlockedScreen.on(UnlockedScreen_1.UnlockedScreen.WRAPPED_GIFT_PRESSED, function (event) {
	            _this.startKonfetti();
	            Config_1.Config.currentTimeout = setTimeout(function () {
	                _this.unlockedItemsSelector.setState(ItemsSelector_1.ItemsSelector.CLOSED);
	                _this.unlockedScreen.visible = false;
	                Logger_1.Logger.log(_this, "Timeout from Operating Room  this.unlockedScreen.visible == " + _this.unlockedScreen.visible);
	            }, 2000);
	            _this.unlockedItemsSelector.visible = true;
	            _this.unlockedItemsSelector.highlight();
	            if (_this.checkIfCurrentLevelHasUnlocks()) {
	                _this.waitingRoomSpeakTimeout = setTimeout(function () {
	                    if (Config_1.Config.currentSpeakSound != null) {
	                        AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	                    }
	                    Config_1.Config.currentSpeakSound = "mille_skynd_dig_ud_i_ventevaerelset_der_er_helt_sikkert_flere_born";
	                    _this.sndSpeak = AudioPlayer_1.AudioPlayer.getInstance().playSound(Config_1.Config.currentSpeakSound, 0, Config_1.Config.SPEAK_VOLUME_LEVEL);
	                    _this.sndSpeak.on(AudioPlayer_1.AudioPlayer.AUDIO_COMPLETE, _this.speakComplete);
	                    _this.highlightBtnToWaitingRoom();
	                }, 10000);
	            }
	        });
	    };
	    OperatingRoomView.prototype.stopKonfetti = function () {
	        var _this = this;
	        TweenLite.to(this.konfettiMaker, 1, { alpha: 0, delay: 4, onComplete: function () {
	                _this.removeChild(_this.konfettiMaker);
	            } });
	    };
	    OperatingRoomView.prototype.audioGameCompletedComplete = function (event) {
	        if (event === void 0) { event = null; }
	        this.emit(HospitalEvent_1.HospitalEvent.PATIENT_CURED);
	    };
	    OperatingRoomView.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "OperatingRoomView destroy  this.children.length == " + this.children.length);
	        if (this.btnBack != null) {
	            this.btnBack.destroy();
	            this.btnBack = null;
	        }
	        if (this.btnToWaitingRoom != null) {
	            this.btnToWaitingRoom.destroy();
	            this.btnToWaitingRoom = null;
	        }
	        if (this.hotSpot != null) {
	            try {
	                this.patient.removeChild(this.hotSpot);
	            }
	            catch (error) {
	                Logger_1.Logger.log(this, "ERROR OperatingRoomView destroy : this.patient.removeChild(this.hotSpot)");
	            }
	            this.hotSpot.off(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED, this.onDiseaseHotspotPressed);
	            this.hotSpot.destroy();
	            this.hotSpot = null;
	        }
	        if (this.draggableObject != null) {
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH, this.touchDown);
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_END, this.touchDone);
	            this.draggableObject.off(TouchLoudEvent_1.TouchEvent.TOUCH_MOVE, this.touchMove);
	        }
	        if (this.maskedLayer != null) {
	            try {
	                this.patient.removeChild(this.maskedLayer);
	            }
	            catch (error) {
	                Logger_1.Logger.log(this, "ERROR OperatingRoomView destroy : this.patient.removeChild(this.maskedLayer)");
	            }
	            this.maskedLayer.destroy();
	            this.maskedLayer = null;
	        }
	        if (this.scanner != null) {
	            this.removeChild(this.scanner);
	            this.scanner.destroy();
	            this.scanner = null;
	        }
	        if (this.unlockedItemsSelector != null) {
	            this.removeChild(this.unlockedItemsSelector);
	            this.unlockedItemsSelector.destroy();
	            this.unlockedItemsSelector = null;
	        }
	        if (this.unlockedScreen != null) {
	            this.removeChild(this.unlockedScreen);
	            this.unlockedScreen.destroy();
	            this.unlockedScreen = null;
	        }
	        if (this.konfettiMaker != null) {
	            this.removeChild(this.konfettiMaker);
	            this.konfettiMaker.destroy();
	            this.konfettiMaker = null;
	        }
	        if (this.patient != null) {
	            this.removeChild(this.patient);
	        }
	        if (this.background != null) {
	            this.removeChild(this.background);
	            this.background = null;
	        }
	        clearTimeout(this.waitingRoomSpeakTimeout);
	        clearTimeout(Config_1.Config.currentTimeout);
	        if (Config_1.Config.currentSpeakSound != null) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopSound(Config_1.Config.currentSpeakSound);
	        }
	        _super.prototype.destroy.call(this);
	        Logger_1.Logger.log(this, "OperatingRoomView destroy AFTER this.children.length == " + this.children.length);
	    };
	    return OperatingRoomView;
	}(HospitalGameView_1.HospitalGameView));
	OperatingRoomView.DRAGGABLE_OBJECT_POSITION = new pixi_js_1.Point(970, 190);
	exports.OperatingRoomView = OperatingRoomView;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var AssetLoader_1 = __webpack_require__(7);
	var Logger_1 = __webpack_require__(3);
	var Scanner_1 = __webpack_require__(31);
	var pixi_js_1 = __webpack_require__(8);
	var MaskedLayer = (function (_super) {
	    __extends(MaskedLayer, _super);
	    function MaskedLayer() {
	        var _this = _super.call(this) || this;
	        _this.createLayers();
	        return _this;
	    }
	    MaskedLayer.prototype.createLayers = function () {
	        Logger_1.Logger.log(this, "MaskedLayer createLayers");
	        this.maskedLayerBG = new pixi_js_1.Graphics();
	        this.maskedLayerBG.beginFill(0x222222);
	        this.maskedLayerBG.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        var maskedLayerSilhouette = pixi_js_1.Sprite.fromFrame("insideLayers_silhouette");
	        this.addChild(this.maskedLayerBG);
	        this.addChild(maskedLayerSilhouette);
	        maskedLayerSilhouette.scale.x = maskedLayerSilhouette.scale.y = 2;
	        maskedLayerSilhouette.x = 107;
	        Logger_1.Logger.log(this, "MaskedLayer createLayers  maskedLayerSilhouette == " + maskedLayerSilhouette + " : maskedLayerSilhouette.x == " + maskedLayerSilhouette.x);
	        this.patientLayerSkeletal = this.createAndAddLayer("insideLayers_skeletalSystem");
	        this.patientLayerCardioVascular = this.createAndAddLayer("insideLayers_cardiovascularSystem");
	        this.patientLayerMuscular = this.createAndAddLayer("insideLayers_muscularSystem");
	        this.patientLayerDigestive = this.createAndAddLayer("insideLayers_digestiveSystem");
	        this.patientLayerRespiratoryAndUrinary = this.createAndAddLayer("insideLayers_respiratoryAndUrinarySystem");
	        this.patientLayerNervous = this.createAndAddLayer("insideLayers_nervousSystem");
	    };
	    MaskedLayer.prototype.createAndAddLayer = function (texture) {
	        Logger_1.Logger.log(this, "MaskedLayer createAndAddLayer");
	        var patientLayer = pixi_js_1.Sprite.fromFrame(texture);
	        this.addChild(patientLayer);
	        patientLayer.x = 107;
	        return patientLayer;
	    };
	    MaskedLayer.prototype.update = function (state) {
	        this.patientLayerSkeletal.visible = false;
	        this.patientLayerCardioVascular.visible = false;
	        this.patientLayerMuscular.visible = false;
	        this.patientLayerDigestive.visible = false;
	        this.patientLayerRespiratoryAndUrinary.visible = false;
	        this.patientLayerNervous.visible = false;
	        Logger_1.Logger.log(this, "MaskedLayer update state == " + state);
	        switch (state) {
	            case Scanner_1.Scanner.SKELETAL:
	                this.patientLayerSkeletal.visible = true;
	                break;
	            case Scanner_1.Scanner.CARDIOVASCULAR:
	                this.patientLayerCardioVascular.visible = true;
	                break;
	            case Scanner_1.Scanner.MUSCULAR:
	                this.patientLayerMuscular.visible = true;
	                break;
	            case Scanner_1.Scanner.DIGESTIVE:
	                this.patientLayerDigestive.visible = true;
	                break;
	            case Scanner_1.Scanner.RESPIRATORY_AND_UNINARY:
	                this.patientLayerRespiratoryAndUrinary.visible = true;
	                break;
	            case Scanner_1.Scanner.NERVOUS:
	                this.patientLayerNervous.visible = true;
	                break;
	            default:
	                break;
	        }
	    };
	    MaskedLayer.prototype.destroy = function () {
	        this.removeChildren();
	    };
	    return MaskedLayer;
	}(pixi_js_1.Sprite));
	exports.MaskedLayer = MaskedLayer;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var HospitalEvent_1 = __webpack_require__(9);
	var pixi_js_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(3);
	var Button_1 = __webpack_require__(21);
	var ButtonEvent_1 = __webpack_require__(17);
	var HotSpot = (function (_super) {
	    __extends(HotSpot, _super);
	    function HotSpot() {
	        var _this = _super.call(this) || this;
	        _this.btnPressedListener = function (e) {
	            Logger_1.Logger.log(_this, "HotSpot btnPressedListener this.touchable == " + _this.touchable);
	            if (_this.touchable) {
	                Logger_1.Logger.log(_this, "HotSpot btnPressedListener this.touchable == " + _this.touchable);
	                _this.emit(HospitalEvent_1.HospitalEvent.DISEASE_HOTSPOT_PRESSED);
	            }
	        };
	        _this.onAddedToStage();
	        return _this;
	    }
	    HotSpot.prototype.onAddedToStage = function () {
	        this.createHotSpotArt();
	        this.on(ButtonEvent_1.ButtonEvent.CLICKED, this.btnPressedListener);
	        this.highlight();
	    };
	    HotSpot.prototype.enable = function () {
	        this.touchable = true;
	    };
	    HotSpot.prototype.disable = function () {
	        this.touchable = false;
	    };
	    HotSpot.prototype.highlight = function () {
	        TweenMax.to(this, 0.4, { scaleX: 1.2, scaleY: 1.2, repeat: -1, yoyo: true, ease: Linear.easeNone });
	    };
	    HotSpot.prototype.stopHighlight = function () {
	        TweenMax.killTweensOf(this);
	    };
	    HotSpot.prototype.createHotSpotArt = function () {
	        this.addTexture(pixi_js_1.Texture.fromFrame("operationRoom_scannerHotspot_rings"));
	        this.x = -74;
	        this.y = -54;
	    };
	    HotSpot.prototype.destroy = function () {
	        this.stopHighlight();
	        this.off(ButtonEvent_1.ButtonEvent.CLICKED, this.btnPressedListener);
	    };
	    return HotSpot;
	}(Button_1.Button));
	exports.HotSpot = HotSpot;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Config_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(3);
	var DataSaver = (function () {
	    function DataSaver() {
	        Logger_1.Logger.log(this, "DataSaver");
	        if (Modernizr.localstorage) {
	            Logger_1.Logger.log(this, "DataSaver init  : Modernizr says : window.localStorage is available!");
	            this.setupData();
	        }
	        else {
	            Logger_1.Logger.log(this, "DataSaver Modernizr says : NO GOOD no native support for local storage");
	        }
	    }
	    DataSaver.prototype.setupData = function () {
	        if (Modernizr.localstorage) {
	            try {
	                var sPatients = this.read();
	                Logger_1.Logger.log(this, "DataSaver Existing data (patients cured): sPatients == " + sPatients);
	                if (sPatients == "") {
	                    Config_1.Config.patientsCured = 0;
	                }
	                else {
	                    Config_1.Config.patientsCured = Number(sPatients);
	                }
	            }
	            catch (e) {
	                Config_1.Config.patientsCured = 0;
	                Logger_1.Logger.log(this, "DataSaver ERROR No existing Patients data:");
	            }
	            try {
	                var sDiseases = this.readDiseases();
	                Logger_1.Logger.log(this, "DataSaver Existing data (diseases cured): sDiseases == " + sDiseases);
	                Config_1.Config.curedDiseases = [];
	                if (sDiseases.length > 0) {
	                    Config_1.Config.curedDiseases = sDiseases.split(",");
	                }
	            }
	            catch (e) {
	                Config_1.Config.curedDiseases = [];
	                Logger_1.Logger.log(this, "DataSaver ERROR No existing Diseases data:");
	            }
	        }
	        Logger_1.Logger.log(this, "DataSaver AFTER Config.patientsCured " + Config_1.Config.patientsCured);
	        Logger_1.Logger.log(this, "DataSaver AFTER Config.curedDiseases " + Config_1.Config.curedDiseases + " : Config.curedDiseases.length ===" + Config_1.Config.curedDiseases.length);
	    };
	    DataSaver.prototype.setLocalStorage = function (key, data) {
	        if (Modernizr.localstorage) {
	            if (!DataSaver.LOCAL_STORAGE_EXCEEDED) {
	                try {
	                    localStorage.setItem(key, data);
	                    Logger_1.Logger.log(this, "Modernizr says : GOOD : native support for SET local storage : SAVED key, data == " + key + " : " + data);
	                }
	                catch (e) {
	                    if (this.isQuotaExceeded(e)) {
	                        DataSaver.LOCAL_STORAGE_EXCEEDED = true;
	                        Logger_1.Logger.log(this, "ERROR DataSaver::::::::::::::: localStorage : Storage full");
	                    }
	                    else {
	                        Logger_1.Logger.log(this, "ERROR DataSaver: no native support for SET local storage");
	                    }
	                }
	            }
	            else {
	                Logger_1.Logger.log(this, "DataSaver setLocalStorage CAN'T SAVE ::::::::::::::: LOCAL_STORAGE_EXCEEDED");
	            }
	        }
	        else {
	            Logger_1.Logger.log(this, "Modernizr says : NO GOOD : no native support for SET local storage");
	        }
	    };
	    DataSaver.prototype.isQuotaExceeded = function (e) {
	        var quotaExceeded = false;
	        if (e) {
	            if (e.code) {
	                Logger_1.Logger.log(this, "DataSaver localStorage isQuotaExceeded : e.code === " + e.code);
	                switch (e.code) {
	                    case 22:
	                        quotaExceeded = true;
	                        break;
	                    case 1014:
	                        if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
	                            quotaExceeded = true;
	                        }
	                        break;
	                }
	            }
	            else if (e.number === -2147024882) {
	                quotaExceeded = true;
	            }
	        }
	        Logger_1.Logger.log(this, "DataSaver localStorage isQuotaExceeded : RETURNING quotaExceeded === " + quotaExceeded);
	        return quotaExceeded;
	    };
	    DataSaver.prototype.getLocalStorage = function (key) {
	        var data;
	        if (Modernizr.localstorage) {
	            try {
	                data = localStorage.getItem(key);
	            }
	            catch (e) {
	                Logger_1.Logger.log(this, "DataSaver CATCH : no native support for GET local storage");
	            }
	        }
	        else {
	            Logger_1.Logger.log(this, "Modernizr says : NO GOOD : no native support for GET local storage");
	        }
	        return data;
	    };
	    DataSaver.prototype.removeLocalStorage = function (key) {
	        if (Modernizr.localstorage) {
	            try {
	                localStorage.removeItem(key);
	            }
	            catch (e) {
	                Logger_1.Logger.log(this, "CATCH : no native support for REMOVE local storage");
	            }
	        }
	        else {
	            Logger_1.Logger.log(this, "Modernizr says : NO GOOD : no native support for REMOVE local storage");
	        }
	    };
	    DataSaver.prototype.read = function () {
	        var patients_cured;
	        if (Modernizr.localstorage) {
	            patients_cured = this.getLocalStorage(DataSaver.PATIENTS_CURED);
	            Logger_1.Logger.log(this, "read  patients_cured === " + patients_cured);
	        }
	        return patients_cured;
	    };
	    ;
	    DataSaver.prototype.save = function (data) {
	        console.log("save()" + data);
	        Logger_1.Logger.log(this, "DataSaver save  DataSaver.PATIENTS_CURED, data === " + data);
	        if (Modernizr.localstorage) {
	            this.setLocalStorage(DataSaver.PATIENTS_CURED, data);
	        }
	    };
	    ;
	    DataSaver.prototype.readDiseases = function () {
	        var diseases_cured = "";
	        if (Modernizr.localstorage) {
	            try {
	                diseases_cured = this.getLocalStorage(DataSaver.DISEASES_CURED);
	                Logger_1.Logger.log(this, "diseases_cured == " + diseases_cured);
	            }
	            catch (e) {
	                Logger_1.Logger.log(this, "ERROR readDiseases");
	            }
	        }
	        return diseases_cured;
	    };
	    ;
	    DataSaver.prototype.saveDiseases = function (data) {
	        Logger_1.Logger.log(this, "DataSaver saveDiseases  DataSaver.DISEASES_CURED, data === " + data);
	        if (Modernizr.localstorage) {
	            this.setLocalStorage(DataSaver.DISEASES_CURED, data);
	        }
	    };
	    return DataSaver;
	}());
	DataSaver.PATIENTS_CURED = "patients_cured";
	DataSaver.DISEASES_CURED = "diseases_cured";
	exports.DataSaver = DataSaver;


/***/ })
/******/ ]);
//# sourceMappingURL=debug/main.map